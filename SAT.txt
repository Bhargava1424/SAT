
 

========== FILE: package.json ==========

{
  "dependencies": {
    "confetti": "^2.0.3",
    "date-fns": "^3.6.0",
    "react-confetti": "^6.1.0",
    "react-confetti-explosion": "^2.1.2",
    "react-datepicker": "^7.0.0"
  }
}


 

========== FILE: ReadMe.md ==========

to start frontend:
cd frontend
npm run start

to start app.js:
cd server
node app.js

 

========== FILE: structure.txt ==========

SAT/
├── frontend/
│   ├── node_modules/
│   ├── public/
│   ├── src/
│   │   ├── assets/
│   │   ├── components/
│   │   │   ├── AddAttendance.js
│   │   │   ├── AddTeachers.js
│   │   │   ├── AuthContext.js
│   │   │   ├── CompletedSessions.js
│   │   │   ├── Dashboard.js
│   │   │   ├── LoginPage.js
│   │   │   ├── Navbar.js
│   │   │   ├── PendingSessions.js
│   │   │   ├── SessionsAndAllotment.js
│   │   │   ├── StudentAssessment.js
│   │   │   ├── StudentECA.js
│   │   │   ├── UpcomingSessions.js
│   │   │   ├── UpdateStudent.js
│   │   │   ├── UploadModal.js
│   │   │   └── ViewFeedbacks.js
│   │   ├── App.css
│   │   ├── App.js
│   │   ├── App.test.js
│   │   ├── index.css
│   │   ├── index.js
│   │   ├── logo.svg
│   │   ├── Navbar.css
│   │   ├── reportWebVitals.js
│   │   └── setupTests.js
│   ├── .gitignore
│   ├── package-lock.json
│   ├── package.json
│   ├── postcss.config.js
│   ├── README.md
│   └── tailwind.config.js
├── server/
│   ├── config/
│   │   └── db.js
│   ├── middleware/
│   ├── models/
│   │   ├── Branch.js
│   │   ├── ECA.js
│   │   ├── Feedback.js
│   │   ├── student.js
│   │   └── Teacher.js
│   ├── routes/
│   │   ├── branchRoutes.js
│   │   ├── driveRoutes.js
│   │   ├── ecaRoutes.js
│   │   ├── feedbackRoutes.js
│   │   ├── studentRoutes.js
│   │   └── teacherRoutes.js
│   ├── uploads/
│   ├── .gitignore
│   ├── .gitattributes
│   ├── package-lock.json
│   ├── package.json
│   └── server.js
└── .gitignore



-Student Assesment project using React+TailwindCSS+Node



 OAuth 2.0 Credentials:
{"web":{"client_id":"660495865700-eub3k43pf368cv6e3ul0j4mdsutgak1p.apps.googleusercontent.com","project_id":"edu-422717","auth_uri":"https://accounts.google.com/o/oauth2/auth","token_uri":"https://oauth2.googleapis.com/token","auth_provider_x509_cert_url":"https://www.googleapis.com/oauth2/v1/certs","client_secret":"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","javascript_origins":["http://localhost:3000"]}}


 

========== FILE: server/package.json ==========

{
  "dependencies": {
    "bcrypt": "^5.1.1",
    "cors": "^2.8.5",
    "date-fns": "^3.6.0",
    "dotenv": "^16.4.5",
    "express": "^4.19.2",
    "googleapis": "^137.1.0",
    "mailer": "^0.6.7",
    "mongoose": "^8.3.4",
    "multer": "^1.4.5-lts.1",
    "node": "^22.3.0",
    "nodemailer": "^6.9.13",
    "xlsx": "^0.18.5"
  }
}



 

========== FILE: package.json ==========

{
  "dependencies": {
    "confetti": "^2.0.3",
    "date-fns": "^3.6.0",
    "react-confetti": "^6.1.0",
    "react-confetti-explosion": "^2.1.2",
    "react-datepicker": "^7.0.0"
  }
}


 

========== FILE: ReadMe.md ==========

to start frontend:
cd frontend
npm run start

to start app.js:
cd server
node app.js

 

========== FILE: structure.txt ==========

SAT/
├── frontend/
│   ├── node_modules/
│   ├── public/
│   ├── src/
│   │   ├── assets/
│   │   ├── components/
│   │   │   ├── AddAttendance.js
│   │   │   ├── AddTeachers.js
│   │   │   ├── AuthContext.js
│   │   │   ├── CompletedSessions.js
│   │   │   ├── Dashboard.js
│   │   │   ├── LoginPage.js
│   │   │   ├── Navbar.js
│   │   │   ├── PendingSessions.js
│   │   │   ├── SessionsAndAllotment.js
│   │   │   ├── StudentAssessment.js
│   │   │   ├── StudentECA.js
│   │   │   ├── UpcomingSessions.js
│   │   │   ├── UpdateStudent.js
│   │   │   ├── UploadModal.js
│   │   │   └── ViewFeedbacks.js
│   │   ├── App.css
│   │   ├── App.js
│   │   ├── App.test.js
│   │   ├── index.css
│   │   ├── index.js
│   │   ├── logo.svg
│   │   ├── Navbar.css
│   │   ├── reportWebVitals.js
│   │   └── setupTests.js
│   ├── .gitignore
│   ├── package-lock.json
│   ├── package.json
│   ├── postcss.config.js
│   ├── README.md
│   └── tailwind.config.js
├── server/
│   ├── config/
│   │   └── db.js
│   ├── middleware/
│   ├── models/
│   │   ├── Branch.js
│   │   ├── ECA.js
│   │   ├── Feedback.js
│   │   ├── student.js
│   │   └── Teacher.js
│   ├── routes/
│   │   ├── branchRoutes.js
│   │   ├── driveRoutes.js
│   │   ├── ecaRoutes.js
│   │   ├── feedbackRoutes.js
│   │   ├── studentRoutes.js
│   │   └── teacherRoutes.js
│   ├── uploads/
│   ├── .gitignore
│   ├── .gitattributes
│   ├── package-lock.json
│   ├── package.json
│   └── server.js
└── .gitignore



-Student Assesment project using React+TailwindCSS+Node



 OAuth 2.0 Credentials:
{"web":{"client_id":"660495865700-eub3k43pf368cv6e3ul0j4mdsutgak1p.apps.googleusercontent.com","project_id":"edu-422717","auth_uri":"https://accounts.google.com/o/oauth2/auth","token_uri":"https://oauth2.googleapis.com/token","auth_provider_x509_cert_url":"https://www.googleapis.com/oauth2/v1/certs","client_secret":"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","javascript_origins":["http://localhost:3000"]}}



 

========== FILE: server/package.json ==========

{
  "dependencies": {
    "bcrypt": "^5.1.1",
    "cors": "^2.8.5",
    "date-fns": "^3.6.0",
    "dotenv": "^16.4.5",
    "express": "^4.19.2",
    "googleapis": "^137.1.0",
    "mailer": "^0.6.7",
    "mongoose": "^8.3.4",
    "multer": "^1.4.5-lts.1",
    "node": "^22.3.0",
    "nodemailer": "^6.9.13",
    "xlsx": "^0.18.5"
  }
}


 

========== FILE: server/app.js ==========

const express = require('express');
const app = express();
const mongoose = require('mongoose');
const cors = require('cors');
const bodyParser = require('body-parser');
require('dotenv').config({ path: '../.env' });

console.log(process.env.MONGODB_URI);

const teacherRouter = require('./routes/teachers.js');
const studentRouter = require('./routes/students.js');
const clusterRouter = require('./routes/clusters.js');
const sessionRouter = require('./routes/sessions.js');
const feedbackRouter = require('./routes/feedbacks.js');
const ecaRouter = require('./routes/ecas.js');
const receptionistRouter = require('./routes/receptionist.js'); // New receptionist routes
const branchRouter = require('./routes/branches.js');
const driveRouter = require('./routes/drive.js');

const port = process.env.PORT || 5000;

mongoose.connect(process.env.MONGODB_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true
})
.then(() => console.log('Connected to MongoDB'))
.catch(error => console.error('Could not connect to MongoDB', error));

app.use(cors());
app.use(bodyParser.json());
app.use(express.json());

// Use the routers
app.use('/teachers', teacherRouter);
app.use('/students', studentRouter);
app.use('/clusters', clusterRouter);
app.use('/sessions', sessionRouter);
app.use('/feedbacks', feedbackRouter);
app.use('/eca', ecaRouter);
app.use('/receptionist', receptionistRouter); // New route for receptionist actions
app.use('/branches', branchRouter); 
app.use('/', driveRouter);

app.listen(port, () => {
    console.log(`Server is listening on port ${port}`);
});

 

========== FILE: server/routes/receptionist.js ==========

const express = require('express');
const router = express.Router();
const Student = require('../models/Student');
const multer = require('multer');
const upload = multer(); // Use multer to handle file uploads
const XLSX = require('xlsx');

router.post('/attendance', upload.single('file'), async (req, res) => {
    try {
        if (!req.file) {
            return res.status(400).json({ message: 'No file uploaded.' });
        }

        const workbook = XLSX.read(req.file.buffer, { type: 'buffer' });
        const sheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[sheetName];
        const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });

        const headers = jsonData[0];
        const requiredHeaders = ['Application Number', 'Student Name', 'FN/Total', 'AN/Total'];

        // Validate headers
        for (let header of requiredHeaders) {
            if (!headers.includes(header)) {
                return res.status(400).json({ message: 'Excel file has missing fields, please check.' });
            }
        }

        const attendanceData = jsonData.slice(1).map(row => {
            const [applicationNumber, studentName, fnTotal, anTotal] = row;
            const fnGrade = calculateGrade(fnTotal);
            const anGrade = calculateGrade(anTotal);
            return { applicationNumber, studentName, fnTotal, anTotal, fnGrade, anGrade };
        });

        // Update attendance for each student in the database
        for (const data of attendanceData) {
            const student = await Student.findOne({ applicationNumber: data.applicationNumber });
            if (student) {
                // Assuming you want to store attendance in a specific format
                // You might need to adjust this logic based on your needs
                student.attendance[currentSessionPeriod] = {
                    fn: data.fnTotal,
                    an: data.anTotal,
                    fnGrade: data.fnGrade, // Store calculated grades
                    anGrade: data.anGrade
                };
                await student.save();
            }
        }

        res.json({ message: 'Attendance updated successfully' });
    } catch (error) {
        console.error('Error processing attendance:', error);
        res.status(500).json({ message: 'Failed to process attendance' });
    }
});

// Helper function to calculate grade (you'll need to define the logic)
function calculateGrade(attendance) {
    // Implement your grade calculation logic here
    // For example:
    const [present, total] = attendance.split('/');
    const percentage = (present / total) * 100;
    if (percentage >= 90) return 'A';
    // ... other conditions ...
    else return 'F';
}

// Helper function to get the current session period (you'll need to implement this)
function currentSessionPeriod() {
    // Logic to get the current session period based on date
}

module.exports = router;


 

========== FILE: server/routes/branches.js ==========

const express = require('express');
const router = express.Router();
const Branch = require('../models/Branch'); // Import the Branch model
const MongoClient = require('mongodb').MongoClient;

// GET route to list all branches
router.get('/', async (req, res) => {
    try {
        // Create a MongoDB client
        const uri = process.env.MONGO_URI_ERP;
        const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });

        // Connect to the MongoDB database
        await client.connect();
        console.log('Connected to MongoDB');

        // Access the "branches" collection
        const collection = client.db().collection('branches');

        // Fetch all branches from the database
        const branchesCollection = client.db().collection('branches');
        const branches = await branchesCollection.find().toArray();
        res.status(200).json(branches);
    
    } catch (error) {
        console.error('Error fetching branches:', error);
        res.status(500).json({ message: 'Error fetching branches', error: error.message });
    }
});

module.exports = router;


 

========== FILE: server/routes/sessions.js ==========

// server/routes/sessions.js

const express = require('express');
const router = express.Router();
const Session = require('../models/Session');
const { addDays, format, isSameDay, nextMonday } = require('date-fns');
const Cluster = require('../models/Cluster'); // Import the Cluster model

// Get all sessions
router.get('/', async (req, res) => {
  try {
    const sessions = await Session.find();
    res.json(sessions);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// Get a specific session by ID
router.get('/:id', getSession, (req, res) => {
  res.json(res.session);
});

// Helper function to generate sessions for two years (optimized)
const generateSessionsForTwoYears = async (startDate) => {
  const sessions = [];
  const subjectClusterMapping = {
    'Mathematics': ['A', 'B', 'C'],
    'Physics': ['B', 'C', 'A'],
    'Chemistry': ['C', 'A', 'B']
  };
  const clusters = await Cluster.find(); // Fetch all clusters once

  for (let week = 0; week < 104; week++) { // 104 weeks in two years
    for (const subject in subjectClusterMapping) {
      const clusterType = subjectClusterMapping[subject][(week % 6) / 2 | 0];

      // Find the corresponding cluster (optimized for cluster lookup)
      const cluster = clusters.find(c => 
        c.clusterType === clusterType &&
        c.branch === branch && 
        c.batch === batch
      );

      if (cluster) { // Only create the session if a cluster exists
        const currentDate = addDays(startDate, week * 7);
        const session = {
          clusterID: cluster.clusterID, // Directly assign the cluster ID
          period: `${format(currentDate, 'MMM d, yyyy')} - ${format(addDays(currentDate, 13), 'MMM d, yyyy')}`,
          startDate: currentDate,
          subject: subject,
          clusterType: clusterType
        };
        sessions.push(session);
      }
    }
  }
  return sessions;
};

// Create a new session (for a new 2-week period)
router.post('/', async (req, res) => {
  try {
    const startDate = new Date();
    const sessions = await generateSessionsForTwoYears(startDate);
    await Session.insertMany(sessions);
    res.status(201).json({ message: 'Sessions created for two years' });
  } catch (err) {
    console.error("Error creating sessions:", err);
    res.status(500).json({ message: err.message });
  }
});

// Get the current session
router.get('/current', async (req, res) => {
  try {
    const today = new Date();
    const currentSession = await Session.findOne({
      startDate: { $lte: today },
      $expr: { $gt: [addDays(new Date("$startDate"), 13), today] }
    });

    if (!currentSession) {
      return res.status(404).json({ message: 'No active session found for the current date.' });
    }
    res.json(currentSession);
  } catch (err) {
    console.error("Error getting current session:", err);
    res.status(500).json({ message: err.message });
  }
});

// Update a session
router.patch('/:id', getSession, async (req, res) => {
  // Update session fields (e.g., teachers, status)
  if (req.body.teachers) {
    res.session.teachers = req.body.teachers;
  }
  // ... other fields to update ...

  try {
    const updatedSession = await res.session.save();
    res.json(updatedSession);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
});

// Delete a session by ID
router.delete('/:id', getSession, async (req, res) => {
  try {
    await res.session.deleteOne();
    res.json({ message: 'Session deleted!' });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// Middleware function to get a session by ID
async function getSession(req, res, next) {
  let session;
  try {
    session = await Session.findById(req.params.id);
    if (session == null) {
      return res.status(404).json({ message: 'Cannot find session' });
    }
  } catch (err) {
    return res.status(500).json({ message: err.message });
  }

  res.session = session;
  next();
}

module.exports = router;

 

========== FILE: server/routes/ecas.js ==========

const express = require('express');
const router = express.Router();
const ECA = require('../models/ECA');
const { drive } = require('../config/googleConfig'); // Make sure googleConfig is set up
const fs = require('fs');
const path = require('path');

// Get all ECA entries
router.get('/', async (req, res) => {
    try {
        const ecas = await ECA.find();
        res.json(ecas);
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

// Get ECA entries for a specific student by application number
router.get('/:applicationNumber', async (req, res) => {
    try {
        const ecas = await ECA.find({ applicationNumber: req.params.applicationNumber });
        res.json(ecas);
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

// Submit new ECA entry
router.post('/', async (req, res) => {
    const eca = new ECA(req.body);
    try {
        // Get the current session ID (assuming you have a getCurrentSession helper)
        const currentSession = await getCurrentSession();
        if (!currentSession) {
            return res.status(400).json({ message: 'No active session found to associate ECA entry with.' });
        }
        eca.sessionId = currentSession._id;

        const newECA = await eca.save();
        res.status(201).json(newECA);
    } catch (err) {
        res.status(400).json({ message: err.message });
    }
});

// Update ECA entry by ID
router.patch('/:id', getECA, async (req, res) => {
    // Update ECA fields
    try {
        const updatedECA = await res.eca.save();
        res.json(updatedECA);
    } catch (err) {
        res.status(400).json({ message: err.message });
    }
});

// Delete ECA entry by ID
router.delete('/:id', getECA, async (req, res) => {
    try {
        await res.eca.remove();
        res.json({ message: 'ECA entry deleted!' });
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

// Middleware to get ECA entry by ID
async function getECA(req, res, next) {
    let eca;
    try {
        eca = await ECA.findById(req.params.id);
        if (eca == null) {
            return res.status(404).json({ message: 'Cannot find ECA entry' });
        }
    } catch (err) {
        return res.status(500).json({ message: err.message });
    }
    res.eca = eca;
    next();
}

// Helper function to get the current session (you'll need to implement this)
async function getCurrentSession() {
    // Logic to get the current session based on date
}

// Route for uploading photos to Google Drive
router.post('/upload-photo', async (req, res) => {
    const { applicationNumber, file } = req.body; // Assuming file is sent as base64

    if (!applicationNumber || !file) {
        return res.status(400).json({ message: 'Application number and file are required' });
    }

    try {
        // Convert base64 to buffer
        const buffer = Buffer.from(file.replace(/^data:image\/\w+;base64,/, ""), 'base64');

        const fileMetadata = {
            name: `${applicationNumber}.jpg`, // Assuming JPG format
            parents: ['your-google-drive-folder-id'] // Replace with your folder ID
        };
        const media = {
            mimeType: 'image/jpeg',
            body: buffer
        };

        const file = await drive.files.create({
            resource: fileMetadata,
            media: media,
            fields: 'id, webViewLink' // Get the web view link
        });

        // Make the file publicly accessible
        await drive.permissions.create({
            fileId: file.data.id,
            resource: {
                role: 'reader',
                type: 'anyone'
            }
        });

        res.json({ googleDriveLink: file.data.webViewLink });
    } catch (error) {
        console.error('Error uploading to Google Drive:', error);
        res.status(500).json({ message: 'Failed to upload to Google Drive' });
    }
});

module.exports = router;


 

========== FILE: server/routes/drive.js ==========

const router = require('express').Router();
const upload = require('../middleware/uploadMiddleware');
const { drive } = require('../config/googleConfig');
const fs = require('fs');
const path = require('path');

router.post('/upload-to-drive', upload.single('file'), async (req, res) => {
    if (!req.file) {
        return res.status(400).send('No file uploaded.');
    }
    
    // Retrieve the application number from the request body
    const applicationNumber = req.body.applicationNumber;
    const filePath = path.join(__dirname, '..', req.file.path);
    const fileMetadata = {
        name: `${applicationNumber}.pdf`, // Assuming the uploaded file is a PDF, change extension if necessary
    };
    const media = {
        mimeType: req.file.mimetype,
        body: fs.createReadStream(filePath)
    };
    
    try {
        const file = await drive.files.create({
            resource: fileMetadata,
            media: media,
            fields: 'id'
        });
        fs.unlinkSync(filePath); // delete file from server after upload
        res.status(200).json({ fileId: file.data.id });
    } catch (error) {
        console.error('Failed to upload to Google Drive:', error);
        res.status(500).send('Failed to upload to Google Drive');
    }
});

module.exports = router;


 

========== FILE: server/routes/clusters.js ==========

const express = require('express');
const router = express.Router();
const Cluster = require('../models/Cluster');
const Student = require('../models/Student');

// Get all clusters
router.get('/', async (req, res) => {
    try {
        // Optional: Filter clusters by branch if branch query parameter is present
        if (req.query.branch) {
            const clusters = await Cluster.find({ branch: req.query.branch });
            return res.json(clusters);
        }

        const clusters = await Cluster.find();
        res.json(clusters);
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

// Get a specific cluster by ID
router.get('/:id', getCluster, (req, res) => {
    res.json(res.cluster);
});

// Create a new cluster
router.post('/', async (req, res) => {
    const cluster = new Cluster(req.body);

    try {
        const newCluster = await cluster.save();
        res.status(201).json(newCluster);
    } catch (err) {
        res.status(400).json({ message: err.message });
    }
});

// Update a cluster by ID
router.patch('/:id', getCluster, async (req, res) => {
    // Update cluster fields (clusterID, setA, setB, branch)
    try {
        const updatedCluster = await res.cluster.save();
        res.json(updatedCluster);
    } catch (err) {
        res.status(400).json({ message: err.message });
    }
});

// Delete a cluster by ID
router.delete('/:id', getCluster, async (req, res) => {
    try {
        // Find all students associated with this cluster
        const students = await Student.find({ cluster: req.params.id });

        // Remove the cluster reference from the students and decrement studentCount
        for (const student of students) {
            student.cluster = undefined;
            const studentCluster = await Cluster.findOne({ clusterID: req.params.id });
            if (studentCluster) {
                studentCluster.studentCount--;
                await studentCluster.save();
            }
            await student.save();
        }

        // Delete the cluster
        await res.cluster.deleteOne();

        res.json({ message: 'Cluster deleted!' });
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

// Middleware function to get a cluster by ID
async function getCluster(req, res, next) {
    let cluster;
    try {
        cluster = await Cluster.findById(req.params.id);
        if (cluster == null) {
            return res.status(404).json({ message: 'Cannot find cluster' });
        }
    } catch (err) {
        return res.status(500).json({ message: err.message });
    }

    res.cluster = cluster;
    next();
}

module.exports = router;


 

========== FILE: server/routes/students.js ==========

const express = require('express');
const router = express.Router();
const Student = require('../models/Student');
const Cluster = require('../models/Cluster');
const Session = require('../models/Session');
const MongoClient = require('mongodb').MongoClient;

// Get all students
// router.get('/', async (req, res) => {
//   console.log('Get all students');
//   try {
//     // Create a MongoDB client
//     const uri = process.env.MONGO_URI_ERP;
//     const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });

//     // Connect to the MongoDB server
//     await client.connect();
//     console.log('Connected to MongoDB');

//     // Access the "students" collection
//     const studentsCollection = client.db().collection('students');

//     // Query the "students" collection
//     const students = await studentsCollection.find().toArray();
//     // console.log(students);

//     // Close the MongoDB connection
//     await client.close();

//     res.json(students);
//   } catch (err) {
//     console.error('Error fetching students:', err);
//     res.status(500).json({ message: err.message });
//   }
// });

// Get all students (This will now also populate the database)
router.get('/', async (req, res) => {
  try {
    // Fetch students from the other database (replace with your logic)
    const studentsFromOtherDB = await fetchStudentsFromOtherDB(); 

    // 1. Find existing students in this application's database
    const existingStudents = await Student.find();

    // 2. Identify new students (those not in this app's database)
    const newStudents = studentsFromOtherDB.filter(
      student => !existingStudents.some(
        existing => existing.applicationNumber === student.applicationNumber
      )
    );

    // 3. Create Clusters if none exist
    for (const newStudent of newStudents){
      if (newStudent.branch && newStudent.batch) {
        await createClustersIfNecessary(newStudent.branch, newStudent.batch);
      }

    // 4. Assign Clusters to new students
      const assignedCluster = await assignCluster(newStudent.branch, newStudent.batch);
      console.log('assignedCluster', assignedCluster);
      const setType = await assignSet(newStudent.branch, newStudent.batch, assignedCluster);
      console.log('setType', setType);
      newStudent.clusterID = assignedCluster;
      newStudent.setType = setType;

      await new Student(newStudent).save(); // Save the new student with assigned cluster
    }

    // 5. Send all students from this app's database
    const allStudents = await Student.find();
    res.json(studentsFromOtherDB); 
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// Function to fetch students from the other database (replace with your logic)
async function fetchStudentsFromOtherDB() {
  try {
    // Create a MongoDB client
    const uri = process.env.MONGO_URI_ERP;
    const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });

    // Connect to the MongoDB server
    await client.connect();
    console.log('Connected to other database');

    // Access the "students" collection
    const studentsCollection = client.db().collection('students');

    // Query the "students" collection
    const students = await studentsCollection.find().toArray();
    // console.log(students);

    // Close the MongoDB connection
    await client.close();

    return students;
  } catch (err) {
    console.error('Error fetching students from other database:', err);
    throw err;
  }
}

// Function to create clusters if they don't exist
async function createClustersIfNecessary(branch, batch) {
  const existingClusters = await Cluster.find({ branch, batch });
  if (existingClusters.length === 0) {
    console.log('Creating clusters for branch and batch:', branch, batch);
    const clusters = [
      { clusterID: `A-${branch}-${batch}`, setA: 0, setB: 0, branch, batch, clusterType: 'A' },
      { clusterID: `B-${branch}-${batch}`, setA: 0, setB: 0, branch, batch, clusterType: 'B' },
      { clusterID: `C-${branch}-${batch}`, setA: 0, setB: 0, branch, batch, clusterType: 'C' }
    ];
    await Cluster.insertMany(clusters);
    // Call the function to create sessions after creating clusters
    await createSessionsForTwoYears(branch, batch); 
  }
}

// Function to create sessions for two years
const createSessionsForTwoYears = async (branch, batch) => {
  try {
    const startDate = new Date();
    const sessions = generateSessionsForTwoYears(startDate, branch, batch);
    await Session.insertMany(sessions);
    console.log('Sessions created for two years');
  } catch (err) {
    console.error("Error creating sessions:", err);
    throw err; // Re-throw the error to be handled at a higher level
  }
};

// Function to generate sessions for two years
const generateSessionsForTwoYears = (startDate, branch, batch) => {
  const sessions = [];
  const subjectClusterMapping = {
    'Mathematics': ['A', 'B', 'C'],
    'Physics': ['B', 'C', 'A'],
    'Chemistry': ['C', 'A', 'B']
  };

  let currentDate = nextMonday(startDate); // Start from next Monday

  for (let year = 0; year < 2; year++) {
    for (let week = 0; week < 52; week++) {
      for (const subject in subjectClusterMapping) {
        const clusterType = subjectClusterMapping[subject][(week % 6) / 2 | 0]; 

        const session = {
          clusterID: `${clusterType}-${branch}-${batch}`,
          period: `${format(currentDate, 'MMM d, yyyy')} - ${format(addDays(currentDate, 13), 'MMM d, yyyy')}`,
          startDate: new Date(currentDate),
          subject: subject,
          branch: branch, // Replace with dynamic branch assignment
          batch: batch, // Replace with dynamic batch assignment
          clusterType: clusterType,
          status: 'pending',
        };
        sessions.push(session);
      }
      currentDate = addDays(currentDate, 14); 
    }
  }
  return sessions;
};

const nextMonday = (date) => {
  const day = date.getDay();
  const diff = 1 - day + (day === 0 ? -6 : 1);
  return addDays(date, diff);
};

const addDays = (date, days) => {
  const result = new Date(date);
  result.setDate(result.getDate() + days);
  return result;
};

const format = (date, format) => {
  return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
};

// Function to assign a cluster to a student
async function assignCluster(branch, batch) {
  const clusters = await Cluster.find({ branch, batch });
  let leastStudents = Infinity;
  let assignedCluster;
  let updatedStudentCount = 0;
  for (const cluster of clusters) {
    console.log('cluster', cluster);
    const studentCount = await Student.countDocuments({ clusterID: cluster.clusterID });
    if (studentCount < leastStudents) {
      leastStudents = studentCount;
      assignedCluster = cluster.clusterID;
      updatedStudentCount = studentCount + 1;
    }
  }

  // update studentCount in the assigned cluster
  console.log('assignedCluster', assignedCluster);
  console.log('updatedStudentCount', updatedStudentCount);
  await Cluster.updateOne({ clusterID: assignedCluster }, {studentCount: updatedStudentCount });

  return assignedCluster;
}

async function assignSet(branch, batch, assignedCluster) {
  const cluster = await Cluster.find({ clusterID: assignedCluster }); 
  console.log('cluster', cluster);
  const setA = cluster[0].setA;
  const setB = cluster[0].setB;
  console.log('setA', setA);
  console.log('setB', setB);
  const assignedSet = setA <= setB ? 'A' : 'B';
  const updatedSetCount = assignedSet === 'A' ? setA + 1 : setB + 1;

  await Cluster.updateOne({ clusterID: assignedCluster }, { ['set' + assignedSet]: updatedSetCount });

  return assignedSet;
}


// Get a specific student by ID
router.get('/:id', getStudent, (req, res) => {
  res.json(res.student);
});

// Create a new student
router.post('/', async (req, res) => {
  const student = new Student(req.body);
  try {
      // Find cluster with the lowest student count for the student's branch
      const cluster = await Cluster.findOne({ branch: student.branch }).sort({ studentCount: 1 });

      if (!cluster) {
          return res.status(500).json({ message: 'No available clusters in this branch' });
      }

      student.cluster = cluster.clusterID;
      cluster.studentCount++;
      await cluster.save();
      const newStudent = await student.save();
      res.status(201).json(newStudent);
  } catch (err) {
      res.status(400).json({ message: err.message });
  }
});

// Update a student by ID
router.patch('/:id', getStudent, async (req, res) => {
  // ... update student fields ...
  try {
      const updatedStudent = await res.student.save();
      res.json(updatedStudent);
  } catch (err) {
      res.status(400).json({ message: err.message });
  }
});

// Delete a student by ID
router.delete('/:id', getStudent, async (req, res) => {
  try {
      await res.student.deleteOne();
      res.json({ message: 'Student deleted!' });
  } catch (err) {
      res.status(500).json({ message: err.message });
  }
});

// Middleware function to get a student by ID
async function getStudent(req, res, next) {
  let student;
  try {
      student = await Student.findById(req.params.id);
      if (student == null) {
          return res.status(404).json({ message: 'Cannot find student' });
      }
  } catch (err) {
      return res.status(500).json({ message: err.message });
  }

  res.student = student;
  next();
}

module.exports = router;

 

========== FILE: server/routes/teachers.js ==========

const express = require('express');
const router = express.Router();
const Teacher = require('../models/Teacher');
const bcrypt = require('bcrypt');
const crypto = require('crypto');
const nodemailer = require('nodemailer');

// Get all teachers
router.get('/', async (req, res) => {
  try {
    const teachers = await Teacher.find();
    res.json(teachers);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Get a specific teacher by ID
router.get('/:id', getTeacher, (req, res) => {
  res.json(res.teacher);
});

// Create a new teacher
router.post('/', async (req, res) => {
  try {
    // const hashedPassword = await bcrypt.hash(req.body.password, 10)
    const teacher = new Teacher({
      name: req.body.name,
      email: req.body.email,
      gmail: req.body.gmail, // Store the provided Gmail
      password: req.body.password, 
      phoneNumber: req.body.phoneNumber,
      branch: req.body.branch,
      teacherID: req.body.teacherID,
      role: req.body.role,
      subject: req.body.subject,
    });
    const newTeacher = await teacher.save();
    res.status(201).json(newTeacher);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
});

// Update a teacher by ID
router.patch('/:id', getTeacher, async (req, res) => {
  if (req.body.name != null) {
    res.teacher.name = req.body.name;
  }
  // ... update other fields similarly ...

  try {
    const updatedTeacher = await res.teacher.save();
    res.json(updatedTeacher);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
});

// Delete a teacher by ID
router.delete('/:id', getTeacher, async (req, res) => {
  try {
    await res.teacher.deleteOne()
    res.json({ message: 'Teacher deleted successfully!' });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Middleware to find a teacher by ID
async function getTeacher(req, res, next) {
  let teacher
  try {
    teacher = await Teacher.findById(req.params.id);
    if (teacher == null) {
      return res.status(404).json({ message: 'Cannot find teacher' });
    }
  } catch (error) {
    return res.status(500).json({ message: error.message });
  }
  res.teacher = teacher;
  next();
}

// Login route
router.post('/login', async (req, res) => {
  try {
    const { email, password } = req.body;
    const teacher = await Teacher.findOne({ email });

    if (!teacher) {
      return res.status(401).json({ message: 'Invalid credentials' });
    }

    const isPasswordValid = password === teacher.password;

    if (!isPasswordValid) {
      return res.status(401).json({ message: 'Invalid credentials' });
    }

    // You might want to generate a JWT here for better security 

    res.json({ teacher });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'Server error' });
  }

});

// Get Director's Gmail by Branch
router.get('/director-gmail/:branch', async (req, res) => {
  try {
    const director = await Teacher.findOne({ 
      role: 'director', 
      branch: req.params.branch 
    });

    if (!director) {
      return res.status(404).json({ error: 'Director not found for this branch' });
    }

    res.json({ gmail: director.gmail });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Request password reset
router.post('/forgot-password', async (req, res) => {
  try {
    const { email } = req.body;
    const teacher = await Teacher.findOne({ email });

    if (!teacher) {
      return res.status(404).json({ message: 'No user with that email' });
    }

    //const token = crypto.randomBytes(32).toString('hex');
    //const resetToken = crypto.createHash('sha256').update(token).digest('hex');

    //teacher.resetPasswordToken = resetToken;
    //teacher.resetPasswordExpires = Date.now() + 3600000; // 1 hour
    //await teacher.save();

    //const resetUrl = `http://localhost:3000/reset-password/${token}`;

    const transporter = nodemailer.createTransport({
      service: 'Gmail',
      auth: {
        user: 'bhargavteja809@gmail.com',
        pass: 'ultb osux dngb jjmp',
      },
    });

    const mailOptions = {
      to: teacher.email,
      from: 'bhargavteja809@gmail.com',
      subject: 'Password Reset Request',
      text: `You are receiving this email because a password reset request for your account was made. If you did not request this, please ignore this email and your password will remain unchanged.\n\n
             The original password is:\n\n
             ${teacher.password}\n\n`
    };
    

    transporter.sendMail(mailOptions, (err) => {
      if (err) {
        console.error('Error sending email:', err);
        return res.status(500).json({ message: 'Error sending email' });
      }
      res.status(200).json({ message: 'Password reset link sent' });
    });
  } catch (error) {
    console.error('Error during password reset request:', error);
    res.status(500).json({ message: 'Server error' });
  }
});

module.exports = router;

 

========== FILE: server/routes/feedbacks.js ==========

const express = require('express');
const router = express.Router();
const Feedback = require('../models/Feedback');

// Get all feedback
router.get('/', async (req, res) => {
    try {
        const feedbacks = await Feedback.find();
        res.json(feedbacks);
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

// Get feedback for a specific student
router.get('/:applicationNumber', async (req, res) => {
    try {
        const feedbacks = await Feedback.find({ applicationNumber: req.params.applicationNumber });
        res.json(feedbacks);
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

// Submit new feedback
router.post('/', async (req, res) => {
    const feedback = new Feedback(req.body);
    try {
        // Get the current session ID
        const currentSession = await getCurrentSession(); // Assuming you have a getCurrentSession helper
        if (!currentSession) {
            return res.status(400).json({ message: 'No active session found to associate feedback with.' });
        }
        feedback.sessionId = currentSession._id; // Associate feedback with the current session

        const newFeedback = await feedback.save();
        res.status(201).json(newFeedback);
    } catch (err) {
        res.status(400).json({ message: err.message });
    }
});

// Update feedback by feedbackId
router.put('/:feedbackId', getFeedback, async (req, res) => {
    if (req.body.feedback != null) {
        res.feedback.feedback = req.body.feedback;
    }
    if (req.body.reviewer != null) { // Allow updating the reviewer
        res.feedback.reviewer = req.body.reviewer;
    }

    try {
        const updatedFeedback = await res.feedback.save();
        res.json(updatedFeedback);
    } catch (err) {
        res.status(400).json({ message: err.message });
    }
});

// Delete feedback by ID
router.delete('/:feedbackId', getFeedback, async (req, res) => { // Corrected parameter to feedbackId
    try {
        await res.feedback.remove();
        res.json({ message: 'Feedback deleted!' });
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

// Middleware to get feedback by ID using feedbackId
async function getFeedback(req, res, next) {
    let feedback;
    try {
        feedback = await Feedback.findOne({ feedbackId: req.params.feedbackId });
        if (feedback == null) {
            return res.status(404).json({ message: 'Cannot find feedback' });
        }
    } catch (err) {
        return res.status(500).json({ message: err.message });
    }
    res.feedback = feedback;
    next();
}

// Helper function to get the current session (you'll need to implement this)
async function getCurrentSession() {
    // Logic to get the current session based on date
}

module.exports = router;


 

========== FILE: server/config/googleConfig.js ==========

// const { google } = require('googleapis');
// // You'll need to set up a Google Cloud Platform project and get credentials:
// // https://developers.google.com/drive/api/v3/quickstart/nodejs
// const CREDENTIALS = require('./credentials.json'); // Replace with your credentials file

// const SCOPES = ['https://www.googleapis.com/auth/drive'];

// const auth = new google.auth.JWT(
//   CREDENTIALS.client_email,
//   null,
//   CREDENTIALS.private_key,
//   SCOPES
// );

// const drive = google.drive({ version: 'v3', auth });

// module.exports = { drive };


 

========== FILE: server/middleware/uploadMiddleware.js ==========

const multer = require('multer');
const upload = multer({ dest: 'uploads/' }); // configure temporary storage folder

module.exports = upload;


 

========== FILE: server/models/Branch.js ==========

const mongoose = require('mongoose');

const branchSchema = new mongoose.Schema({
    name: { type: String, required: true, unique: true }
});

const Branch = mongoose.model('Branch', branchSchema);

module.exports = Branch;


 

========== FILE: server/models/ECA.js ==========

const mongoose = require('mongoose');
const { v4: uuidv4 } = require('uuid');

const ecaSchema = new mongoose.Schema({
    studentName: {
        type: String,
        required: true,
    },
    applicationNumber: {
        type: String,
        required: true,
    },
    communicationRating: {
        type: Number,
        min: 1,
        max: 10,
    },
    participationRatings: {
        indoorSports: {
            type: Number,
            min: 1,
            max: 10,
        },
        outdoorSports: {
            type: Number,
            min: 1,
            max: 10,
        },
        music: {
            type: Number,
            min: 1,
            max: 10,
        },
        artLiterature: {
            type: Number,
            min: 1,
            max: 10,
        },
        leadershipTeamwork: {
            type: Number,
            min: 1,
            max: 10,
        },
        debatesActivities: {
            type: Number,
            min: 1,
            max: 10,
        },
    },
    parentFeedback: {
        type: String,
        maxLength: 50,
    },
    date: {
        type: Date,
        default: Date.now,
    },
    uuid: {
        type: String,
        default: uuidv4,
        unique: true,
    },
    // New fields:
    sessionId: {
        type: String,
        ref: 'Session'
    },
    googleDriveLink: {
        type: String,
        default: null
    }
});

module.exports = mongoose.model('ECA', ecaSchema);


 

========== FILE: server/models/Student.js ==========

const mongoose = require('mongoose');

const studentSchema = new mongoose.Schema({
    applicationNumber: {
        type: String,
        required: true,
        unique: true,
    },
    dateOfJoining: String,
    course: String,
    firstName: {
        type: String,
        required: true,
    },
    surName: {
        type: String,
        required: true,
    },
    batch: String,
    branch: {
        type: String,
        required: true,
    },
    studentStatus: String,
    // New fields:
    clusterID: {
        type: String,
        required: true
    },
    setType: {
        type: String,
        required: true
    },
    attendance: {
        type: Object,
        default: {}
    },
    assessmentResults: {
        type: Array,
        default: []
    },
    photo: {
        type: String, // This will store the Google Drive link
        default: null
    }
});

module.exports = mongoose.model('Student', studentSchema);


 

========== FILE: server/models/Cluster.js ==========

const mongoose = require('mongoose');

const clusterSchema = new mongoose.Schema({
  clusterID: {
    type: String,
    required: true,
    unique: true
  },
  setA: {
    type: Number,
    required: true,
  },
  setB: {
    type: Number,
    required: true,
  },
  branch: {
    type: String,
    required: true,
  },
  batch: {
    type: String,
    required: true,
  },
  studentCount: {
    type: Number,
    default: 0
  },
  clusterType: { // New field for cluster type (A, B, or C)
    type: String,
    enum: ['A', 'B', 'C'],
    required: true
  }
});

module.exports = mongoose.model('Cluster', clusterSchema);

 

========== FILE: server/models/Session.js ==========

const mongoose = require('mongoose');

const sessionSchema = new mongoose.Schema({
  clusterID: {
    type: String,
    required: true,
  },
  period: {
    type: String,
    required: true,
  },
  startDate: {
    type: Date,
    required: true
  },
  subject: {
    type: String,
    required: true,
  },
  clusterType: { // New field to store the cluster type (A, B, C)
    type: String,
    enum: ['A', 'B', 'C'],
    required: true
  },
  status: {
    type: String,
    enum: ['pending', 'complete', 'incomplete'],
    default: 'pending'
  }
});

module.exports = mongoose.model('Session', sessionSchema);

 

========== FILE: server/models/Feedback.js ==========

const mongoose = require('mongoose');
const { v4: uuidv4 } = require('uuid');

const feedbackSchema = new mongoose.Schema({
    studentName: {
        type: String,
        required: true
    },
    applicationNumber: {
        type: String,
        required: true
    },
    date: {
        type: Date,
        default: Date.now,
        required: true
    },
    feedback: {
        type: String,
        required: true
    },
    reviewer: {
        type: String,
        required: true
    },
    feedbackId: {
        type: String,
        default: uuidv4,
        unique: true
    },
    // New field:
    sessionId: {
        type: String,
        ref: 'Session'
    }
});

module.exports = mongoose.model('Feedback', feedbackSchema);


 

========== FILE: server/models/Teacher.js ==========

const mongoose = require('mongoose');

const teacherSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
  },
  email: {
    type: String,
    required: true,
    unique: true,
  },
  gmail: { // New Gmail field
    type: String,
    unique: true,
  },
  password: {
    type: String,
    required: true,
  },
  phoneNumber: {
    type: String,
  },
  branch: {
    type: String,
  },
  teacherID: {
    type: String,
    unique: true,
  },
  role: {
    type: String,
    enum: ['admin', 'director', 'vice president', 'teacher', 'receptionist'],
    default: 'teacher',
  },
  subject: {
    type: String,
  },
});

module.exports = mongoose.model('Teacher', teacherSchema);




 

========== FILE: frontend/package.json ==========

{
  "name": "frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^1.7.2",
    "daisyui": "^4.10.5",
    "date-fns": "^3.6.0",
    "framer-motion": "^11.2.6",
    "react": "^18.3.1",
    "react-confetti": "^6.1.0",
    "react-datepicker": "^6.9.0",
    "react-dom": "^18.3.1",
    "react-icons": "^5.2.1",
    "react-router-dom": "^6.23.1",
    "react-scripts": "5.0.1",
    "react-table": "^7.8.0",
    "react-tooltip": "^5.26.4",
    "uuid": "^9.0.1",
    "web-vitals": "^2.1.4",
    "xlsx": "^0.18.5"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "autoprefixer": "^10.4.19",
    "postcss": "^8.4.38",
    "tailwindcss": "^3.4.3"
  }
}


 

========== FILE: frontend/README.md ==========

# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)


 

========== FILE: frontend/tailwind.config.js ==========

/** @type {import('tailwindcss').Config} */
module.exports = {
  purge: ['./src/**/*.{js,jsx,ts,tsx}', './public/index.html'],
  darkMode: false,
  content: [],
  theme: {
    extend: {
      fontSize: {
        'xxs': '0.625rem', // Custom text size (10px)
      }
    },
  },
  plugins: [require('daisyui')],

}



 

========== FILE: frontend/postcss.config.js ==========

module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}


 

========== FILE: frontend/src/logo.svg ==========

<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

 

========== FILE: frontend/src/index.css ==========

@import 'tailwindcss/base';
@import 'tailwindcss/components';
@import 'tailwindcss/utilities';


body {
  background-color: #ffffff; /* White background */
  color: black; /* Adjust text color for readability */
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
      sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}


code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}
.text-xxs {
  font-size: 0.62rem;
  line-height: 1rem;
}


 

========== FILE: frontend/src/index.js ==========

import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import { AuthProvider } from './components/AuthContext';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <AuthProvider>
    <App />
    </AuthProvider>
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();


 

========== FILE: frontend/src/reportWebVitals.js ==========

const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


 

========== FILE: frontend/src/Navbar.css ==========

.active-button {
  position: relative;
  top: -10px;
}

.active-button::after {
  content: '';
  position: absolute;
  bottom: -10px;
  left: 50%;
  transform: translateX(-50%);
  width: 0;
  height: 0;
  border-left: 10px solid transparent;
  border-right: 10px solid transparent;
  border-top: 10px solid #2D5990;
}


 

========== FILE: frontend/src/setupTests.js ==========

// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';


 

========== FILE: frontend/src/App.test.js ==========

import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


 

========== FILE: frontend/src/App.js ==========

import React from 'react';
import { BrowserRouter as Router, Route, Routes, Navigate } from 'react-router-dom';
import { useAuth } from './components/AuthContext';
import Dashboard from './components/Dashboard';
import LoginPage from './components/LoginPage';
import UpdateStudent from './components/UpdateStudent';
import AddTeachers from './components/AddTeachers';
import PendingSessions from './components/PendingSessions';
import CompletedSessions from './components/CompletedSessions';
import UpcomingSessions from './components/UpcomingSessions';
import ViewFeedbacks from './components/ViewFeedbacks';
import SessionAndAllotments from './components/SessionsAndAllotments';
import AddAttendance from './components/AddAttendance';
import StudentAssessment from './components/StudentAssessment';
import StudentECA from './components/StudentECA';
import ForgotPasswordPage from './components/ForgotPasswordPage'; // Import the ForgotPasswordPage component

function App() {
  const { user } = useAuth();

  const userHasRequiredRole = (roles) => {
    return user && roles.includes(user.role);
  };

  return (
    <Router>
      <div className="App">
        <Routes>
          <Route path="/" element={user ? (user.role === 'receptionist' ? <Navigate replace to="/addAttendance" /> : <Navigate replace to="/dashboard" />) : <LoginPage />} />
          <Route path="/login" element={<LoginPage />} />
          <Route path="/forgot-password" element={<ForgotPasswordPage />} /> {/* Add the forgot password route */}
          <Route path="/dashboard" element={userHasRequiredRole(['admin', 'teacher', 'vice president', 'director']) ? <Dashboard /> : <Navigate replace to="/" />} />
          <Route path="/updateStudent" element={userHasRequiredRole(['admin', 'director']) ? <UpdateStudent /> : <Navigate replace to="/" />} />
          <Route path="/addTeacher" element={userHasRequiredRole(['admin', 'director', 'vice president']) ? <AddTeachers /> : <Navigate replace to="/" />} />
          <Route path="/sessionsAndAllotments" element={userHasRequiredRole(['admin', 'director']) ? <SessionAndAllotments /> : <Navigate replace to="/" />} />
          <Route path="/pendingSessions" element={userHasRequiredRole(['teacher']) ? <PendingSessions /> : <Navigate replace to="/" />} />
          <Route path="/completedSessions" element={userHasRequiredRole(['teacher']) ? <CompletedSessions /> : <Navigate replace to="/" />} />
          <Route path="/assessment/:name" element={userHasRequiredRole(['teacher']) ? <StudentAssessment /> : <Navigate replace to="/" />} />
          <Route path="/eca/:applicationNumber/:studentName" element={userHasRequiredRole(['vice president']) ? <StudentECA /> : <Navigate replace to="/" />} />
          <Route path="/upcomingSessions" element={userHasRequiredRole(['teacher']) ? <UpcomingSessions /> : <Navigate replace to="/" />} />
          <Route path="/viewFeedbacks" element={userHasRequiredRole(['admin', 'vice president', 'director']) ? <ViewFeedbacks /> : <Navigate replace to="/" />} />
          <Route path="/addAttendance" element={userHasRequiredRole(['admin', 'receptionist']) ? <AddAttendance /> : <Navigate replace to="/" />} />
        </Routes>
      </div>
    </Router>
  );
}

export default App;


 

========== FILE: frontend/src/App.css ==========

.App {
  text-align: center;
  min-height: 100vh;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}




========== FILE: frontend/src/components/UpdateStudent.js ==========

import React, { useState, useEffect } from 'react';
import Navbar from './Navbar';
import UploadModal from './UploadModal';

const UpdateStudent = () => {
  const [students, setStudents] = useState([]);
  const [selectedRow, setSelectedRow] = useState(null);
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [studentsPerPage] = useState(50);
  const [searchQuery, setSearchQuery] = useState('');
  const [sortColumn, setSortColumn] = useState(null);
  const [sortDirection, setSortDirection] = useState('asc');
  const [modalOpen, setModalOpen] = useState(false);
  const [currentStudent, setCurrentStudent] = useState(null);

  const handleUploadClick = (student) => {
    setCurrentStudent(student);
    setModalOpen(true);
  };

  const closeModal = () => {
    setModalOpen(false);
  };

  useEffect(() => {
    fetchStudents();
  }, []);

  const handleRowClick = (id) => {
    if (selectedRow === id) {
      setSelectedRow(null);
    } else {
      setSelectedRow(id);
    }
  };

  const fetchStudents = async () => {
    setIsLoading(true);
    try {
      const response = await fetch('http://localhost:5000/students');
      const data = await response.json();
      if (response.ok) {
        setStudents(data);
      } else {
        throw new Error(data.error || 'An error occurred while fetching data');
      }
    } catch (error) {
      setError('Error fetching students: ' + error.message);
    } finally {
      setIsLoading(false);
    }
  };

  // Search functionality
  const handleSearch = (event) => {
    setSearchQuery(event.target.value);
    setCurrentPage(1);
  };

  const filteredStudents = students.filter((student) => {
    const searchTerms = searchQuery.toLowerCase().split(',').map((term) => term.trim());
    const studentValues = Object.values(student).map((value) => value.toString().toLowerCase());

    return searchTerms.every((term) => studentValues.some((value) => value.includes(term)));
  });

  // Sorting functionality
  const handleSort = (column) => {
    if (sortColumn === column) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortColumn(column);
      setSortDirection('asc');
    }
  };

  const sortedStudents = filteredStudents.sort((a, b) => {
    if (sortColumn) {
      const valueA = a[sortColumn].toString().toLowerCase();
      const valueB = b[sortColumn].toString().toLowerCase();

      if (valueA < valueB) {
        return sortDirection === 'asc' ? -1 : 1;
      }
      if (valueA > valueB) {
        return sortDirection === 'asc' ? 1 : -1;
      }
    }
    return 0;
  });

  // Pagination logic
  const indexOfLastStudent = currentPage * studentsPerPage;
  const indexOfFirstStudent = indexOfLastStudent - studentsPerPage;
  const currentStudents = sortedStudents.slice(indexOfFirstStudent, indexOfLastStudent);

  const paginate = (pageNumber) => setCurrentPage(pageNumber);

  const totalPages = Math.ceil(sortedStudents.length / studentsPerPage);

  const getPageButtons = () => {
    const buttons = [];

    if (totalPages <= 5) {
      for (let i = 1; i <= totalPages; i++) {
        buttons.push(
          <button
            key={i}
            onClick={() => paginate(i)}
            className={`px-4 py-2 mr-2 ${
              currentPage === i ? 'bg-[#2D5990] text-white' : 'bg-gray-200 hover:bg-gray-400'
            } rounded-full transition-all duration-300`}
          >
            {i}
          </button>
        );
      }
    } else {
      buttons.push(
        <button
          key={1}
          onClick={() => paginate(1)}
          className={`px-4 py-2 mr-2 ${
            currentPage === 1 ? 'bg-[#2D5990] text-white' : 'bg-gray-200 hover:bg-gray-400'
          } rounded-full transition-all duration-300`}
        >
          1
        </button>
      );

      if (currentPage > 3) {
        buttons.push(<span key="ellipsis1" className="px-4 py-2 mr-2">...</span>);
      }

      if (currentPage > 2) {
        buttons.push(
          <button
            key={currentPage - 1}
            onClick={() => paginate(currentPage - 1)}
            className="px-4 py-2 mr-2 bg-gray-200 hover:bg-gray-400 rounded-full transition-all duration-300"
          >
            {currentPage - 1}
          </button>
        );
      }

      if (currentPage !== 1 && currentPage !== totalPages) {
        buttons.push(
          <button
            key={currentPage}
            onClick={() => paginate(currentPage)}
            className="px-4 py-2 mr-2 bg-[#2D5990] text-white rounded-full transition-all duration-300"
          >
            {currentPage}
          </button>
        );
      }

      if (currentPage < totalPages - 1) {
        buttons.push(
          <button
            key={currentPage + 1}
            onClick={() => paginate(currentPage + 1)}
            className="px-4 py-2 mr-2 bg-gray-200 hover:bg-gray-400 rounded-full transition-all duration-300"
          >
            {currentPage + 1}
          </button>
        );
      }

      if (currentPage < totalPages - 2) {
        buttons.push(<span key="ellipsis2" className="px-4 py-2 mr-2">...</span>);
      }

      buttons.push(
        <button
          key={totalPages}
          onClick={() => paginate(totalPages)}
          className={`px-4 py-2 mr-2 ${
            currentPage === totalPages ? 'bg-[#2D5990] text-white' : 'bg-gray-200 hover:bg-gray-400'
          } rounded-full transition-all duration-300`}
        >
          {totalPages}
        </button>
      );
    }

    return buttons;
  };

  if (isLoading) return <div>Loading...</div>;
  if (error) return <div>{error}</div>;

  return (
    <div>
      <Navbar />
      <div className="bg-gradient-to-br from-blue-100 to-blue-200 rounded-3xl m-1 md:mx-6 shadow-lg">
        <div className="px-4 py-6 md:px-32">
          <div className="relative flex flex-col md:flex-row items-center justify-between mb-1 md:mb-4 space-y-2 md:space-y-0">
            <div className="flex-none w-full md:w-auto">
              <input
                type="text"
                placeholder="Search..."
                value={searchQuery}
                onChange={handleSearch}
                className="w-full md:w-auto px-4 py-1 md:py-2 bg-white border border-gray-300 rounded-full text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-300"
              />
            </div>
  
            <div className="w-full md:absolute md:left-1/2 md:transform md:-translate-x-1/2 md:w-auto">
              <h2 className="text-md md:text-2xl font-bold text-center md:text-left text-[#2D5990]">UPDATE STUDENT</h2>
            </div>
  
            <div className="flex-none w-full md:w-auto">
              <div className="flex justify-center md:inline-flex md:text-base text-xs">{getPageButtons()}</div>
            </div>
          </div>
  
          <div className="overflow-x-auto">
            <table className="w-full table-auto bg-white border-collapse border border-gray-500">
              <thead className="bg-[#2D5990] text-white">
                <tr>
                  <th
                    className="px-2 py-2 text-center border-b border-gray-600 border-r cursor-pointer text-xs md:text-base"
                    onClick={() => handleSort('surName')}
                  >
                    Student Name {sortColumn === 'surName' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}
                  </th>
                  <th
                    className="px-2 py-2 text-center border-b border-gray-600 border-r cursor-pointer text-xs md:text-base"
                    onClick={() => handleSort('parentName')}
                  >
                    Parent Name {sortColumn === 'parentName' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}
                  </th>
                  <th
                    className="px-2 py-2 text-center border-b border-gray-600 border-r cursor-pointer text-xs md:text-base"
                    onClick={() => handleSort('applicationNumber')}
                  >
                    Application Number {sortColumn === 'applicationNumber' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}
                  </th>
                  <th
                    className="px-2 py-2 text-center border-b border-gray-600 border-r cursor-pointer text-xs md:text-base"
                    onClick={() => handleSort('batch')}
                  >
                    Batch {sortColumn === 'batch' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}
                  </th>
                  <th
                    className="px-2 py-2 text-center border-b border-gray-600 border-r cursor-pointer text-xs md:text-base"
                    onClick={() => handleSort('primaryContact')}
                  >
                    Primary Contact {sortColumn === 'primaryContact' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}
                  </th>
                  <th className="px-2 py-2 text-center border-b border-gray-600 cursor-pointer text-xs md:text-base">Upload Photo</th>
                </tr>
              </thead>
              <tbody>
                {currentStudents.map((student) => (
                  <tr
                    key={student._id}
                    className={`cursor-pointer ${
                      selectedRow === student._id ? 'bg-gray-700 text-white' : 'even:bg-gray-200 hover:bg-gray-400'
                    } transition-all duration-300`}
                    onClick={() => handleRowClick(student._id)}
                  >
                    <td className="px-2 py-1 md:py-2 border-b border-gray-600 border-r md:text-base text-xs">{student.surName} {student.firstName}</td>
                    <td className="px-2 py-1 md:py-2 border-b border-gray-600 border-r md:text-base text-xs">{student.parentName}</td>
                    <td className="px-2 py-1 md:py-2 border-b border-gray-600 border-r md:text-base text-xs">{student.applicationNumber}</td>
                    <td className="px-2 py-1 md:py-2 border-b border-gray-600 border-r md:text-base text-xs">{student.batch}</td>
                    <td className="px-2 py-1 md:py-2 border-b border-gray-600 border-r md:text-base text-xs">{student.primaryContact}</td>
                    <td className="px-2 py-1 md:py-2 border-b border-gray-600 text-center">
                      <button 
                        className="btn btn-sm text-white rounded-full transition-all duration-300 bg-[#00A0E3] hover:bg-[#2D5990] transform hover:scale-105"
                        onClick={() => handleUploadClick(student)}
                      >
                        Upload Photo
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
          <div className="mt-4">
            <div className="text-center">
              <div className="flex justify-center">{getPageButtons()}</div>
            </div>
          </div>
          {modalOpen && (
            <UploadModal
              student={currentStudent}
              closeModal={closeModal}
              isOpen={modalOpen}
            />
          )}
        </div>
      </div>
    </div>
  );
};

export default UpdateStudent;


 

========== FILE: frontend/src/components/UpcomingSessions.js ==========

import React, { useState } from 'react';
import Navbar from './Navbar';

// Dummy data for students
const students = [
  { id: 1, name: 'Alice Johnson', imageUrl: '/profileicon.jpeg' },
  { id: 2, name: 'Bob Smith', imageUrl: '/profileicon.jpeg' },
  { id: 3, name: 'Charlie Brown', imageUrl: '/profileicon.jpeg' },
  { id: 4, name: 'Diana Prince', imageUrl: '/profileicon.jpeg' },
  { id: 5, name: 'Edward King', imageUrl: '/profileicon.jpeg' },
  { id: 6, name: 'Fiona Shrek', imageUrl: '/profileicon.jpeg' },
  { id: 7, name: 'Alice Johnson', imageUrl: '/profileicon.jpeg' },
  { id: 8, name: 'Bob Smith', imageUrl: '/profileicon.jpeg' },
  { id: 9, name: 'Charlie Brown', imageUrl: '/profileicon.jpeg' },
  { id: 10, name: 'Diana Prince', imageUrl: '/profileicon.jpeg' },
  { id: 11, name: 'Edward King', imageUrl: '/profileicon.jpeg' },
  { id: 12, name: 'Fiona Shrek', imageUrl: '/profileicon.jpeg' },
  // Add more students as needed
];

const UpcomingSessions = () => {
  const [hoveredStudent, setHoveredStudent] = useState(null);

  const handleMouseEnter = (student) => {
    setHoveredStudent(student);
  };

  const handleMouseLeave = () => {
    setHoveredStudent(null);
  };

  return (
    <div>
      <Navbar />
      <div className="container py-8 px-4 sm:px-6 md:px-8 lg:px-10 xl:px-32 bg-gradient-to-br from-blue-100 to-blue-200 mx-auto my-6 rounded-3xl shadow-lg">
        <h1 className="text-3xl md:text-4xl lg:text-5xl font-bold mb-8 text-center text-[#2D5990] flex items-center justify-center">
          Upcoming Assessment Sessions
        </h1>
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6">
          {students.map(student => (
            <div
              key={student.id}
              className="bg-white rounded-xl shadow-xl overflow-hidden transition-all duration-300 transform hover:scale-105 hover:shadow-2xl"
              onMouseEnter={() => handleMouseEnter(student)}
              onMouseLeave={handleMouseLeave}
            >
              <div>
                <img
                  src={student.imageUrl}
                  alt={student.name}
                  className="w-full h-48 object-cover"
                />
              </div>
              <div className="p-4">
                <h2 className="text-lg md:text-xl font-bold text-[#2D5990] mb-1">{student.name}</h2>
                  <p className="text-sm md:text-base text-gray-600 bg-gray-100 rounded-lg p-2">
                    Next week, this student will be listed in the Pending sessions.
                  </p>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default UpcomingSessions;

 

========== FILE: frontend/src/components/UploadModal.js ==========

import React, { useRef } from 'react';

const UploadModal = ({ student, closeModal }) => {
    const fileInputRef = useRef(null);

    const handleFileUpload = () => {
        fileInputRef.current.click(); // Simulates click on hidden file input
    };

    const handleFileChange = async (event) => {
        const file = event.target.files[0];
        if (!file) return;
    
        // FormData to append the file to send it via HTTP
        const formData = new FormData();
        formData.append('file', file);
        formData.append('applicationNumber', student.applicationNumber);
    
        // Correct API endpoint where the server handles the file upload
        const uploadUrl = 'http://localhost:5000/upload-to-drive'; 
    
        try {
            const response = await fetch(uploadUrl, {
                method: 'POST',
                body: formData,
            });
    
            if (response.ok) {
                const result = await response.json();
                console.log('File uploaded successfully:', result);
                alert('File uploaded successfully!');
            } else {
                // Handling server errors or unsuccessful uploads
                throw new Error('Failed to upload file');
            }
        } catch (error) {
            console.error('Error uploading file:', error);
            alert('Error uploading file: ' + error.message);
        }
    };
    
    

    return (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center">
            <div className="bg-white p-8 rounded-3xl relative">
                <button onClick={closeModal} className="absolute top-3 right-3 text-lg text-gray-700 hover:text-red-700">
                    <span><strong>x</strong></span>
                </button>
                <h2 className="text-lg">Upload Photo for <strong>{student.surName} {student.firstName}</strong></h2>
                <div>
                    <p className='m-2'>Application Number: <strong>{student.applicationNumber}</strong></p>
                    <p className='m-2'>Parent Name: <strong>{student.parentName}</strong></p>
                    <p className='m-2'>Phone Number: <strong>{student.primaryContact}</strong></p>
                    <p className='m-2'>Batch: <strong>{student.batch}</strong></p>
                </div>
                <div className="mt-4">
                    <button
                        className="bg-[#00A0E3] text-white px-4 py-2 mr-2 hover:bg-[#008EC3] rounded-2xl"
                        onClick={() => {}}>
                        Open Camera
                    </button>
                    <button
                        className="bg-[#00A0E3] text-white px-4 py-2 hover:bg-[#008EC3] rounded-2xl"
                        onClick={handleFileUpload}>
                        Upload File
                    </button>
                    <input
                        ref={fileInputRef}
                        type="file"
                        style={{ display: 'none' }}
                        onChange={handleFileChange}
                    />
                </div>
                <button
                    className="mt-4 px-4 py-2 bg-red-500 text-white hover:bg-red-700 rounded-2xl"
                    onClick={closeModal}>
                    Close
                </button>
            </div>
        </div>
    );
};

export default UploadModal;


 

========== FILE: frontend/src/components/LoginPage.js ==========

import React, { useState, useEffect } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import Navbar from './Navbar';
import { useAuth } from '../components/AuthContext';

const LoginPage = () => {
    const navigate = useNavigate();
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [forgotPasswordEmail, setForgotPasswordEmail] = useState('');
    const [showForgotPasswordModal, setShowForgotPasswordModal] = useState(false);
    const { login } = useAuth();

    useEffect(() => {
        const timer = setTimeout(() => {
            // Implement logout due to inactivity logic if needed
        }, 900000); // 15 mins of inactivity

        return () => clearTimeout(timer);
    }, []);

    const handleLogin = async (e) => {
        e.preventDefault();
        try {
            const response = await fetch('http://localhost:5000/teachers/login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ email, password })
            });
            const data = await response.json();
            if (response.ok) {
                login(data.teacher.name, data.teacher.role, data.teacher.branch);
                alert("Logged in Successfully");
                navigate('/dashboard', { replace: true });
            } else {
                alert(data.message);
            }
        } catch (error) {
            console.error('Error during login:', error);
            alert('Error during login');
        }
    };

    const handleForgotPassword = async (e) => {
        e.preventDefault();
        try {
            const response = await fetch('http://localhost:5000/teachers/forgot-password', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ email: forgotPasswordEmail })
            });
            const data = await response.json();
            if (response.ok) {
                alert('Password reset link sent to your email');
                setShowForgotPasswordModal(false);
            } else {
                alert(data.message);
            }
        } catch (error) {
            console.error('Error during password reset request:', error);
            alert('Error during password reset request');
        }
    };

    return (
        <div>
            <Navbar />
            <div className="flex items-center justify-center min-h-screen bg-gray-200">
                <div className="bg-white shadow-lg rounded-lg">
                    <div className="flex flex-col items-center">
                        <div className="bg-[#2D5990] rounded-lg mb-4 w-80 h-32">
                            <img src="/9logo.jpg" alt="Nine Education Logo" className="rounded-xl p-4 mb-4 w-80 h-32" />
                        </div>
                        <form onSubmit={handleLogin} className='p-4'>
                            <div className="mb-4 w-60">
                                <label htmlFor="email" className="block text-lg font-medium text-gray-700">Email</label>
                                <input type="email" id="email" value={email} onChange={e => setEmail(e.target.value)} className="bg-gray-300 h-12 mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:bg-white focus:border-indigo-500 focus:ring-2 focus:ring-indigo-500 sm:text-lg" placeholder="example@gmail.com" />
                            </div>
                            <div className="mb-6 w-60">
                                <label htmlFor="password" className="block text-lg font-medium text-gray-700">Password</label>
                                <input type="password" id="password" value={password} onChange={e => setPassword(e.target.value)} className="bg-gray-300 h-12 mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:bg-white focus:border-indigo-500 focus:ring-2 focus:ring-indigo-500 sm:text-lg" />
                            </div>
                            <button type="submit" className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-[#00A0E3] hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                                Log in
                            </button>
                            <a href="#" onClick={() => setShowForgotPasswordModal(true)} className="mt-2 text-sm text-[#2D5990] hover:text-[#00A0E3]">Forgot password?</a>
                        </form>
                    </div>
                </div>
            </div>

            {showForgotPasswordModal && (
                <div className="fixed inset-0 flex items-center justify-center bg-gray-800 bg-opacity-75">
                    <div className="bg-white p-6 rounded-lg shadow-lg">
                        <h2 className="text-2xl font-bold mb-4">Forgot Password</h2>
                        <form onSubmit={handleForgotPassword}>
                            <div className="mb-4">
                                <label htmlFor="forgotPasswordEmail" className="block text-lg font-medium text-gray-700">Email</label>
                                <input type="email" id="forgotPasswordEmail" value={forgotPasswordEmail} onChange={e => setForgotPasswordEmail(e.target.value)} className="bg-gray-300 h-12 mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:bg-white focus:border-indigo-500 focus:ring-2 focus:ring-indigo-500 sm:text-lg" placeholder="example@gmail.com" />
                            </div>
                            <button type="submit" className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-[#00A0E3] hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                                Send Reset Link
                            </button>
                            <button type="button" onClick={() => setShowForgotPasswordModal(false)} className="w-full flex justify-center py-2 px-4 mt-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-gray-600 hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500">
                                Cancel
                            </button>
                        </form>
                    </div>
                </div>
            )}
        </div>
    );
};

export default LoginPage;


 

========== FILE: frontend/src/components/AddAttendance.js ==========

import React, { useState } from 'react';
import * as XLSX from 'xlsx';
import Navbar from './Navbar';

const AddAttendance = () => {
  const [message, setMessage] = useState('');
  const [payload, setPayload] = useState(null);

  const handleFileUpload = (e) => {
    const file = e.target.files[0];
    const reader = new FileReader();

    reader.onload = (event) => {
      const data = new Uint8Array(event.target.result);
      const workbook = XLSX.read(data, { type: 'array' });

      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];
      const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });

      const headers = jsonData[0];
      const requiredHeaders = ['Application Number', 'Student Name', 'FN/Total', 'AN/Total'];

      // Validate headers
      for (let header of requiredHeaders) {
        if (!headers.includes(header)) {
          alert('Excel file has missing fields, please check.');
          return;
        }
      }

      // Prepare the payload
      const dataPayload = jsonData.slice(1).map(row => ({
        applicationNumber: row[0],
        studentName: row[1],
        fnTotal: row[2],
        anTotal: row[3]
      }));

      console.log(dataPayload);
      setPayload(dataPayload);
      setMessage('File successfully processed and payload prepared.');
    };

    reader.readAsArrayBuffer(file);
  };

  return (
    <div className="add-attendance">
      <Navbar />
      <div className='container mx-auto px-4 bg-gray-400 rounded-3xl min-h-screen'>
        <h2 className="text-xl md:text-2xl font-bold m-2 mb-4 text-center">Add Attendance</h2>
        <div className="text-center my-2 text-xl">
          <p>Welcome! Please upload an Excel file to add attendance records.</p>
          <p>Ensure the Excel file follows the format below:</p>
          <table className='mx-auto border-collapse border border-gray-800 text-xs'>
            <thead>
              <tr className='bg-gray-200'>
                <th className='border border-gray-800 px-2 py-1'>Application Number</th>
                <th className='border border-gray-800 px-2 py-1'>Student Name</th>
                <th className='border border-gray-800 px-2 py-1'>FN/Total</th>
                <th className='border border-gray-800 px-2 py-1'>AN/Total</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td className='border border-gray-800 px-2 py-1'>KPL2024900001</td>
                <td className='border border-gray-800 px-2 py-1'>Ramesh</td>
                <td className='border border-gray-800 px-2 py-1'>5/6</td>
                <td className='border border-gray-800 px-2 py-1'>5/6</td>
              </tr>
              <tr className='bg-gray-100'>
                <td className='border border-gray-800 px-2 py-1'>KPL2024900002</td>
                <td className='border border-gray-800 px-2 py-1'>Suresh</td>
                <td className='border border-gray-800 px-2 py-1'>4/6</td>
                <td className='border border-gray-800 px-2 py-1'>3/6</td>
              </tr>
              <tr>
                <td className='border border-gray-800 px-2 py-1'>KPL2024900003</td>
                <td className='border border-gray-800 px-2 py-1'>Rahul</td>
                <td className='border border-gray-800 px-2 py-1'>5/6</td>
                <td className='border border-gray-800 px-2 py-1'>5/6</td>
              </tr>
              <tr className='bg-gray-100'>
                <td className='border border-gray-800 px-2 py-1'>KPL2024900004</td>
                <td className='border border-gray-800 px-2 py-1'>Shreya</td>
                <td className='border border-gray-800 px-2 py-1'>2/6</td>
                <td className='border border-gray-800 px-2 py-1'>2/6</td>
              </tr>
              <tr>
                <td className='border border-gray-800 px-2 py-1'>KPL2024900005</td>
                <td className='border border-gray-800 px-2 py-1'>Aryan</td>
                <td className='border border-gray-800 px-2 py-1'>4/6</td>
                <td className='border border-gray-800 px-2 py-1'>4/6</td>
              </tr>
              <tr className='bg-gray-100'>
                <td className='border border-gray-800 px-2 py-1'>KPL2024900006</td>
                <td className='border border-gray-800 px-2 py-1'>Vikram</td>
                <td className='border border-gray-800 px-2 py-1'>6/6</td>
                <td className='border border-gray-800 px-2 py-1'>3/6</td>
              </tr>
              <tr>
                <td className='border border-gray-800 px-2 py-1'>KPL2024900007</td>
                <td className='border border-gray-800 px-2 py-1'>Shastri</td>
                <td className='border border-gray-800 px-2 py-1'>6/6</td>
                <td className='border border-gray-800 px-2 py-1'>6/6</td>
              </tr>
            </tbody>
          </table>
        </div>
        <div className='text-center my-4'>
          <p className="mb-2 font-bold">Upload here:</p>
          <input 
            type="file" 
            accept=".xlsx, .xls" 
            onChange={handleFileUpload} 
            className="px-4 py-2 bg-[#00A0E3] text-white rounded cursor-pointer"
          />
        </div>
        {message && <p className="text-center mt-4 text-green-500">{message}</p>}
        {payload && <pre className="bg-gray-200 p-4 mt-4 rounded">{JSON.stringify(payload, null, 2)}</pre>}
      </div>
    </div>
  );
};

export default AddAttendance;


 

========== FILE: frontend/src/components/CompletedSessions.js ==========

import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import Navbar from './Navbar';

// Dummy data for students
const students = [
  { id: 1, name: 'Alice Johnson', imageUrl: '/profileicon.jpeg'},
  { id: 2, name: 'Bob Smith', imageUrl: '/profileicon.jpeg'},
  { id: 3, name: 'Charlie Brown', imageUrl: '/profileicon.jpeg'},
  { id: 4, name: 'Diana Prince', imageUrl: '/profileicon.jpeg'},
  { id: 5, name: 'Edward King', imageUrl: '/profileicon.jpeg'},
  { id: 6, name: 'Fiona Shrek', imageUrl: '/profileicon.jpeg'},
  { id: 7, name: 'George Washington', imageUrl: '/profileicon.jpeg'},
  { id: 8, name: 'Hannah Montana', imageUrl: '/profileicon.jpeg'},
  { id: 9, name: 'Ian Curtis', imageUrl: '/profileicon.jpeg'},
  { id: 10, name: 'Jessica Jones', imageUrl: '/profileicon.jpeg'},
  { id: 11, name: 'Kyle Reese', imageUrl: '/profileicon.jpeg'},
  { id: 12, name: 'Laura Palmer', imageUrl: '/profileicon.jpeg'},
  { id: 13, name: 'Michael Scott', imageUrl: '/profileicon.jpeg'},
  { id: 14, name: 'Nancy Drew', imageUrl: '/profileicon.jpeg'},
  { id: 15, name: 'Oliver Queen', imageUrl: '/profileicon.jpeg' }
  // Add more students as needed
];

const CompletedSessions = () => {
  const navigate = useNavigate();
  const [hoveredStudent, setHoveredStudent] = useState(null);

  const handleViewEdit = (name) => {
    navigate(`/assessment/${name}`);
  };

  const handleMouseEnter = (student) => {
    setHoveredStudent(student);
  };

  const handleMouseLeave = () => {
    setHoveredStudent(null);
  };

  return (
    <div>
      <Navbar />
      <div className="container py-8 px-4 sm:px-6 md:px-8 lg:px-10 xl:px-32 bg-gradient-to-br from-blue-100 to-blue-200 mx-auto my-6 rounded-3xl shadow-lg">
        <h1 className="text-3xl md:text-4xl lg:text-5xl font-bold mb-8 text-center text-[#2D5990] flex items-center justify-center">
          Completed Assessment Sessions
        </h1>
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6">
          {students.map(student => (
            <div
              key={student.id}
              className="bg-white rounded-xl shadow-xl overflow-hidden transition-all duration-300 transform hover:scale-105 hover:shadow-2xl"
              onMouseEnter={() => handleMouseEnter(student)}
              onMouseLeave={handleMouseLeave}
            >
              <div>
                <img
                  src={student.imageUrl}
                  alt={student.name}
                  className="w-full h-48 object-cover"
                />
              </div>
              <div className="p-4">
                <h2 className="text-lg md:text-xl font-bold text-[#2D5990] mb-1">{student.name}</h2> 
                <button
                  onClick={() => handleViewEdit(student.name)}
                  className="w-full bg-gradient-to-r from-[#2D5990] to-[#00A0E3] hover:from-[#00A0E3] hover:to-[#2D5990] text-white font-bold py-2 px-4 rounded-full focus:outline-none focus:shadow-outline transition-colors duration-300 transform hover:scale-105"
                >
                  View or Edit Assessment
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default CompletedSessions;

 

========== FILE: frontend/src/components/Navbar.js ==========

import React, { useState } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import '../Navbar.css';
import Confetti from 'react-confetti';

function Navbar() {
    const navigate = useNavigate();
    const location = useLocation();
    const [isMenuOpen, setIsMenuOpen] = useState(false);
    const [isAccordionOpen, setIsAccordionOpen] = useState(false);
    const [isProfileHovered, setIsProfileHovered] = useState(false);

    const handleLogout = () => {
        sessionStorage.clear();
        alert("Logged out successfully!");
        navigate('/login', { replace: true });
    };

    const isLoggedIn = sessionStorage.getItem('name') && sessionStorage.getItem('role');
    const name = sessionStorage.getItem('name');
    const role = sessionStorage.getItem('role');

    const navItems = [
        { name: 'Dashboard', path: '/dashboard', roles: ['admin', 'teacher', 'vice president', 'director'] },
        { name: 'Update Student', path: '/updateStudent', roles: ['admin', 'director'] },
        { name: 'Add User', path: '/addTeacher', roles: ['admin', 'director', 'vice president'] },
        { name: 'Sessions & Allotments', path: '/sessionsAndAllotments', roles: ['admin', 'director'] },
        { name: 'Pending Sessions', path: '/pendingSessions', roles: ['teacher'] },
        { name: 'Completed Sessions', path: '/completedSessions', roles: ['teacher'] },
        { name: 'Upcoming Sessions', path: '/upcomingSessions', roles: ['teacher'] },
        { name: 'View Feedbacks', path: '/viewFeedbacks', roles: ['admin', 'vice president', 'director'] },
    ];

    const filteredNavItems = navItems.filter(item => item.roles.includes(role));

    const toggleAccordion = () => {
        setIsAccordionOpen(!isAccordionOpen);
    };

    const handleProfileMouseEnter = () => {
        setIsProfileHovered(true);
    };

    const handleProfileMouseLeave = () => {
        setIsProfileHovered(false);
    };

    const [isLogoHovered, setIsLogoHovered] = useState(false);

    const handleLogoMouseEnter = () => {
        setIsLogoHovered(true);
    };

    const handleLogoMouseLeave = () => {
        setIsLogoHovered(false);
    };

    return (
        <div>
            <div className="bg-[#2D5990] text-white shadow-2xl rounded-b-xl flex items-center justify-between px-4 h-16 sm:h-20">
                <div className="flex-1 invisible sm:visible">
                    {isLoggedIn && <div className="w-8 h-8 sm:w-10 sm:h-10"></div>}
                </div>

                <div className="flex-1 flex justify-center relative">
                    <div
                        className="relative inline-block"
                        onMouseEnter={handleLogoMouseEnter}
                        onMouseLeave={handleLogoMouseLeave}
                    >
                        <img
                            src='/9logo.jpg'
                            alt="Nine Education IIT Academy"
                            className="h-8 md:h-16 transition-transform duration-300 transform hover:scale-105"
                        />
                        {isLogoHovered && (
                            <Confetti
                                width={250}
                                height={650}
                                numberOfPieces={300}
                                gravity={0.1}
                                recycle={false}
                                tweenDuration={1000}
                                className="absolute top-0 left-0"
                                colors={['#2D5990', '#00A0E3', '#FFFFFF']}
                            />
                        )}
                    </div>
                </div>

                <div className="flex-1 flex justify-end items-center">
                    {isLoggedIn ? (
                        <>
                            <div
                                className="relative"
                                onMouseEnter={handleProfileMouseEnter}
                                onMouseLeave={handleProfileMouseLeave}
                            >
                                <img
                                    src="/profileicon.jpeg"
                                    alt="Profile"
                                    className={`w-12 h-12 rounded-full mr-2 cursor-pointer transition-transform duration-300 transform ${isProfileHovered ? 'scale-110' : ''}`}
                                    onClick={toggleAccordion}
                                />
                                {isAccordionOpen && (
                                    <div className="absolute top-14 right-0 bg-white text-black rounded-lg shadow-xl p-4 w-48 z-50 text-xs md:text-sm">
                                        <p><strong>Name:</strong> {name}</p>
                                        <p><strong>Role:</strong> <span className='uppercase'>{role}</span></p>
                                        <button
                                            onClick={handleLogout}
                                            className="mt-4 rounded-full bg-[#2D5990] hover:bg-[#00A0E3] text-white font-medium py-2 px-4 transition-colors duration-300"
                                        >
                                            Logout
                                        </button>
                                    </div>
                                )}
                            </div>
                            <button
                                onClick={() => setIsMenuOpen(!isMenuOpen)}
                                className="ml-2 sm:hidden focus:outline-none"
                            >
                                <svg
                                    className={`w-6 h-6 fill-current transition-transform duration-300 transform ${isMenuOpen ? 'rotate-90' : ''}`}
                                    viewBox="0 0 24 24"
                                >
                                    {isMenuOpen ? (
                                        <path
                                            fillRule="evenodd"
                                            d="M18.278 16.864a1 1 0 0 1-1.414 1.414l-4.829-4.828-4.828 4.828a1 1 0 0 1-1.414-1.414l4.828-4.829-4.828-4.828a1 1 0 0 1 1.414-1.414l4.829 4.828 4.828-4.828a1 1 0 1 1 1.414 1.414l-4.828 4.829 4.828 4.828z"
                                        />
                                    ) : (
                                        <path
                                            fillRule="evenodd"
                                            d="M4 5h16a1 1 0 0 1 0 2H4a1 1 0 1 1 0-2zm0 6h16a1 1 0 0 1 0 2H4a1 1 0 1 1 0-2zm0 6h16a1 1 0 0 1 0 2H4a1 1 0 1 1 0-2z"
                                        />
                                    )}
                                </svg>
                            </button>
                        </>
                    ) : (
                        <div className="w-8 h-8 sm:w-10 sm:h-10 invisible"></div>
                    )}
                </div>
            </div>
            {isLoggedIn && (
                <div className={`${isMenuOpen ? 'block' : 'hidden'} sm:flex justify-center`}>
                    <div className="grid grid-cols-2 gap-4 p-4 sm:flex sm:space-x-4">
                        {filteredNavItems.map((item, index) => (
                            <button
                                key={index}
                                onClick={() => {
                                    navigate(item.path);
                                    setIsMenuOpen(false);
                                }}
                                className={`px-4 py-2 text-white font-bold rounded-full transition-colors duration-300 ${location.pathname === item.path ? 'bg-[#2D5990] hover:bg-[#2D5990] active-button' : 'bg-[#00A0E3] hover:bg-[#2D5990]'}`}
                            >
                                {item.name}
                            </button>
                        ))}
                    </div>
                </div>
            )}
        </div>
    );
}

export default Navbar;

 

========== FILE: frontend/src/components/PendingSessions.js ==========

import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import Navbar from './Navbar';

// Dummy data for students
const students = [
  { id: 1, name: 'Alice Johnson', imageUrl: '/profileicon.jpeg'},
  { id: 2, name: 'Bob Smith', imageUrl: '/profileicon.jpeg'},
  { id: 3, name: 'Charlie Brown', imageUrl: '/profileicon.jpeg'},
  { id: 4, name: 'Diana Prince', imageUrl: '/profileicon.jpeg'},
  { id: 5, name: 'Edward King', imageUrl: '/profileicon.jpeg'},
  { id: 6, name: 'Fiona Shrek', imageUrl: '/profileicon.jpeg'},
  { id: 7, name: 'George Washington', imageUrl: '/profileicon.jpeg'},
  { id: 8, name: 'Hannah Montana', imageUrl: '/profileicon.jpeg'},
  { id: 9, name: 'Ian Curtis', imageUrl: '/profileicon.jpeg'},
  { id: 10, name: 'Jessica Jones', imageUrl: '/profileicon.jpeg'},
  { id: 11, name: 'Kyle Reese', imageUrl: '/profileicon.jpeg'},
  { id: 12, name: 'Laura Palmer', imageUrl: '/profileicon.jpeg'},
  { id: 13, name: 'Michael Scott', imageUrl: '/profileicon.jpeg'},
  { id: 14, name: 'Nancy Drew', imageUrl: '/profileicon.jpeg'},
  { id: 15, name: 'Oliver Queen', imageUrl: '/profileicon.jpeg' }
  // Add more students as needed
];

const PendingSessions = () => {
  const navigate = useNavigate();
  const [hoveredStudent, setHoveredStudent] = useState(null);

  const handleAssessNow = (name) => {
    navigate(`/assessment/${name}`);
  };

  const handleMouseEnter = (student) => {
    setHoveredStudent(student);
  };

  const handleMouseLeave = () => {
    setHoveredStudent(null);
  };

  return (
    <div>
      <Navbar />
      <div className="container py-8 px-4 sm:px-6 md:px-8 lg:px-10 xl:px-32 bg-gradient-to-br from-blue-100 to-blue-200 mx-auto my-6 rounded-3xl shadow-lg">
        <h1 className="text-3xl md:text-4xl lg:text-5xl font-bold mb-8 text-center text-[#2D5990] flex items-center justify-center">
          Pending Assessment Sessions
        </h1>
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6">
          {students.map(student => (
            <div
              key={student.id}
              className="bg-white rounded-xl shadow-xl overflow-hidden transition-all duration-300 transform hover:scale-105 hover:shadow-2xl"
              onMouseEnter={() => handleMouseEnter(student)}
              onMouseLeave={handleMouseLeave}
            >
              <div>
                <img
                  src={student.imageUrl}
                  alt={student.name}
                  className="w-full h-48 object-cover"
                />
              </div>
              <div className="p-4">
                <h2 className="text-lg md:text-xl font-bold text-[#2D5990] mb-1">{student.name}</h2>
                <button
                  onClick={() => handleAssessNow(student.name)}
                  className="w-full bg-gradient-to-r from-[#2D5990] to-[#00A0E3] hover:from-[#00A0E3] hover:to-[#2D5990] text-white font-bold py-2 px-4 rounded-full focus:outline-none focus:shadow-outline transition-colors duration-300 transform hover:scale-105"
                >
                  Assess Now
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default PendingSessions;

 

========== FILE: frontend/src/components/ViewFeedbacks.js ==========

import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import Navbar from './Navbar';

function Modal({ children, onClose }) {
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center">
      <div className="bg-white p-4 rounded max-h-screen overflow-auto">
        {children}
        <button onClick={onClose} className="mt-4 p-2 bg-[#00A0E3] text-white rounded">Close</button>
      </div>
    </div>
  );
}

function ViewFeedbacks() {
  const [students, setStudents] = useState([]);
  const [searchText, setSearchText] = useState('');
  const [editFeedback, setEditFeedback] = useState(null);
  const [editText, setEditText] = useState('');
  const [selectedFeedbacks, setSelectedFeedbacks] = useState([]);
  const [viewingDateFeedback, setViewingDateFeedback] = useState(null);
  const [selectedStudentName, setSelectedStudentName] = useState('');
  const [addingFeedback, setAddingFeedback] = useState(false);
  const [newFeedback, setNewFeedback] = useState('');
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const navigate = useNavigate();

  const fetchStudents = useCallback(async () => {
    setIsLoading(true);
    const role = sessionStorage.getItem('role');
    const userBranch = sessionStorage.getItem('branch');

    try {
        const response = await fetch('http://localhost:5000/students');
        const data = await response.json();

        // Filter students based on branch for specific roles
        let filteredStudents = data;
        if (role === 'director' || role === 'teacher' || role === 'vice president') {
            filteredStudents = data.filter(student => student.branch === userBranch);
        }

        setStudents(filteredStudents);

        if (!response.ok) {
            throw new Error(data.error || 'An error occurred while fetching data');
        }
    } catch (error) {
        setError('Error fetching students: ' + error.message);
    } finally {
        setIsLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchStudents();
  }, [fetchStudents]);

  const handleSearch = (event) => {
    const value = event.target.value.toLowerCase();
    const filteredData = students.filter(item =>
      `${item.firstName} ${item.surName}`.toLowerCase().includes(value) ||
      item.parentName.toLowerCase().includes(value) ||
      item.applicationNumber.toString().includes(value) ||
      item.branch.toLowerCase().includes(value)
    );
    setSearchText(value);
    setStudents(filteredData);
  };

  const handleEditChange = (event) => {
    setEditText(event.target.value);
  };

  const handleNewFeedbackChange = (event) => {
    setNewFeedback(event.target.value);
  };

// Update feedback by feedbackId
const saveEdit = async () => {
  if (!editFeedback || !editFeedback.feedbackId) {
    setError('Feedback ID is missing.');
    return;
  }

  const updatedFeedback = {
    feedback: editText,
    reviewer: sessionStorage.getItem('name') // Assume the reviewer might be updated as well
  };

  try {
    const response = await fetch(`http://localhost:5000/feedbacks/${editFeedback.feedbackId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(updatedFeedback)
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error || 'Failed to update feedback');
    }

    // setEditFeedback(null); // Reset after successful update
    // setViewingDateFeedback(null);
    // fetchFeedbacks(); // Refresh data
    window.location.reload();
  } catch (error) {
    setError('Error updating feedback: ' + error.message);
  }
};

  
  
  


const fetchFeedbacks = async (applicationNumber) => {
  try {
    const response = await fetch(`http://localhost:5000/feedbacks/${applicationNumber}`);
    const data = await response.json();

    if (response.ok) {
      if (data.length === 0) { // Assuming 'data' is an array
        alert("No Feedbacks given for this Student");
      }
      return data;
    } else {
      throw new Error(data.error || 'An error occurred while fetching feedback data');
    }
  } catch (error) {
    setError('Error fetching feedbacks: ' + error.message);
    return [];
  }
};

  

  const toggleFeedbackView = async (applicationNumber) => {
    const student = students.find(item => item.applicationNumber === applicationNumber);
    if (student) {
      const feedbacks = await fetchFeedbacks(applicationNumber);
      setSelectedFeedbacks(feedbacks);
      setSelectedStudentName(`${student.firstName} ${student.surName}`);
      setViewingDateFeedback(null);
      setEditFeedback(student); // Set the student being edited
    } else {
      setError('Student not found for the provided application number.');
    }
  };
  
  

  const viewFeedbackByDate = (feedback) => {
    const student = students.find(item => item.applicationNumber === feedback.applicationNumber);
    if (student) {
      setViewingDateFeedback(feedback); // This contains all feedback details, including feedbackId
      setEditText(feedback.feedback);
      setEditFeedback(feedback); // Now, editFeedback contains the entire feedback object, including feedbackId
    } else {
      setError('Student not found for the provided application number.');
    }
  };
  
  
  

  const addFeedback = (applicationNumber) => {
    const student = students.find(item => item.applicationNumber === applicationNumber);
    if (student) {
      setSelectedStudentName(`${student.firstName} ${student.surName}`);
      setAddingFeedback(true);
    } else {
      console.error('Student not found for the provided application number:', applicationNumber);
    }
  };
  
// Submit new feedback
const submitNewFeedback = async () => {
  if (!newFeedback) {
    alert("Feedback cannot be empty");
    return;
  }

  const student = students.find(item => `${item.firstName} ${item.surName}` === selectedStudentName);
  const applicationNumber = student?.applicationNumber;
  const name = sessionStorage.getItem('name'); // Ensure this is retrieved correctly

  if (!applicationNumber) {
    console.error('Application number not found for student:', selectedStudentName);
    return;
  }

  const payload = {
    studentName: selectedStudentName,
    feedback: newFeedback,
    date: new Date().toISOString(), // current date and time
    applicationNumber: applicationNumber,
    reviewer: name
  };

  try {
    const response = await fetch('http://localhost:5000/feedbacks', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(payload)
    });

    if (!response.ok) {
      throw new Error('Failed to submit feedback');
    }
    await fetchAndSendEmail(student.branch);

    fetchFeedbacks(); // Refresh the students list to include new feedback
    setAddingFeedback(false);
    setNewFeedback('');
  } catch (error) {
    console.error('Error:', error);
  }
};

// Fetch director's Gmail and send an email
const fetchAndSendEmail = async (branch) => {
    try {
        const gmailResponse = await fetch(`http://localhost:5000/teachers/director-gmail/${branch}`);
        const { gmail } = await gmailResponse.json();

        if (gmailResponse.ok) {
            // Send an email notification to the director's Gmail
            // await fetch('http://localhost:5000/send-email', {
            //     method: 'POST',
            //     headers: {
            //         'Content-Type': 'application/json'
            //     },
            //     body: JSON.stringify({
            //         to: gmail,
            //         subject: 'New Feedback Submitted',
            //         body: `A new feedback has been submitted by for student ${selectedStudentName}.`
            //     })
            // });
            console.log('Email sending triggered: ',{gmail});
        } else {
            throw new Error('Failed to fetch director’s Gmail');
        }
    } catch (error) {
        console.error('Error sending email:', error);
    }
};

  
  
  

  const addAssessment = (applicationNumber) => {
    const student = students.find(item => item.applicationNumber === applicationNumber);
    if (student) {
      const studentName = `${student.firstName} ${student.surName}`;
      navigate(`/eca/${applicationNumber}/${studentName}`);
    } else {
      console.error('Student not found for the provided application number:', applicationNumber);
    }
  };
  

  if (isLoading) return <div>Loading...</div>;
  if (error) return <div>{error}</div>;

  const role = sessionStorage.getItem('role');

  return (
    <div className='bg-white min-h-screen'>
      <Navbar />
      <div className="bg-gray-400 rounded-3xl mx-2 md:mx-6 px-4 md:px-32 py-6">
        <div className="relative flex flex-col items-center justify-between mb-4 space-y-4">
          <h2 className="text-xl md:text-2xl font-bold text-center">View Feedbacks</h2>
          <input
            type="text"
            placeholder="Search..."
            value={searchText}
            onChange={handleSearch}
            className="w-full md:w-auto px-4 py-2 bg-white border border-gray-300 rounded-md text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>

        <div className="space-y-4 text-xs md:text-sm">
          <div className={`grid ${role === 'vice president' ? 'grid-cols-7' : 'grid-cols-5'} gap-4 items-center bg-gray-100 p-3 rounded shadow text-xxs md:text-lg`}>
            <div className="hidden md:flex justify-center">Profile</div>
            <div className="flex justify-center">Student Name</div>
            <div className="flex justify-center">Parent Name</div>
            <div className="flex justify-center">Application No.</div>
            <div className="flex justify-center">View Feedback</div>
            {(role === 'vice president') && (
              <>
                <div className="flex justify-center">Add Feedback</div>
                <div className="flex justify-center">Add & View Assessments</div>
              </>
            )}
          </div>
          {students.map(item => (
            <div key={item.applicationNumber} className={`grid ${role === 'vice president' ? 'grid-cols-7' : 'grid-cols-5'} gap-6 items-center bg-gray-100 p-3 rounded shadow text-xxs md:text-lg`}>
              <div className="hidden md:flex justify-center">
                <img src={"/profileicon.jpeg"} alt="Profile" className="w-12 h-12 rounded-full flex items-center justify-center" />
              </div>
              <div className="flex justify-center">{`${item.firstName} ${item.surName}`}</div>
              <div className="flex justify-center">{item.parentName}</div>
              <div className="flex justify-center">{item.applicationNumber}</div>
              <div className="flex justify-center">
                <button onClick={() => toggleFeedbackView(item.applicationNumber)} className="text-blue-500 hover:text-blue-700">
                  <img src={selectedFeedbacks.length > 0 ? "/open.jpg" : "/close.jpg"} alt="View" className="h-4 w-4 md:w-8 md:h-6" />
                </button>
              </div>
              {(role === 'vice president') && (
                <>
                  <div className="flex justify-center">
                    <button
                      onClick={() => addFeedback(item.applicationNumber)}
                      className="text-blue-500 hover:text-blue-700"
                    >
                      <img src={'/plus.jpg'} alt="Add" className="h-3 w-3 md:h-6 md:w-6" />
                    </button>
                  </div>
                  <div className="flex justify-center">
                    <button
                      onClick={() => addAssessment(item.applicationNumber)}
                      className="text-blue-500 hover:text-blue-700"
                    >
                      <img src={'/edit.jpeg'} alt="Edit" className="h-4 w-6 md:h-6 md:w-8" />
                    </button>
                  </div>
                </>
              )}
            </div>
          ))}
        </div>

        {selectedFeedbacks.length > 0 && !viewingDateFeedback && (
          <Modal onClose={() => setSelectedFeedbacks([])}>
            <div>
              <h3 className="text-lg font-bold mb-4">{selectedStudentName}</h3>
              <div className="max-h-60 overflow-y-auto">
                {selectedFeedbacks.map(fb => (
                  <div key={fb.date} className="flex justify-between items-center mb-2 p-2 border-b items-center bg-gray-100 rounded shadow text-xs md:text-lg">
                    <span className='mr-2'>Dated:</span>
                    <button onClick={() => viewFeedbackByDate(fb)} className="text-blue-500 hover:text-blue-700 flex justify-center">
                      {new Date(fb.date).toLocaleDateString()} {/* Format the date */}
                    </button>
                  </div>
                ))}
              </div>
            </div>
          </Modal>
        )}


        {viewingDateFeedback && (
          <Modal onClose={() => {
            setViewingDateFeedback(null);
            setEditFeedback(null);
          }}>
            <textarea value={editText} onChange={handleEditChange} className="w-full p-2 border rounded bg-gray-200" />
            <button onClick={saveEdit} className="mt-4 p-2 bg-[#2D5990] text-white rounded mr-4">Save Changes</button>
          </Modal>
        )}

        {addingFeedback && (
          <Modal onClose={() => setAddingFeedback(false)}>
            <div>
              <h3 className="text-lg font-bold mb-4">{selectedStudentName}</h3>
              <textarea
                value={newFeedback}
                onChange={handleNewFeedbackChange}
                className="w-full p-2 border rounded bg-gray-200 mb-4"
                placeholder="Enter feedback here..."
              />
              <button onClick={submitNewFeedback} className="mt-4 p-2 bg-[#2D5990] text-white rounded mr-4">Submit</button>
            </div>
          </Modal>
        )}
      </div>
    </div>
  );
}

export default ViewFeedbacks;


 

========== FILE: frontend/src/components/AuthContext.js ==========

import React, { createContext, useContext, useState, useEffect } from 'react';

const AuthContext = createContext(null);

export const AuthProvider = ({ children }) => {
    const [user, setUser] = useState(() => {
        // Attempt to get user data from sessionStorage when the component mounts
        const savedUser = sessionStorage.getItem('name');
        const savedRole = sessionStorage.getItem('role');
        const savedBranch = sessionStorage.getItem('branch');
        if (savedUser && savedRole && savedBranch) {
            return { name: savedUser, role: savedRole, branch: savedBranch };
        }
        return null;
    });

    const login = (name, role, branch) => {
        setUser({ name, role });
        sessionStorage.setItem('name', name);
        sessionStorage.setItem('role', role);
        sessionStorage.setItem('branch', branch);
    };

    const logout = () => {
        setUser(null);
        sessionStorage.clear();
        window.location.reload();
    };

    // Optionally, to handle changes in sessionStorage across tabs:
    useEffect(() => {
        const handleStorageChange = () => {
            const savedUser = sessionStorage.getItem('name');
            const savedRole = sessionStorage.getItem('role');
            const savedBranch = sessionStorage.getItem('branch');
            if (savedUser && savedRole) {
                setUser({ name: savedUser, role: savedRole, branch: savedBranch });
            } else {
                setUser(null);
            }
        };

        window.addEventListener('storage', handleStorageChange);

        return () => {
            window.removeEventListener('storage', handleStorageChange);
        };
    }, []);

    return (
        <AuthContext.Provider value={{ user, login, logout }}>
            {children}
        </AuthContext.Provider>
    );
};

export const useAuth = () => useContext(AuthContext);


 

========== FILE: frontend/src/components/StudentAssessment.js ==========

import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';

const modules = [
  {
    title: 'Classroom Behavior',
    questions: [
      'How disciplined is the student during class?',
      'How active is the student in class participation?',
      'How punctual is the student in completing homework?',
      'How attentive is the student during class?',
      'How well does the student respond during class?',
      'How well does the student maintain notes for your subject?',
    ],
  },
  {
    title: 'Study Hour Behavior',
    extraItem: 'Please consider the following when evaluating the student\'s study hour behavior:',
    questions: [
      'How frequently does the student approach you with questions?',
      'How efficient is the student in completing work during sessions?',
      'How focused is the student during study hours?',
      'How often does the student disturb others in the name of discussions during study hours?',
    ],
  },
  {
    title: 'Examination Behavior',
    extraItem: 'Please consider the following when evaluating the student\'s examination behavior:',
    questions: [
      'How disciplined/attentive is the student during exams?',
      'How enthusiastic is the student about clearing doubts after exams?',
      'How focused and determined is the student in finishing exams till the end?',
    ],
  },
];

// Dummy function to check if assessment already exists for a student
const checkIfAssessmentExists = (name) => {
  // Replace this with actual API call logic
  return name === 'Alice Johnson'; // Example: return true for Alice Johnson
};

const StudentAssessment = () => {
  const { name } = useParams();
  const [responses, setResponses] = useState(modules.map(module => module.questions.map(() => null)));
  const [assessmentExists, setAssessmentExists] = useState(false);

  useEffect(() => {
    const exists = checkIfAssessmentExists(name);
    setAssessmentExists(exists);
  }, [name]);

  const handleOptionChange = (moduleIndex, questionIndex, value) => {
    const newResponses = [...responses];
    newResponses[moduleIndex][questionIndex] = value;
    setResponses(newResponses);
  };

  const isAllAnswered = () => {
    return responses.every(module => module.every(response => response !== null));
  };

  const handleSubmit = () => {
    if (assessmentExists) {
      alert('Assessment has already been submitted.');
      return;
    }

    if (isAllAnswered()) {
      const payload = modules.map((module, moduleIndex) => ({
        module: module.title,
        responses: module.questions.map((question, questionIndex) => ({
          question,
          answer: responses[moduleIndex][questionIndex],
        })),
      }));
      alert('Assessment Submitted');
      console.log(payload);
      window.location.href = '/dashboard';
    } else {
      alert('Please answer all the questions in all modules.');
    }
  };

  const getGradientColor = (value) => {
    const hue = (value - 1) * 12; // Scale value from 1-10 to 0-240 for hue (red to green)
    return `hsl(${hue}, 100%, 50%)`;
  };

  return (
    <div className="bg-gray-100 min-h-screen py-8">
      <div className="max-w-3xl mx-auto bg-white shadow-lg rounded-lg p-8">
        <h1 className="text-3xl font-bold mb-8 text-center">
          Providing assessment for <span className="text-[#00A0E3]">{name}</span>
        </h1>
        {assessmentExists && (
          <div className="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 mb-8" role="alert">
            <p className="font-bold">Assessment Completed</p>
            <p>
              Assessment for {name} is Completed and Saved. This is the View & Edit page. Please make sure to submit
              after making changes!
            </p>
          </div>
        )}
        {modules.map((module, moduleIndex) => (
          <div key={moduleIndex} className="mb-12">
            <h2 className="text-2xl font-bold mb-4">{module.title}</h2>
            {module.extraItem && <p className="text-gray-600 mb-4">{module.extraItem}</p>}
            {module.questions.map((question, questionIndex) => (
              <div key={questionIndex} className="mb-8">
                <p className="text-lg font-semibold mb-4">{question}</p>
                <div className="flex justify-between bg-gray-100 rounded-lg p-4">
                  {[...Array(10).keys()].map(i => (
                    <label
                      key={i}
                      className={`px-4 py-2 rounded-lg cursor-pointer transition-colors duration-200 ${
                        responses[moduleIndex][questionIndex] === i + 1
                          ? 'text-white shadow-lg transform scale-110'
                          : 'bg-white text-gray-700 hover:bg-gray-200'
                      }`}
                      style={{
                        backgroundColor: responses[moduleIndex][questionIndex] === i + 1 ? getGradientColor(i + 1) : '',
                      }}
                    >
                      <input
                        type="radio"
                        className="sr-only"
                        name={`module-${moduleIndex}-question-${questionIndex}`}
                        value={i + 1}
                        checked={responses[moduleIndex][questionIndex] === i + 1}
                        onChange={() => handleOptionChange(moduleIndex, questionIndex, i + 1)}
                      />
                      {i + 1}
                    </label>
                  ))}
                </div>
              </div>
            ))}
          </div>
        ))}
        <button
          onClick={handleSubmit}
          className="w-full bg-[#2D5990] text-white rounded hover:bg-[#00A0E3] font-bold py-2 px-4 transition-colors duration-200"
        >
          Submit
        </button>
      </div>
    </div>
  );
};

export default StudentAssessment;

 

========== FILE: frontend/src/components/ForgotPasswordPage.js ==========

import React, { useState } from 'react';

const ForgotPasswordPage = () => {
    const [email, setEmail] = useState('');

    const handleForgotPassword = async (e) => {
        e.preventDefault();
        try {
            const response = await fetch('http://localhost:5000/teachers/forgot-password', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ email })
            });
            const data = await response.json();
            if (response.ok) {
                alert('Password reset link sent to your email');
            } else {
                alert(data.message);
            }
        } catch (error) {
            console.error('Error during password reset request:', error);
            alert('Error during password reset request');
        }
    };

    return (
        <div className="flex items-center justify-center min-h-screen bg-gray-200">
            <div className="bg-white shadow-lg rounded-lg p-6">
                <h2 className="text-2xl font-bold mb-4">Forgot Password</h2>
                <form onSubmit={handleForgotPassword}>
                    <div className="mb-4">
                        <label htmlFor="email" className="block text-lg font-medium text-gray-700">Email</label>
                        <input type="email" id="email" value={email} onChange={e => setEmail(e.target.value)} className="bg-gray-300 h-12 mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:bg-white focus:border-indigo-500 focus:ring-2 focus:ring-indigo-500 sm:text-lg" />
                    </div>
                    <button type="submit" className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-[#00A0E3] hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        Send Reset Link
                    </button>
                </form>
            </div>
        </div>
    );
};

export default ForgotPasswordPage;


 

========== FILE: frontend/src/components/AddTeachers.js ==========

import React, { useState, useEffect } from 'react';
import Navbar from './Navbar';

const AddTeachers = () => {
    const [form, setForm] = useState({
        name: '',
        email: '',
        gmail: '',
        password: '',
        phoneNumber: '',
        branch: '',
        teacherID: '',
        role: '',
        subject: '' // New subject state field
    });

    const [teachers, setTeachers] = useState([]);
    const [selectedRow, setSelectedRow] = useState(null);
    const [branches, setBranches] = useState([]);
    const [selectedTeacher, setSelectedTeacher] = useState(null);

    const role = sessionStorage.getItem('role');
    const userBranch = sessionStorage.getItem('branch');

    const mpcSubjects = ['Mathematics', 'Physics', 'Chemistry'];

    useEffect(() => {
        const fetchBranches = async () => {
            const response = await fetch('http://localhost:5000/branches');
            const data = await response.json();
            setBranches(data);
        };

        fetchBranches();
    }, []);

    useEffect(() => {
        const fetchTeachers = async () => {
            const response = await fetch('http://localhost:5000/teachers');
            const data = await response.json();
            const role = sessionStorage.getItem('role');
            const userBranch = sessionStorage.getItem('branch');

            let branchFilteredTeachers = role === 'admin' ? data : data.filter(teacher => teacher.branch === userBranch);

            let roleFilteredTeachers = [];
            switch (role) {
                case 'admin':
                    roleFilteredTeachers = branchFilteredTeachers;
                    break;
                case 'director':
                    roleFilteredTeachers = branchFilteredTeachers.filter(teacher => teacher.role !== 'admin');
                    break;
                case 'vice president':
                    roleFilteredTeachers = branchFilteredTeachers.filter(teacher =>
                        teacher.role === 'teacher' || teacher.role === 'receptionist' || teacher.role === 'vice president'
                    );
                    break;
                default:
                    roleFilteredTeachers = branchFilteredTeachers;
                    break;
            }

            setTeachers(roleFilteredTeachers);
        };

        fetchTeachers();
    }, [role, userBranch]);

    const handleChange = (e) => {
        if (e.target.name === 'phoneNumber') {
            const value = e.target.value.replace(/\D/g, '');
            if (value.length <= 10) {
                setForm({
                    ...form,
                    [e.target.name]: value
                });
            }
        } else {
            setForm({
                ...form,
                [e.target.name]: e.target.value
            });
        }
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        const formData = { ...form };

        if (role !== 'admin') {
            formData.branch = userBranch;
        }

        if (form.role === 'teacher' && !form.subject) {
            alert('Subject is required for teachers');
            return;
        }

        try {
            const response = await fetch('http://localhost:5000/teachers', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            });
            const newTeacher = await response.json();
            if (response.ok) {
                window.location.reload();
                setForm({ name: '', email: '', gmail: '', password: '', phoneNumber: '', branch: '', teacherID: '', role: '', subject: '' });
                alert('User added successfully!');
            } else {
                throw new Error(newTeacher.error || 'Failed to add teacher');
            }
        } catch (error) {
            alert(error.message);
        }
    };

    const handleRowClick = (teacher) => {
        setSelectedTeacher(teacher);
        setForm({
            name: teacher.name,
            email: teacher.email,
            gmail: teacher.gmail,
            password: '',
            phoneNumber: teacher.phoneNumber,
            branch: teacher.branch,
            teacherID: teacher.teacherID,
            role: teacher.role,
            subject: teacher.subject
        });
    };

    const getAvailableRoles = () => {
        switch (role) {
            case 'admin':
                return ['admin', 'director', 'vice president', 'teacher', 'receptionist'];
            case 'director':
                return ['vice president', 'teacher', 'receptionist'];
            case 'vice president':
                return ['teacher', 'receptionist'];
            default:
                return [];
        }
    };

    return (
        <div>
            <Navbar />
            <div className="flex flex-col items-center justify-center mt-4 md:mt-8 p-2">
                <div className="w-full md:w-2/4 bg-gradient-to-br from-blue-100 to-blue-200 p-4 md:p-6 rounded-3xl shadow-lg mx-2">
                    <h2 className="text-xl md:text-2xl font-bold mb-2 md:mb-4 text-center text-[#2D5990]">ADD USER</h2>
                    <form onSubmit={handleSubmit}>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-2 md:gap-4">
                            <input
                                type="text"
                                name="name"
                                placeholder="Name"
                                value={form.name}
                                onChange={handleChange}
                                className="input input-bordered w-full bg-white my-1 md:my-2 rounded-xl text-xs md:text-sm focus:ring-2 focus:ring-blue-500"
                            />
                            <input
                                type="email"
                                name="email"
                                placeholder="Email"
                                value={form.email}
                                onChange={handleChange}
                                className="input input-bordered w-full bg-white my-1 md:my-2 rounded-xl text-xs md:text-sm focus:ring-2 focus:ring-blue-500"
                            />
                            <input
                                type="password"
                                name="password"
                                placeholder="Password"
                                value={form.password}
                                onChange={handleChange}
                                className="input input-bordered w-full bg-white my-1 md:my-2 rounded-xl text-xs md:text-sm focus:ring-2 focus:ring-blue-500"
                            />
                            <input
                                type="text"
                                name="phoneNumber"
                                placeholder="Phone Number"
                                value={form.phoneNumber}
                                onChange={handleChange}
                                className="input input-bordered w-full bg-white my-1 md:my-2 rounded-xl text-xs md:text-sm focus:ring-2 focus:ring-blue-500"
                            />
                            <input
                                type="email"
                                name="gmail"
                                placeholder="Gmail"
                                value={form.gmail}
                                onChange={handleChange}
                                className="input input-bordered w-full bg-white my-1 md:my-2 rounded-xl text-xs md:text-sm focus:ring-2 focus:ring-blue-500"
                            />

                            <select
                                name="role"
                                value={form.role}
                                onChange={handleChange}
                                className="input input-bordered w-full bg-white text-black my-1 md:my-2 rounded-xl text-xs md:text-sm focus:ring-2 focus:ring-blue-500"
                            >
                                <option value="">Select Role</option>
                                {getAvailableRoles().map((roleOption) => (
                                    <option key={roleOption} value={roleOption}>
                                        {roleOption.charAt(0).toUpperCase() + roleOption.slice(1)}
                                    </option>
                                ))}
                            </select>
                            {role === 'admin' ? (
                                <select
                                    name="branch"
                                    value={form.branch}
                                    onChange={handleChange}
                                    className="input input-bordered w-full bg-white text-black my-1 md:my-2 rounded-xl text-xs md:text-sm focus:ring-2 focus:ring-blue-500"
                                >
                                    <option value="">Select Branch</option>
                                    {branches.map((branch) => (
                                        <option key={branch._id} value={branch.name}>
                                            {branch.branchCode}
                                        </option>
                                    ))}
                                </select>
                            ) : (
                                <input
                                    type="hidden"
                                    name="branch"
                                    value={userBranch}
                                />
                            )}
                            <input
                                type="text"
                                name="teacherID"
                                placeholder="User ID"
                                value={form.teacherID}
                                onChange={handleChange}
                                className="input input-bordered w-full bg-white my-1 md:my-2 rounded-xl text-xs md:text-sm focus:ring-2 focus:ring-blue-500"
                            />
                            {form.role === 'teacher' && (
                                <select
                                    name="subject"
                                    value={form.subject}
                                    onChange={handleChange}
                                    className="input input-bordered w-full bg-white text-black my-1 md:my-2 rounded-xl text-xs md:text-sm focus:ring-2 focus:ring-blue-500"
                                >
                                    <option value="">Select Subject</option>
                                    {mpcSubjects.map((subject) => (
                                        <option key={subject} value={subject}>
                                            {subject}
                                        </option>
                                    ))}
                                </select>
                            )}
                        </div>
                        <button type="submit" className="btn btn-primary mt-4 w-full md:w-auto bg-[#2D5990] hover:bg-[#00A0E3] text-white font-bold py-2 px-4 rounded-full transition-all duration-300 transform hover:scale-105">
                            Add User
                        </button>
                    </form>
                </div>

                <div className="w-full md:w-3/4 mt-4 md:mt-8 bg-white rounded-3xl shadow-lg p-4 md:p-6">
                    <h2 className="text-xl md:text-2xl font-bold mb-2 text-center text-[#2D5990]">Users List</h2>
                    <div className="overflow-x-auto">
                        <table className="w-full table-auto bg-white border-collapse border border-gray-500 mx-2 mb-4 rounded-lg shadow">
                            <thead className="bg-[#2D5990] text-white">
                                <tr>
                                    <th className="px-2 md:px-4 py-2 text-center border-b border-gray-600 border-r text-sm md:text-base">Teacher ID</th>
                                    <th className="px-2 md:px-4 py-2 text-center border-b border-gray-600 border-r text-sm md:text-base">Name</th>
                                    <th className="px-2 md:px-4 py-2 text-center border-b border-gray-600 border-r text-sm md:text-base">Role</th>
                                    <th className="px-2 md:px-4 py-2 text-center border-b border-gray-600 border-r text-sm md:text-base">Email</th>
                                    <th className="px-2 md:px-4 py-2 text-center border-b border-gray-600 border-r text-sm md:text-base">Phone Number</th>
                                    <th className="px-2 md:px-4 py-2 text-center border-b border-gray-600 border-r text-sm md:text-base">Branch</th>
                                    <th className="px-2 md:px-4 py-2 text-center border-b border-gray-600 text-sm md:text-base">Subject</th>
                                    {/* <th className="px-2 md:px-4 py-2 text-center border-b border-gray-600 text-sm md:text-base">Actions</th> */}
                                </tr>
                            </thead>
                            <tbody>
                                {teachers.map((teacher) => (
                                    <tr
                                        key={teacher._id}
                                        className={`cursor-pointer ${
                                            selectedRow === teacher._id ? 'bg-[#00A0E3] text-white' : 'even:bg-gray-200 hover:bg-gray-400'
                                        } transition-all duration-300`}
                                        onClick={() => handleRowClick(teacher)}
                                    >
                                        <td className="px-2 md:px-4 py-1 md:py-2 border-b border-gray-600 border-r text-sm md:text-base">{teacher.teacherID}</td>
                                        <td className="px-2 md:px-4 py-1 md:py-2 border-b border-gray-600 border-r text-sm md:text-base">{teacher.name}</td>
                                        <td className="px-2 md:px-4 py-1 md:py-2 border-b border-gray-600 border-r text-sm md:text-base">{teacher.role}</td>
                                        <td className="px-2 md:px-4 py-1 md:py-2 border-b border-gray-600 border-r text-sm md:text-base">{teacher.email}</td>
                                        <td className="px-2 md:px-4 py-1 md:py-2 border-b border-gray-600 border-r text-sm md:text-base">{teacher.phoneNumber}</td>
                                        <td className="px-2 md:px-4 py-1 md:py-2 border-b border-gray-600 border-r text-sm md:text-base">{teacher.branch}</td>
                                        <td className="px-2 md:px-4 py-1 md:py-2 border-b border-gray-600 text-sm md:text-base">{teacher.subject || 'N/A'}</td>
                                        {/* <td className="px-2 md:px-4 py-1 md:py-2 border-b border-gray-600 text-sm md:text-base">
                                            <button className="bg-[#2D5990] text-white px-2 py-1 rounded-md" onClick={() => handleRowClick(teacher)}>
                                                Edit
                                            </button>
                                        </td> */}
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default AddTeachers;


 

========== FILE: frontend/src/components/StudentECA.js ==========

import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';

const StudentECA = () => {
  const { studentName, applicationNumber } = useParams(); // Including applicationNumber from params
  const [communicationRating, setCommunicationRating] = useState(null);
  const [participationRatings, setParticipationRatings] = useState({
    indoorSports: null,
    outdoorSports: null,
    music: null,
    artLiterature: null,
    leadershipTeamwork: null,
    debatesActivities: null,
  });
  const [parentFeedback, setParentFeedback] = useState('');
  const [formValid, setFormValid] = useState(false);
  const [ecas, setEcas] = useState([]);
  const [editMode, setEditMode] = useState(false);
  const [currentEditingId, setCurrentEditingId] = useState(null);
  const navigate = useNavigate();

  useEffect(() => {
    // Fetch ECA entries when the component mounts
    fetch(`http://localhost:5000/eca/${studentName}`)
      .then(response => response.json())
      .then(data => setEcas(data))
      .catch(error => console.error('Error:', error));
  }, [studentName]);

  const handleRatingChange = (event, category) => {
    const value = parseInt(event.target.value, 10);
    if (category) {
      setParticipationRatings(prevRatings => ({ ...prevRatings, [category]: value }));
    } else {
      setCommunicationRating(value);
    }
    validateForm();
  };

  const handleFeedbackChange = (event) => {
    setParentFeedback(event.target.value);
    validateForm();
  };

  const validateForm = () => {
    const allFilled = communicationRating !== null &&
      Object.values(participationRatings).every(rating => rating !== null) &&
      parentFeedback.trim() !== '';
    setFormValid(allFilled);
  };

  const handleSubmit = (event) => {
    event.preventDefault();
    const payload = {
      studentName,
      applicationNumber,
      communicationRating,
      participationRatings,
      parentFeedback,
      date: new Date().toISOString(),
    };

    const url = editMode ? `http://localhost:5000/eca/${currentEditingId}` : 'http://localhost:5000/eca';
    const method = editMode ? 'PATCH' : 'POST';

    fetch(url, {
      method: method,
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload),
    })
      .then(response => response.json())
      .then(data => {
        console.log(data);
        setEcas(editMode ? ecas.map(eca => eca.uuid === currentEditingId ? data : eca) : [...ecas, data]);
        navigate('/viewFeedbacks');
      })
      .catch(error => console.error('Error:', error));
    resetForm();
  };


  const handleEdit = (eca) => {
    setEditMode(true);
    setCurrentEditingId(eca.uuid);
    setCommunicationRating(eca.communicationRating);
    setParticipationRatings(eca.participationRatings);
    setParentFeedback(eca.parentFeedback);
    validateForm();
  };

  const resetForm = () => {
    setCommunicationRating(null);
    setParticipationRatings({
      indoorSports: null,
      outdoorSports: null,
      music: null,
      artLiterature: null,
      leadershipTeamwork: null,
      debatesActivities: null,
    });
    setParentFeedback('');
    setFormValid(false);
    setEditMode(false);
    setCurrentEditingId(null);
  };


  const getGradientColor = (value) => {
    const hue = (value - 1) * 12; // Scale value from 1-10 to 0-240 for hue (red to green)
    return `hsl(${hue}, 100%, 50%)`;
  };

  const [expandedId, setExpandedId] = useState(null); // To track which ECA entry is expanded

  const toggleExpand = (id) => {
    if (expandedId === id) {
      setExpandedId(null); // Collapse if it's already expanded
    } else {
      setExpandedId(id); // Expand the clicked entry
    }
  };

  return (
    <div className="bg-gray-100 min-h-screen py-8">
      <div className="max-w-3xl mx-auto bg-white shadow-lg rounded-lg p-8">

        {/* ECA Entries List */}
        <div className="mt-2">
          <h2 className="text-xl font-bold mb-4">Past ECA Entries:</h2>
          {ecas.map((eca, index) => (
            <div key={index} className="mb-4">
              <div
                className="p-4 bg-white rounded-lg shadow cursor-pointer"
                onClick={() => toggleExpand(index)} // Toggle expand/collapse on click
              >
                <p>Date: {new Date(eca.date).toLocaleDateString()}</p>
                {expandedId === index && (
                  <div>
                    <p>Communication Rating: {eca.communicationRating}</p>
                    <p>Parent Feedback: {eca.parentFeedback}</p>
                    <div>
                      <h4 className="font-bold">Participation Ratings:</h4>
                      {Object.entries(eca.participationRatings).map(([key, value]) => (
                        <p key={key}>{`${key}: ${value}`}</p>
                      ))}
                    </div>
                    <div className="flex justify-around mt-4">
                      <button onClick={() => setExpandedId(null)} className="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-700">
                        Close
                      </button>
                      <button onClick={() => handleEdit(eca)} className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-700">
                        Edit
                      </button>
                    </div>
                  </div>
                )}
              </div>
            </div>
          ))}

          </div>

        <h1 className="text-3xl font-bold mb-8 text-center">
          Providing ECA feedback for <span className="text-blue-600">{studentName}</span>
        </h1>
        <form onSubmit={handleSubmit} className="space-y-8">
          <div>
            <p className="text-lg font-semibold mb-4">
              How well does the student communicate off-topic in and outside the class during activities, debates, quizzes, sports days, etc.?
            </p>
            <div className="flex justify-between bg-gray-100 rounded-lg p-4">
              {[...Array(10)].map((_, index) => (
                <label
                  key={index}
                  className={`px-4 py-2 rounded-lg cursor-pointer transition-colors duration-200 ${
                    communicationRating === index + 1
                      ? 'text-white shadow-lg transform scale-110'
                      : 'bg-white text-gray-700 hover:bg-gray-200'
                  }`}
                  style={{
                    backgroundColor: communicationRating === index + 1 ? getGradientColor(index + 1) : '',
                  }}
                >
                  <input
                    type="radio"
                    className="sr-only"
                    name="communicationRating"
                    value={index + 1}
                    checked={communicationRating === index + 1}
                    onChange={handleRatingChange}
                  />
                  {index + 1}
                </label>
              ))}
            </div>
          </div>

          <div>
            <p className="text-lg font-semibold mb-4">Rate the student's participation in the following areas:</p>
            {Object.keys(participationRatings).map((category, index) => (
              <div key={index} className="mb-8">
                <p className="text-lg font-semibold mb-4 capitalize">{category.replace(/([A-Z])/g, ' $1').toLowerCase()}:</p>
                <div className="flex justify-between bg-gray-100 rounded-lg p-4">
                  {[...Array(10)].map((_, index) => (
                    <label
                      key={index}
                      className={`px-4 py-2 rounded-lg cursor-pointer transition-colors duration-200 ${
                        participationRatings[category] === index + 1
                          ? 'text-white shadow-lg transform scale-110'
                          : 'bg-white text-gray-700 hover:bg-gray-200'
                      }`}
                      style={{
                        backgroundColor: participationRatings[category] === index + 1 ? getGradientColor(index + 1) : '',
                      }}
                    >
                      <input
                        type="radio"
                        className="sr-only"
                        name={category}
                        value={index + 1}
                        checked={participationRatings[category] === index + 1}
                        onChange={(e) => handleRatingChange(e, category)}
                      />
                      {index + 1}
                    </label>
                  ))}
                </div>
              </div>
            ))}
          </div>

          <div>
            <label htmlFor="parentFeedback" className="block text-lg font-semibold mb-2">Parent Feedback:</label>
            <textarea
              id="parentFeedback"
              value={parentFeedback}
              onChange={handleFeedbackChange}
              maxLength="50"
              className="w-full p-2 border rounded bg-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Enter verdict after speaking with parents..."
            />
          </div>

          <button
            type="submit"
            disabled={!formValid}
            className="w-full bg-[#2D5990] text-white rounded hover:bg-[#00A0E3] font-bold py-2 px-4 transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Submit
          </button>
        </form>
      </div>
    </div>
  );
};

export default StudentECA;


 

========== FILE: frontend/src/components/Dashboard.js ==========

import React, { useState, useEffect } from 'react';
import Navbar from './Navbar';
import profileImage from '../assets/profile.jpg';

const Dashboard = () => {
  const [students, setStudents] = useState([]);
  const [selectedRow, setSelectedRow] = useState(null);
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [studentsPerPage] = useState(50);
  const [searchQuery, setSearchQuery] = useState('');
  const [sortColumn, setSortColumn] = useState(null);
  const [sortDirection, setSortDirection] = useState('asc');
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [modalImageSrc, setModalImageSrc] = useState('');

  useEffect(() => {
    fetchStudents();
  }, []);

  const handleRowClick = (id) => {
    if (selectedRow === id) {
      setSelectedRow(null);
    } else {
      setSelectedRow(id);
    }
  };

  const fetchStudents = async () => {
    setIsLoading(true);
    const role = sessionStorage.getItem('role');
    const userBranch = sessionStorage.getItem('branch');

    try {
        const response = await fetch('http://localhost:5000/students');
        const data = await response.json();
        
        // Filter students based on branch for specific roles
        if (role === 'director' || role === 'teacher' || role === 'vice president') {
            const filteredStudents = data.filter(student => student.branch === userBranch);
            setStudents(filteredStudents);
        } else {
            setStudents(data);
        }
        
        if (!response.ok) {
            throw new Error(data.error || 'An error occurred while fetching data');
        }
    } catch (error) {
        setError('Error fetching students: ' + error.message);
    } finally {
        setIsLoading(false);
    }
  };

  // Search functionality
  const handleSearch = (event) => {
    setSearchQuery(event.target.value);
    setCurrentPage(1);
  };

  const filteredStudents = students.filter((student) => {
    const searchTerms = searchQuery.toLowerCase().split(',').map((term) => term.trim());
    const studentValues = Object.values(student).map((value) => value.toString().toLowerCase());

    return searchTerms.every((term) => studentValues.some((value) => value.includes(term)));
  });

  // Sorting functionality
  const handleSort = (column) => {
    if (sortColumn === column) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortColumn(column);
      setSortDirection('asc');
    }
  };

  const sortedStudents = filteredStudents.sort((a, b) => {
    if (sortColumn) {
      const valueA = a[sortColumn].toString().toLowerCase();
      const valueB = b[sortColumn].toString().toLowerCase();

      if (valueA < valueB) {
        return sortDirection === 'asc' ? -1 : 1;
      }
      if (valueA > valueB) {
        return sortDirection === 'asc' ? 1 : -1;
      }
    }
    return 0;
  });

  // Pagination logic
  const indexOfLastStudent = currentPage * studentsPerPage;
  const indexOfFirstStudent = indexOfLastStudent - studentsPerPage;
  const currentStudents = sortedStudents.slice(indexOfFirstStudent, indexOfLastStudent);

  const paginate = (pageNumber) => setCurrentPage(pageNumber);

  const totalPages = Math.ceil(sortedStudents.length / studentsPerPage);

  const getPageButtons = () => {
    const buttons = [];

    if (totalPages <= 5) {
      for (let i = 1; i <= totalPages; i++) {
        buttons.push(
          <button
            key={i}
            onClick={() => paginate(i)}
            className={`px-4 py-2 mr-2 ${
              currentPage === i ? 'bg-[#2D5990] text-white' : 'bg-gray-200 hover:bg-gray-400'
            } rounded-full transition-all duration-300`}
          >
            {i}
          </button>
        );
      }
    } else {
      buttons.push(
        <button
          key={1}
          onClick={() => paginate(1)}
          className={`px-4 py-2 mr-2 ${
            currentPage === 1 ? 'bg-[#2D5990] text-white' : 'bg-gray-200 hover:bg-gray-400'
          } rounded-full transition-all duration-300`}
        >
          1
        </button>
      );

      if (currentPage > 3) {
        buttons.push(<span key="ellipsis1" className="px-4 py-2 mr-2">...</span>);
      }

      if (currentPage > 2) {
        buttons.push(
          <button
            key={currentPage - 1}
            onClick={() => paginate(currentPage - 1)}
            className="px-4 py-2 mr-2 bg-gray-200 hover:bg-gray-400 rounded-full transition-all duration-300"
          >
            {currentPage - 1}
          </button>
        );
      }

      if (currentPage !== 1 && currentPage !== totalPages) {
        buttons.push(
          <button
            key={currentPage}
            onClick={() => paginate(currentPage)}
            className="px-4 py-2 mr-2 bg-[#2D5990] text-white rounded-full transition-all duration-300"
          >
            {currentPage}
          </button>
        );
      }

      if (currentPage < totalPages - 1) {
        buttons.push(
          <button
            key={currentPage + 1}
            onClick={() => paginate(currentPage + 1)}
            className="px-4 py-2 mr-2 bg-gray-200 hover:bg-gray-400 rounded-full transition-all duration-300"
          >
            {currentPage + 1}
          </button>
        );
      }

      if (currentPage < totalPages - 2) {
        buttons.push(<span key="ellipsis2" className="px-4 py-2 mr-2">...</span>);
      }

      buttons.push(
        <button
          key={totalPages}
          onClick={() => paginate(totalPages)}
          className={`px-4 py-2 mr-2 ${
            currentPage === totalPages ? 'bg-[#2D5990] text-white' : 'bg-gray-200 hover:bg-gray-400'
          } rounded-full transition-all duration-300`}
        >
          {totalPages}
        </button>
      );
    }

    return buttons;
  };

  if (isLoading) return <div>Loading...</div>;
  if (error) return <div>{error}</div>;

  const role = sessionStorage.getItem('role');

  const handleImageClick = (src) => {
    setModalImageSrc(src);
    setIsModalOpen(true);
  };

  const closeModal = () => {
    setIsModalOpen(false);
  };

  return (
    <div>
      <Navbar />
      <div className="bg-gradient-to-br from-blue-100 to-blue-200 rounded-3xl m-1 md:mx-6 shadow-lg">
        <div className="px-4 py-6 md:px-32">
          <div className="relative flex flex-col md:flex-row items-center justify-between mb-1 md:mb-4 space-y-2 md:space-y-0">
            <div className="flex-none w-full md:w-auto">
              <input
                type="text"
                placeholder="Search..."
                value={searchQuery}
                onChange={handleSearch}
                className="w-full md:w-auto px-4 py-1 md:py-2 bg-white border border-gray-300 rounded-full text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-300"
              />
            </div>
  
            <div className="w-full md:absolute md:left-1/2 md:transform md:-translate-x-1/2 md:w-auto">
              <h2 className="text-md md:text-2xl font-bold text-center md:text-left text-[#2D5990]">STUDENT DASHBOARD</h2>
            </div>
  
            <div className="flex-none w-full md:w-auto">
              <div className="flex justify-center md:inline-flex md:text-base text-xs">{getPageButtons()}</div>
            </div>
          </div>
  
          <div className="overflow-x-auto">
            <table className="w-full table-auto bg-white border-collapse border border-gray-500">
              <thead className="bg-[#2D5990] text-white">
                <tr>
                  <th
                    className="px-2 py-3 text-center border-b border-gray-600 border-r cursor-pointer text-xs md:text-base " 
                  >
                    Photo
                  </th>
                  <th
                    className="px-2 py-3 text-center border-b border-gray-600 border-r cursor-pointer text-xs md:text-base "
                    onClick={() => handleSort('surName')}
                  >
                    Student Name {sortColumn === 'surName' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}
                  </th>
                  <th
                    className="px-2 py-2 text-center border-b border-gray-600 border-r cursor-pointer text-xs md:text-base"
                    onClick={() => handleSort('parentName')}
                  >
                    Parent Name {sortColumn === 'parentName' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}
                  </th>
                  <th
                    className="px-2 py-2 text-center border-b border-gray-600 border-r cursor-pointer text-xs md:text-base"
                    onClick={() => handleSort('applicationNumber')}
                  >
                    Application Number {sortColumn === 'applicationNumber' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}
                  </th>
                  <th
                    className="px-2 py-2 text-center border-b border-gray-600 border-r cursor-pointer text-xs md:text-base"
                    onClick={() => handleSort('batch')}
                  >
                    Batch {sortColumn === 'batch' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}
                  </th>
                  <th
                    className="px-2 py-2 text-center border-b border-gray-600 border-r cursor-pointer text-xs md:text-base"
                    onClick={() => handleSort('primaryContact')}
                  >
                    Primary Contact {sortColumn === 'primaryContact' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}
                  </th>
                  {role !== 'teacher' && (
                    <th className="px-2 py-2 text-center border-b border-gray-600 border-r cursor-pointer text-xs md:text-base">
                      Generate Report
                    </th>
                  )}
                </tr>
              </thead>
              <tbody>
                {currentStudents.map((student) => (
                  <tr
                    key={student._id}
                    className={`cursor-pointer ${
                      selectedRow === student._id ? 'bg-[#00A0E3] text-white' : 'even:bg-gray-200 hover:bg-gray-400'
                    } transition-all duration-300`}
                    onClick={() => handleRowClick(student._id)}
                  >
                    <td className="px-2 py-1 md:py-2 border-b border-gray-600 border-r md:text-base text-xs">
                      <div className="flex items-center justify-center">
                        <img
                          src={profileImage}
                          alt="Profile"
                          className="w-8 h-8 md:w-12 md:h-12 rounded-full transition-transform duration-300 transform hover:scale-110 cursor-pointer"
                          onClick={() => handleImageClick(profileImage)}
                        />
                      </div>
                    </td>
                    <td className="px-2 py-1 md:py-2 border-b border-gray-600 border-r md:text-base text-xs">{student.surName} {student.firstName}</td>
                    <td className="px-2 py-1 md:py-2 border-b border-gray-600 border-r md:text-base text-xs">{student.parentName}</td>
                    <td className="px-2 py-1 md:py-2 border-b border-gray-600 border-r md:text-base text-xs">{student.applicationNumber}</td>
                    <td className="px-2 py-1 md:py-2 border-b border-gray-600 border-r md:text-base text-xs">{student.batch}</td>
                    <td className="px-2 py-1 md:py-2 border-b border-gray-600 border-r md:text-base text-xs">{student.primaryContact}</td>
                    {role !== 'teacher' && (
                      <td className="px-2 py-1 md:py-2 border-b border-gray-600 text-center">
                        <button className="btn btn-sm text-white rounded-full transition-all duration-300 bg-[#00A0E3] hover:bg-[#2D5990] transform hover:scale-105">
                          Generate Report
                        </button>
                      </td>
                    )}
                  </tr>
                ))}
              </tbody>

            </table>
          </div>
          <div className="mt-4">
            <div className="text-center">
              <div className="flex justify-center">{getPageButtons()}</div>
            </div>
          </div>
        </div>
      </div>
      {isModalOpen && (
        <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-75">
          <div className="bg-white p-4 rounded-lg shadow-lg w-96 ">
            <img src={modalImageSrc} alt="Enlarged Profile" className="max-w-full h-auto rounded-lg" />
            <button
              onClick={closeModal}
              className="mt-4 px-4 py-2 bg-[#2D5990] text-white rounded-full transition-all duration-300 hover:bg-[#00A0E3]"
            >
              Close
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default Dashboard;


 

========== FILE: frontend/src/components/SessionsAndAllotments.js ==========

import React, { useState, useEffect } from 'react';
import axios from 'axios';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import Navbar from './Navbar';

const Tooltip = ({ tooltipText }) => {
  return (
    <div className="relative inline-block">
      <div className="absolute bottom-0 left-0 hidden group-hover:block w-48 p-2 text-sm text-white bg-[#2D5990] rounded-md shadow-lg z-10">
        {tooltipText}
      </div>
    </div>
  );
};

const SessionAndAllotments = () => {
  const [sessions, setSessions] = useState([]);
  const [transformedData, setTransformedData] = useState({});
  const [startDate, setStartDate] = useState(new Date());
  const [selectedBranch, setSelectedBranch] = useState('All');

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await axios.get('http://localhost:5000/sessions');
        setSessions(response.data);
      } catch (error) {
        console.error('Error fetching session data', error);
      }
    };

    fetchData();
  }, []);

  useEffect(() => {
    if (sessions.length > 0) {
      filterDataByDate(sessions, startDate);
    }
  }, [sessions, startDate]);

  const filterDataByDate = (data, date) => {
    const filteredData = data.filter((session) => {
      const sessionDate = new Date(session.startDate);
      return sessionDate >= date;
    });

    const groupedData = {};
    const branches = {};

    filteredData.forEach((session) => {
      const { period, subject, status, clusterID } = session;
      const branch = clusterID.substring(2, 5);

      if (!branches[branch]) {
        branches[branch] = [];
      }

      if (!groupedData[branch]) {
        groupedData[branch] = {};
      }

      if (!groupedData[branch][period] && branches[branch].length < 8) {
        groupedData[branch][period] = {
          period,
          Mathematics: { status: 'N/A', clusterID: '' },
          Physics: { status: 'N/A', clusterID: '' },
          Chemistry: { status: 'N/A', clusterID: '' },
        };
        branches[branch].push(period);
      }

      if (groupedData[branch][period]) {
        groupedData[branch][period][subject] = { status, clusterID };
      }
    });

    setTransformedData(groupedData);
  };

  const handleBranchChange = (event) => {
    setSelectedBranch(event.target.value);
  };

  const renderTable = (branch) => {
    return (
      <div key={branch} className="mb-12">
        <h2 className="text-3xl font-semibold my-6 text-[#2D5990]">Branch: {branch}</h2>
        <table className="min-w-full bg-white shadow-lg rounded-lg overflow-hidden">
          <thead>
            <tr className="bg-gradient-to-r from-[#2D5990] to-[#00A0E3] text-white">
              <th className="py-4 px-6 border-b">Period</th>
              <th className="py-4 px-6 border-b">Mathematics</th>
              <th className="py-4 px-6 border-b">Physics</th>
              <th className="py-4 px-6 border-b">Chemistry</th>
            </tr>
          </thead>
          <tbody>
            {Object.values(transformedData[branch]).slice(0, 8).map((row, index) => (
              <tr key={index} className="group hover:bg-[#F0F8FF] transition duration-300">
                <td className="py-4 px-6 border-b text-center">{row.period}</td>
                <td className="py-4 px-6 border-b text-center relative">
                  {row.Mathematics.status}
                  <Tooltip tooltipText={row.Mathematics.clusterID} />
                </td>
                <td className="py-4 px-6 border-b text-center relative">
                  {row.Physics.status}
                  <Tooltip tooltipText={row.Physics.clusterID} />
                </td>
                <td className="py-4 px-6 border-b text-center relative">
                  {row.Chemistry.status}
                  <Tooltip tooltipText={row.Chemistry.clusterID} />
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    );
  };

  return (
    <div className="container mx-auto px-4">
      <Navbar />
      <h1 className="text-4xl font-bold my-8 text-center text-[#2D5990]">Sessions and Allotments</h1>
      <div className="my-6 flex justify-center items-center">
        <label className="mr-4 text-xl font-medium text-[#2D5990]">Select Start Date:</label>
        <DatePicker
          selected={startDate}
          onChange={(date) => setStartDate(date)}
          className="border-2 border-[#00A0E3] bg-white rounded-lg p-3 focus:outline-none focus:ring-2 focus:ring-[#00A0E3]"
        />
        <label className="ml-8 mr-4 text-xl font-medium text-[#2D5990]">Select Branch:</label>
        <select
          value={selectedBranch}
          onChange={handleBranchChange}
          className="border-2 border-[#00A0E3] bg-white rounded-lg p-3 focus:outline-none focus:ring-2 focus:ring-[#00A0E3]"
        >
          <option value="All">All</option>
          {Object.keys(transformedData).map((branch) => (
            <option key={branch} value={branch}>
              {branch}
            </option>
          ))}
        </select>
      </div>
      <div className="overflow-x-auto">
        {selectedBranch === 'All'
          ? Object.keys(transformedData).map((branch) => renderTable(branch))
          : renderTable(selectedBranch)}
      </div>
    </div>
  );
};

export default SessionAndAllotments;


========== FILE: frontend/public/index.html ==========

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>


 

========== FILE: frontend/public/manifest.json ==========

{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}


 



 

========== FILE: server/app.js ==========

const express = require('express');
const app = express();
const mongoose = require('mongoose');
const cors = require('cors');
const bodyParser = require('body-parser');
require('dotenv').config({ path: '../.env' });

console.log(process.env.MONGODB_URI);

const teacherRouter = require('./routes/teachers.js');
const studentRouter = require('./routes/students.js');
const clusterRouter = require('./routes/clusters.js');
const sessionRouter = require('./routes/sessions.js');
const feedbackRouter = require('./routes/feedbacks.js');
const assessmentRouter = require('./routes/assessments.js');
const ecaRouter = require('./routes/ecas.js');
const receptionistRouter = require('./routes/receptionist.js'); // New receptionist routes
const branchRouter = require('./routes/branches.js');
const driveRouter = require('./routes/drive.js');

const port = process.env.PORT || 5000;

mongoose.connect(process.env.MONGODB_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true
})
.then(() => console.log('Connected to MongoDB'))
.catch(error => console.error('Could not connect to MongoDB', error));

app.use(cors());
app.use(bodyParser.json());
app.use(express.json());

// Use the routers
app.use('/teachers', teacherRouter);
app.use('/students', studentRouter);
app.use('/clusters', clusterRouter);
app.use('/sessions', sessionRouter);
app.use('/feedbacks', feedbackRouter);
app.use('/assessments', assessmentRouter);
app.use('/eca', ecaRouter);
app.use('/receptionist', receptionistRouter); // New route for receptionist actions
app.use('/branches', branchRouter); 
app.use('/', driveRouter);

console.log('Server started');

app.listen(port, () => {
    console.log(`Server is listening on port ${port}`);
});

 

========== FILE: server/routes/receptionist.js ==========

const express = require('express');
const router = express.Router();
const Student = require('../models/Student');
const multer = require('multer');
const upload = multer(); // Use multer to handle file uploads
const XLSX = require('xlsx');

router.post('/attendance', upload.single('file'), async (req, res) => {
    try {
        if (!req.file) {
            return res.status(400).json({ message: 'No file uploaded.' });
        }

        const workbook = XLSX.read(req.file.buffer, { type: 'buffer' });
        const sheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[sheetName];
        const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });

        const headers = jsonData[0];
        const requiredHeaders = ['Application Number', 'Student Name', 'FN/Total', 'AN/Total'];

        // Validate headers
        for (let header of requiredHeaders) {
            if (!headers.includes(header)) {
                return res.status(400).json({ message: 'Excel file has missing fields, please check.' });
            }
        }

        const attendanceData = jsonData.slice(1).map(row => {
            const [applicationNumber, studentName, fnTotal, anTotal] = row;
            const fnGrade = calculateGrade(fnTotal);
            const anGrade = calculateGrade(anTotal);
            return { applicationNumber, studentName, fnTotal, anTotal, fnGrade, anGrade };
        });

        // Update attendance for each student in the database
        for (const data of attendanceData) {
            const student = await Student.findOne({ applicationNumber: data.applicationNumber });
            if (student) {
                // Assuming you want to store attendance in a specific format
                // You might need to adjust this logic based on your needs
                student.attendance[currentSessionPeriod] = {
                    fn: data.fnTotal,
                    an: data.anTotal,
                    fnGrade: data.fnGrade, // Store calculated grades
                    anGrade: data.anGrade
                };
                await student.save();
            }
        }

        res.json({ message: 'Attendance updated successfully' });
    } catch (error) {
        console.error('Error processing attendance:', error);
        res.status(500).json({ message: 'Failed to process attendance' });
    }
});

// Helper function to calculate grade (you'll need to define the logic)
function calculateGrade(attendance) {
    // Implement your grade calculation logic here
    // For example:
    const [present, total] = attendance.split('/');
    const percentage = (present / total) * 100;
    if (percentage >= 90) return 'A';
    // ... other conditions ...
    else return 'F';
}

// Helper function to get the current session period (you'll need to implement this)
function currentSessionPeriod() {
    // Logic to get the current session period based on date
}

module.exports = router;


 

========== FILE: server/routes/branches.js ==========

const express = require('express');
const router = express.Router();
const Branch = require('../models/Branch'); // Import the Branch model
const MongoClient = require('mongodb').MongoClient;

// GET route to list all branches
router.get('/', async (req, res) => {
    try {
        // Create a MongoDB client
        const uri = process.env.MONGO_URI_ERP;
        const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });

        // Connect to the MongoDB database
        await client.connect();
        console.log('Connected to MongoDB');

        // Access the "branches" collection
        const collection = client.db().collection('branches');

        // Fetch all branches from the database
        const branchesCollection = client.db().collection('branches');
        const branches = await branchesCollection.find().toArray();
        res.status(200).json(branches);
    
    } catch (error) {
        console.error('Error fetching branches:', error);
        res.status(500).json({ message: 'Error fetching branches', error: error.message });
    }
});

module.exports = router;


 

========== FILE: server/routes/assessments.js ==========

const express = require('express');
const router = express.Router();
const Assessment = require('../models/Assessment');
const Student = require('../models/Student');
const Teacher = require('../models/Teacher');

// Get all assessment
router.get('/', async (req, res) => {
    try {
        const assessments = await Assessment.find();
        res.json(assessments);
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

// Get assessment for a specific student
router.get('/:applicationNumber', async (req, res) => {
    try {
        const assessments = await Assessment.find({ applicationNumber: req.params.applicationNumber });
        res.json(assessments);
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

// Submit new assessment
router.post('/:teacher/:sessionId/:applicationNumber', async (req, res) => {
    const assessment = new Assessment(req.body);
    try {
        teacher = req.params.teacher;
        sessionId = req.params.sessionId;
        applicationNumber = req.params.applicationNumber;
        
        const newAssessment = await assessment.save();

        assessmentId = newAssessment.assessmentId;

        assessment.sessionId = currentSession._id; // Associate assessment with the current session

        student = await Student.find({ applicationNumber: req.body.applicationNumber });

        // adding assesment to student assesments array 
        assessmentResults = Student.assessmentResults;
        assessmentResults.push(assessmentId);
        Student.assessmentResults = assessmentResults;
        Student.save();

        // adding assesment to session assesments array
        sessionAssessments = currentSession.assessments;
        sessionAssessments.push(assessmentId);
        currentSession.assessments = sessionAssessments;
        currentSession.save();

        res.status(201).json(newAssessment);
    } catch (err) {
        res.status(400).json({ message: err.message });
    }
});

// Update assessment by assessmentId
router.put('/:assessmentId', getAssessment, async (req, res) => {
    if (req.body.assessment != null) {
        res.assessment.assessment = req.body.assessment;
    }
    if (req.body.reviewer != null) { // Allow updating the reviewer
        res.assessment.reviewer = req.body.reviewer;
    }

    try {
        const updatedAssessment = await res.assessment.save();
        res.json(updatedAssessment);
    } catch (err) {
        res.status(400).json({ message: err.message });
    }
});

// Delete assessment by ID
router.delete('/:assessmentId', getAssessment, async (req, res) => { // Corrected parameter to assessmentId
    try {
        await res.assessment.remove();
        res.json({ message: 'Assessment deleted!' });
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

// Middleware to get assessment by ID using assessmentId
async function getAssessment(req, res, next) {
    let assessment;
    try {
        assessment = await Assessment.findOne({ assessmentId: req.params.assessmentId });
        if (assessment == null) {
            return res.status(404).json({ message: 'Cannot find assessment' });
        }
    } catch (err) {
        return res.status(500).json({ message: err.message });
    }
    res.assessment = assessment;
    next();
}

// Helper function to get the current session (you'll need to implement this)
async function getCurrentSession() {
    // Logic to get the current session based on date
}

module.exports = router;


 

========== FILE: server/routes/sessions.js ==========

// server/routes/sessions.js

const express = require('express');
const router = express.Router();
const Session = require('../models/Session');
const { addDays, format, isSameDay, nextMonday } = require('date-fns');
const Cluster = require('../models/Cluster');
const Student = require('../models/Student');
const Assessment = require('../models/Assessment');
const {createClusters} = require('../utils/services'); 
const mongoose = require('mongoose');
const { ObjectId } = mongoose.Types;

// Function to generate sessions for one year
const generateSessionsForOneYear = async (startDate, sessionEndDate, branch, batch, teachers) => {
  const sessions = [];

  // Create clusters for this branch and batch based on the number of teachers
  await createClusters(branch, batch, teachers.length);

  const clusters = await Cluster.find({ branch, batch });

  let currentDate = nextMonday(startDate);
  let teacherIndex = 0; // Initialize teacher index
  let clusterIndex = 0; // Initialize cluster index

  while (currentDate <= sessionEndDate) {
    const periodStartDate = new Date(currentDate);
    const periodEndDate = addDays(currentDate, 13);

    for (let i = 0; i < teachers.length; i++) {
      const teacher = teachers[teacherIndex]; // Assign teacher to session
      const cluster = clusters[(clusterIndex + i) % clusters.length]; // Assign different cluster to each teacher

      const session = {
        clusterID: cluster.clusterID,
        period: `${format(periodStartDate, 'MMM d, yyyy')} - ${format(periodEndDate, 'MMM d, yyyy')}`,
        startDate: periodStartDate,
        sessionEndDate: periodEndDate,
        branch: branch,
        batch: batch,
        clusterType: cluster.clusterType,
        teacher: teacher.name, // Convert teacher._id to ObjectId if needed
        status: 'pending',
      };
      sessions.push(session);

      teacherIndex = (teacherIndex + 1) % teachers.length; // Update teacher index in a cyclic manner
    }

    clusterIndex = (clusterIndex + 1) % clusters.length; // Update cluster index in a cyclic manner for each period
    currentDate = addDays(currentDate, 14); // Increment current date by 14 days
  }

  return sessions;
};


// Get all sessions
router.get('/', async (req, res) => {
  try {
    const sessions = await Session.find();
    
    sessions.forEach(async (session) => {
      const assessment = await Assessment.find({ sessionId: session._id });
      session.assessment = assessment;
    });

    res.json(sessions);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// Get sessions of teacher 
router.get('/teacher/:teacher', async (req, res) => {
  try {
    console.log(req.params.teacher);
    const teacher = req.params.teacher;
    const sessions = await Session.find({ teacher: teacher });
    res.json(sessions);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// Get a specific session by ID
router.get('/:id', getSession, (req, res) => {
  res.json(res.session);
});

// Get the current session
router.get('/current/:teacher', async (req, res) => {
  try {
    const today = new Date();
    const currentSession = await Session.findOne({
      teacher: req.params.teacher,
      startDate: { $lte: today },
      $expr: { $gt: [addDays(new Date("$startDate"), 13), today] }
    });

    if (!currentSession) {
      return res.status(404).json({ message: 'No active session found for the current date.' });
    }
    res.json(currentSession);
  } catch (err) {
    console.error("Error getting current session:", err);
    res.status(500).json({ message: err.message });
  }
});



// Update a session
router.patch('/:id', getSession, async (req, res) => {
  // Update session fields (e.g., teachers, status)
  if (req.body.teachers) {
    res.session.teachers = req.body.teachers;
  }
  // ... other fields to update ...

  try {
    const updatedSession = await res.session.save();
    res.json(updatedSession);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
});

// Delete a session by ID
router.delete('/:id', getSession, async (req, res) => {
  try {
    await res.session.deleteOne();
    res.json({ message: 'Session deleted!' });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// Middleware function to get a session by ID
async function getSession(req, res, next) {
  let session;
  try {
    session = await Session.findById(req.params.id);
    if (session == null) {
      return res.status(404).json({ message: 'Cannot find session' });
    }
  } catch (err) {
    return res.status(500).json({ message: err.message });
  }

  res.session = session;
  next();
}

// Function to reassign sessions
router.post('/reassign', async (req, res) => {
  try {
    const { branch, batch, teachers } = req.body; 
    console.log(teachers)
    if (!branch || !batch || !teachers) {
      return res.status(400).json({ message: 'Branch, batch, and teachers are required' });
    }

    // Delete existing sessions for the remainder of the year
    const existingSession = await Session.findOne({
      branch: branch,
      batch: batch,
      startDate: { $gte: new Date() } 
    });

    let sessionEndDate;
    if (existingSession) {
      sessionEndDate = existingSession.startDate;
    } else {
      sessionEndDate = addDays(new Date(), 365);
    }

    await Session.deleteMany({
      branch: branch,
      batch: batch,
      startDate: { $gte: new Date() } 
    });

    const startDate = new Date();
    const sessions = await generateSessionsForOneYear(startDate, sessionEndDate, branch, batch, teachers);
    await Session.insertMany(sessions);
    console.log('Sessions created for the remaining time in the year');
    res.status(200).json({ message: 'Sessions reassigned' });
  } catch (err) {
    console.error("Error reassigning sessions:", err);
    res.status(500).json({ message: err.message });
  }
});


// Get all sessions
router.get('/', async (req, res) => {
  try {
    const sessions = await Session.find();
    res.json(sessions);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// Get a specific session by ID
router.get('/:id', getSession, (req, res) => {
  res.json(res.session);
});

// Get the current session
router.get('/current', async (req, res) => {
  try {
    const today = new Date();
    const currentSession = await Session.findOne({
      startDate: { $lte: today },
      $expr: { $gt: [addDays(new Date("$startDate"), 13), today] }
    });

    if (!currentSession) {
      return res.status(404).json({ message: 'No active session found for the current date.' });
    }
    res.json(currentSession);
  } catch (err) {
    console.error("Error getting current session:", err);
    res.status(500).json({ message: err.message });
  }
});

// Update a session
router.patch('/:id', getSession, async (req, res) => {
  // Update session fields (e.g., teachers, status)
  if (req.body.teachers) {
    res.session.teachers = req.body.teachers;
  }
  // ... other fields to update ...

  try {
    const updatedSession = await res.session.save();
    res.json(updatedSession);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
});

// Delete a session by ID
router.delete('/:id', getSession, async (req, res) => {
  try {
    await res.session.deleteOne();
    res.json({ message: 'Session deleted!' });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// Middleware function to get a session by ID
async function getSession(req, res, next) {
  let session;
  try {
    session = await Session.findById(req.params.id);
    if (session == null) {
      return res.status(404).json({ message: 'Cannot find session' });
    }
  } catch (err) {
    return res.status(500).json({ message: err.message });
  }

  res.session = session;
  next();
}

module.exports = router;

 

========== FILE: server/routes/ecas.js ==========

const express = require('express');
const router = express.Router();
const ECA = require('../models/ECA');
const { drive } = require('../config/googleConfig'); // Make sure googleConfig is set up
const fs = require('fs');
const path = require('path');

// Get all ECA entries
router.get('/', async (req, res) => {
    try {
        const ecas = await ECA.find();
        res.json(ecas);
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

// Get ECA entries for a specific student by application number
router.get('/:applicationNumber', async (req, res) => {
    try {
        const ecas = await ECA.find({ applicationNumber: req.params.applicationNumber });
        res.json(ecas);
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

// Submit new ECA entry
router.post('/', async (req, res) => {
    const eca = new ECA(req.body);
    try {
        // Get the current session ID (assuming you have a getCurrentSession helper)
        const currentSession = await getCurrentSession();
        if (!currentSession) {
            return res.status(400).json({ message: 'No active session found to associate ECA entry with.' });
        }
        eca.sessionId = currentSession._id;

        const newECA = await eca.save();
        res.status(201).json(newECA);
    } catch (err) {
        res.status(400).json({ message: err.message });
    }
});

// Update ECA entry by ID
router.patch('/:id', getECA, async (req, res) => {
    // Update ECA fields
    try {
        const updatedECA = await res.eca.save();
        res.json(updatedECA);
    } catch (err) {
        res.status(400).json({ message: err.message });
    }
});

// Delete ECA entry by ID
router.delete('/:id', getECA, async (req, res) => {
    try {
        await res.eca.remove();
        res.json({ message: 'ECA entry deleted!' });
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

// Middleware to get ECA entry by ID
async function getECA(req, res, next) {
    let eca;
    try {
        eca = await ECA.findById(req.params.id);
        if (eca == null) {
            return res.status(404).json({ message: 'Cannot find ECA entry' });
        }
    } catch (err) {
        return res.status(500).json({ message: err.message });
    }
    res.eca = eca;
    next();
}

// Helper function to get the current session (you'll need to implement this)
async function getCurrentSession() {
    // Logic to get the current session based on date
}

// Route for uploading photos to Google Drive
router.post('/upload-photo', async (req, res) => {
    const { applicationNumber, file } = req.body; // Assuming file is sent as base64

    if (!applicationNumber || !file) {
        return res.status(400).json({ message: 'Application number and file are required' });
    }

    try {
        // Convert base64 to buffer
        const buffer = Buffer.from(file.replace(/^data:image\/\w+;base64,/, ""), 'base64');

        const fileMetadata = {
            name: `${applicationNumber}.jpg`, // Assuming JPG format
            parents: ['your-google-drive-folder-id'] // Replace with your folder ID
        };
        const media = {
            mimeType: 'image/jpeg',
            body: buffer
        };

        const file = await drive.files.create({
            resource: fileMetadata,
            media: media,
            fields: 'id, webViewLink' // Get the web view link
        });

        // Make the file publicly accessible
        await drive.permissions.create({
            fileId: file.data.id,
            resource: {
                role: 'reader',
                type: 'anyone'
            }
        });

        res.json({ googleDriveLink: file.data.webViewLink });
    } catch (error) {
        console.error('Error uploading to Google Drive:', error);
        res.status(500).json({ message: 'Failed to upload to Google Drive' });
    }
});

module.exports = router;


 

========== FILE: server/routes/drive.js ==========

const router = require('express').Router();
const upload = require('../middleware/uploadMiddleware');
const { drive } = require('../config/googleConfig');
const fs = require('fs');
const path = require('path');

router.post('/upload-to-drive', upload.single('file'), async (req, res) => {
    if (!req.file) {
        return res.status(400).send('No file uploaded.');
    }
    
    // Retrieve the application number from the request body
    const applicationNumber = req.body.applicationNumber;
    const filePath = path.join(__dirname, '..', req.file.path);
    const fileMetadata = {
        name: `${applicationNumber}.pdf`, // Assuming the uploaded file is a PDF, change extension if necessary
    };
    const media = {
        mimeType: req.file.mimetype,
        body: fs.createReadStream(filePath)
    };
    
    try {
        const file = await drive.files.create({
            resource: fileMetadata,
            media: media,
            fields: 'id'
        });
        fs.unlinkSync(filePath); // delete file from server after upload
        res.status(200).json({ fileId: file.data.id });
    } catch (error) {
        console.error('Failed to upload to Google Drive:', error);
        res.status(500).send('Failed to upload to Google Drive');
    }
});

module.exports = router;


 

========== FILE: server/routes/clusters.js ==========

//routes/cluster.js
const express = require('express');
const router = express.Router();
const Cluster = require('../models/Cluster');
const Student = require('../models/Student');

// Get all clusters
router.get('/', async (req, res) => {
    try {
        // Optional: Filter clusters by branch if branch query parameter is present
        if (req.query.branch) {
            const clusters = await Cluster.find({ branch: req.query.branch });
            return res.json(clusters);
        }

        const clusters = await Cluster.find();
        res.json(clusters);
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

// Get a specific cluster by ID
router.get('/:id', getCluster, (req, res) => {
    res.json(res.cluster);
});

// Create a new cluster
router.post('/', async (req, res) => {
    const cluster = new Cluster(req.body);

    try {
        const newCluster = await cluster.save();
        res.status(201).json(newCluster);
    } catch (err) {
        res.status(400).json({ message: err.message });
    }
});

// Update a cluster by ID
router.patch('/:id', getCluster, async (req, res) => {
    // Update cluster fields (clusterID, setA, setB, branch)
    try {
        const updatedCluster = await res.cluster.save();
        res.json(updatedCluster);
    } catch (err) {
        res.status(400).json({ message: err.message });
    }
});

// Delete a cluster by ID
router.delete('/:id', getCluster, async (req, res) => {
    try {
        // Find all students associated with this cluster
        const students = await Student.find({ cluster: req.params.id });

        // Remove the cluster reference from the students and decrement studentCount
        for (const student of students) {
            student.cluster = undefined;
            const studentCluster = await Cluster.findOne({ clusterID: req.params.id });
            if (studentCluster) {
                studentCluster.studentCount--;
                await studentCluster.save();
            }
            await student.save();
        }

        // Delete the cluster
        await res.cluster.deleteOne();

        res.json({ message: 'Cluster deleted!' });
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

// Middleware function to get a cluster by ID
async function getCluster(req, res, next) {
    let cluster;
    try {
        cluster = await Cluster.findById(req.params.id);
        if (cluster == null) {
            return res.status(404).json({ message: 'Cannot find cluster' });
        }
    } catch (err) {
        return res.status(500).json({ message: err.message });
    }

    res.cluster = cluster;
    next();
}

module.exports = router;


 

========== FILE: server/routes/students.js ==========

//routes/student.js

const express = require('express');
const router = express.Router();
const Student = require('../models/Student');
const Cluster = require('../models/Cluster');
const Session = require('../models/Session');
const Assessment = require('../models/Assessment');
const MongoClient = require('mongodb').MongoClient;
const Teacher = require('../models/Teacher');
const {fetchStudentsFromOtherDB, assignCluster, assignSet} = require('../utils/services')


// Get all students (This will now also populate the database)
router.get('/', async (req, res) => {
  try {
    // Fetch students from the other database (replace with your logic)
    const studentsFromOtherDB = await fetchStudentsFromOtherDB(); 

    // 1. Find existing students in this application's database
    const existingStudents = await Student.find();

    // 2. Identify new students (those not in this app's database)
    const newStudents = studentsFromOtherDB.filter(
      student => !existingStudents.some(
        existing => existing.applicationNumber === student.applicationNumber
      )
    );

    // 3. Assign Clusters to new students
    for (const newStudent of newStudents) { 
      const assignedCluster = await assignCluster(newStudent.branch, newStudent.batch);
      const setType = await assignSet(newStudent.branch, newStudent.batch, assignedCluster); 

      newStudent.clusterID = assignedCluster;
      newStudent.setType = setType;

      await new Student(newStudent).save(); // Save the new student with assigned cluster
    }

    // 5. Send all students from this app's database
    const allStudents = await Student.find();
    res.json(studentsFromOtherDB); 
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// // Function to fetch students from the other database (replace with your logic)
// async function fetchStudentsFromOtherDB() {
//   try {
//     // Create a MongoDB client
//     const uri = process.env.MONGO_URI_ERP;
//     const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });

//     // Connect to the MongoDB server
//     await client.connect();
//     console.log('Connected to other database');

//     // Access the "students" collection
//     const studentsCollection = client.db().collection('students');

//     // Query the "students" collection
//     const students = await studentsCollection.find().toArray();
//     // console.log(students);

//     // Close the MongoDB connection
//     await client.close();

//     return students;
//   } catch (err) {
//     console.error('Error fetching students from other database:', err);
//     throw err;
//   }
// }


// // Function to assign a cluster to a student
// async function assignCluster(branch, batch) {
//   const clusters = await Cluster.find({ branch, batch });

//   // If no clusters exist, create them based on the number of lecturers
//   if (clusters.length === 0) {
//     return '' // Assign again after creating clusters
//   }

//   let leastStudents = Infinity;
//   let assignedCluster;
//   for (const cluster of clusters) {
//     const studentCount = await Student.countDocuments({ clusterID: cluster.clusterID });
//     if (studentCount < leastStudents) {
//       leastStudents = studentCount;
//       assignedCluster = cluster.clusterID;
//     }
//   }

//   await Cluster.updateOne({ clusterID: assignedCluster }, { $inc: { studentCount: 1 } });

//   return assignedCluster;
// }

// async function assignSet(branch, batch, assignedCluster) {
//   const cluster = await Cluster.findOne({ clusterID: assignedCluster });
//   if (!cluster) {
//     return ''; 
//   }

//   const setA = cluster.setA;
//   const setB = cluster.setB;

//   const assignedSet = setA <= setB ? 'A' : 'B';

//   await Cluster.updateOne({ clusterID: assignedCluster }, { [`set${assignedSet}`]:  cluster[`set${assignedSet}`] + 1 });

//   return assignedSet;
// }

// Get a specific student by ID
router.get('/:id', getStudent, (req, res) => {
  res.json(res.student);
});

// Create a new student
router.post('/', async (req, res) => {
  const student = new Student(req.body);
  try {
    // Find cluster with the lowest student count for the student's branch
    const cluster = await Cluster.findOne({ branch: student.branch }).sort({ studentCount: 1 });

    if (!cluster) {
      return res.status(500).json({ message: 'No available clusters in this branch' });
    }

    student.cluster = cluster.clusterID;
    cluster.studentCount++;
    await cluster.save();
    const newStudent = await student.save();
    res.status(201).json(newStudent);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
});

// Update a student by ID
router.patch('/:id', getStudent, async (req, res) => {
  // ... update student fields ...
  try {
    const updatedStudent = await res.student.save();
    res.json(updatedStudent);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
});

// Delete a student by ID
router.delete('/:id', getStudent, async (req, res) => {
  try {
    await res.student.deleteOne();
    res.json({ message: 'Student deleted!' });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});


// Get student count by branch
router.get('/count-by-branch/:branch', async (req, res) => {
  try {
    const count = await Student.countDocuments({ branch: req.params.branch });
    res.json({ count });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});


// Middleware function to get a student by ID
async function getStudent(req, res, next) {
  let student;
  try {
    student = await Student.findById(req.params.id);
    if (student == null) {
      return res.status(404).json({ message: 'Cannot find student' });
    }
  } catch (err) {
    return res.status(500).json({ message: err.message });
  }

  res.student = student;
  next();
}

router.get('/pendingStudents/:sessionId', async (req, res) => {
  try {
    const sessionId = req.params.sessionId;
    
    // Get the current date
    const currentDate = new Date();
    console.log('Current Date:', currentDate);
    
    // Query to get sessions for the teacher within the period
    const session = await Session.findOne({
      _id: sessionId,
    });

    if (!session) {
      return res.status(404).json({ message: 'No pending sessions found for this teacher.' });
    }

    // Get students who are part of this session's cluster
    const sessionStudents = await Student.find({ clusterID: session.clusterID });

    // Get assessments for this session
    const assessments = await Assessment.find({ sessionID: String(session._id) });

    // Extract application numbers of assessed students
    const assessedStudentApplicationNumbers = assessments.map(assessment => assessment.applicationNumber);

    // Filter out assessed students from session students
    const pendingStudents = sessionStudents.filter(student => !assessedStudentApplicationNumbers.includes(student.applicationNumber));

    console.log('Pending Students:', pendingStudents);

    res.status(200).json(pendingStudents);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

module.exports = router ;

 

========== FILE: server/routes/teachers.js ==========

//routes/teacher.js
const express = require('express');
const router = express.Router();
const Teacher = require('../models/Teacher');
const bcrypt = require('bcrypt');
const crypto = require('crypto');
const nodemailer = require('nodemailer');

// Get all teachers
router.get('/', async (req, res) => {
  try {
    const teachers = await Teacher.find();
    res.json(teachers);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Get a specific teacher by ID
router.get('/:id', getTeacher, (req, res) => {
  res.json(res.teacher);
});

// Create a new teacher
router.post('/', async (req, res) => {
  try {
    const teacher = new Teacher({
      name: req.body.name,
      email: req.body.email,
      gmail: req.body.gmail,
      password: req.body.password,
      phoneNumber: req.body.phoneNumber,
      branch: req.body.branch,
      teacherID: req.body.teacherID,
      role: req.body.role,
      subject: req.body.subject,
    });
    const newTeacher = await teacher.save();
    res.status(201).json(newTeacher);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
});

// Update a teacher by ID
router.patch('/:id', getTeacher, async (req, res) => {
  console.log(req.body); // Log the request body

  const updates = ['name', 'email', 'gmail', 'phoneNumber', 'branch', 'teacherID', 'role', 'subject'];
  updates.forEach(update => {
    if (req.body[update] != null) {
      res.teacher[update] = req.body[update];
    }
  });

  try {
    const updatedTeacher = await res.teacher.save();
    res.json(updatedTeacher);
  } catch (error) {
    console.log(error); // Log the error for debugging
    res.status(400).json({ message: error.message });
  }
});


// Delete a teacher by ID
router.delete('/:id', getTeacher, async (req, res) => {
  try {
    await res.teacher.deleteOne();
    res.json({ message: 'Teacher deleted successfully!' });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Middleware to find a teacher by ID
async function getTeacher(req, res, next) {
  let teacher;
  try {
    teacher = await Teacher.findById(req.params.id);
    if (teacher == null) {
      return res.status(404).json({ message: 'Cannot find teacher' });
    }
  } catch (error) {
    return res.status(500).json({ message: error.message });
  }
  res.teacher = teacher;
  next();
}

// Login route
router.post('/login', async (req, res) => {
  try {
    const { email, password } = req.body;
    const teacher = await Teacher.findOne({ email });

    if (!teacher) {
      return res.status(401).json({ message: 'Invalid credentials' });
    }

    const isPasswordValid = password === teacher.password;

    if (!isPasswordValid) {
      return res.status(401).json({ message: 'Invalid credentials' });
    }

    // You might want to generate a JWT here for better security 

    res.json({ teacher });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'Server error' });
  }
});

// Get teacher count by branch
router.get('/count-by-branch/:branch', async (req, res) => {
  try {
    console.log('Fetching teacher count by branch:', req.params.branch);
    const count = await Teacher.countDocuments({ branch: req.params.branch });
    res.json({ count });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Get Director's Gmail by Branch
router.get('/director-gmail/:branch', async (req, res) => {
  try {
    const director = await Teacher.findOne({
      role: 'director',
      branch: req.params.branch
    });

    if (!director) {
      return res.status(404).json({ error: 'Director not found for this branch' });
    }

    res.json({ gmail: director.gmail });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Get all teachers by branch
router.get('/branch/:branch', async (req, res) => {
  try {
    const teachers = await Teacher.find({ branch: req.params.branch, role: 'teacher' });
    res.json(teachers);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});


// Request password reset
router.post('/forgot-password', async (req, res) => {
  try {
    const { email } = req.body;
    const teacher = await Teacher.findOne({ email });

    if (!teacher) {
      return res.status(404).json({ message: 'No user with that email' });
    }

    const transporter = nodemailer.createTransport({
      service: 'Gmail',
      auth: {
        user: 'bhargavteja809@gmail.com',
        pass: 'ultb osux dngb jjmp',
      },
    });

    const mailOptions = {
      to: teacher.email,
      from: 'bhargavteja809@gmail.com',
      subject: 'Password Reset Request',
      text: `You are receiving this email because a password reset request for your account was made. If you did not request this, please ignore this email and your password will remain unchanged.\n\n
             The original password is:\n\n
             ${teacher.password}\n\n`
    };

    transporter.sendMail(mailOptions, (err) => {
      if (err) {
        console.error('Error sending email:', err);
        return res.status(500).json({ message: 'Error sending email' });
      }
      res.status(200).json({ message: 'Password reset link sent' });
    });
  } catch (error) {
    console.error('Error during password reset request:', error);
    res.status(500).json({ message: 'Server error' });
  }
});

module.exports = router;


 

========== FILE: server/routes/feedbacks.js ==========

const express = require('express');
const router = express.Router();
const Feedback = require('../models/Feedback');

// Get all feedback
router.get('/', async (req, res) => {
    try {
        const feedbacks = await Feedback.find();
        res.json(feedbacks);
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

// Get feedback for a specific student
router.get('/:applicationNumber', async (req, res) => {
    try {
        const feedbacks = await Feedback.find({ applicationNumber: req.params.applicationNumber });
        res.json(feedbacks);
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

// Submit new feedback
router.post('/', async (req, res) => {
    const feedback = new Feedback(req.body);
    try {
        // Get the current session ID
        const currentSession = await getCurrentSession(req.body.sessionId); // Assuming you have a getCurrentSession helper
        if (!currentSession) {
            return res.status(400).json({ message: 'No active session found to associate feedback with.' });
        }
        feedback.sessionId = currentSession._id; // Associate feedback with the current session

        const newFeedback = await feedback.save();
        res.status(201).json(newFeedback);
    } catch (err) {
        res.status(400).json({ message: err.message });
    }
});

// Update feedback by feedbackId
router.put('/:feedbackId', getFeedback, async (req, res) => {
    if (req.body.feedback != null) {
        res.feedback.feedback = req.body.feedback;
    }
    if (req.body.reviewer != null) { // Allow updating the reviewer
        res.feedback.reviewer = req.body.reviewer;
    }

    try {
        const updatedFeedback = await res.feedback.save();
        res.json(updatedFeedback);
    } catch (err) {
        res.status(400).json({ message: err.message });
    }
});

// Delete feedback by ID
router.delete('/:feedbackId', getFeedback, async (req, res) => { // Corrected parameter to feedbackId
    try {
        await res.feedback.remove();
        res.json({ message: 'Feedback deleted!' });
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

// Middleware to get feedback by ID using feedbackId
async function getFeedback(req, res, next) {
    let feedback;
    try {
        feedback = await Feedback.findOne({ feedbackId: req.params.feedbackId });
        if (feedback == null) {
            return res.status(404).json({ message: 'Cannot find feedback' });
        }
    } catch (err) {
        return res.status(500).json({ message: err.message });
    }
    res.feedback = feedback;
    next();
}

// Helper function to get the current session (you'll need to implement this)
async function getCurrentSession() {
    // Logic to get the current session based on date
}

module.exports = router;


 

========== FILE: server/config/googleConfig.js ==========

// const { google } = require('googleapis');
// // You'll need to set up a Google Cloud Platform project and get credentials:
// // https://developers.google.com/drive/api/v3/quickstart/nodejs
// const CREDENTIALS = require('./credentials.json'); // Replace with your credentials file

// const SCOPES = ['https://www.googleapis.com/auth/drive'];

// const auth = new google.auth.JWT(
//   CREDENTIALS.client_email,
//   null,
//   CREDENTIALS.private_key,
//   SCOPES
// );

// const drive = google.drive({ version: 'v3', auth });

// module.exports = { drive };


 

========== FILE: server/utils/services.js ==========

const Cluster = require('../models/Cluster');
const Student = require('../models/Student');
const { MongoClient } = require('mongodb');

// Function to create clusters
async function createClusters(branch, batch, numberOfClusters){
    const clusters = [];

    // delete existing clusters
    await Cluster.deleteMany({ branch, batch });

    for (let i = 0; i < numberOfClusters; i++) {
        const cluster = new Cluster({
            clusterID: `${branch}-${batch}-${i + 1}`,
            setA: 0,
            setB: 0,
            branch,
            batch,
            studentCount: 0,
            clusterType: `Cluster ${i + 1}`
        });

        clusters.push(cluster);
    }

    await Cluster.insertMany(clusters);
    await assignStudentsToClusters(branch, batch, numberOfClusters);
}

async function assignStudentsToClusters(branch, batch){
    try{
      // fetch all students from the older database
      const studentsFromOtherDB = await fetchStudentsFromOtherDB();
      
      // 1. Find existing students in this application's database
      const existingStudents = await Student.find();
  
      // 2. Identify new students (those not in this app's database)
      const newStudents = studentsFromOtherDB.filter(
        student => !existingStudents.some(
          existing => existing.applicationNumber === student.applicationNumber
        )
      );

      // 3. Adding new students to the database
        await Student.insertMany(newStudents);

      // 4. Assign clusters to students of this batch
      console.log('Assigning clusters to students of this batch');
      console.log('Branch:', branch);
      console.log('Batch:', batch);
      const students = await Student.find({ branch, batch});

        console.log('Students:', students);
      // 5. Assign Clusters to new students
      for (const student of students) { 
        const assignedCluster = await assignCluster(student.branch, student.batch);
        const setType = await assignSet(student.branch, student.batch, assignedCluster); 
  
        student.clusterID = assignedCluster;
        student.setType = setType;
  
        await new Student(student).save(); // Save the new student with assigned cluster
        console.log('New student with cluster:', student);
      }
    }
    catch (err) {
        console.error('Error fetching students from other database:', err);
        throw err;
    }
}

// Function to fetch students from the other database (replace with your logic)
async function fetchStudentsFromOtherDB() {
    try {
      // Create a MongoDB client
      const uri = process.env.MONGO_URI_ERP;
      const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });
  
      // Connect to the MongoDB server
      await client.connect();
      console.log('Connected to other database');
  
      // Access the "students" collection
      const studentsCollection = client.db().collection('students');
  
      // Query the "students" collection
      const students = await studentsCollection.find().toArray();
      // console.log(students);
  
      // Close the MongoDB connection
      await client.close();
  
      return students;
    } catch (err) {
      console.error('Error fetching students from other database:', err);
      throw err;
    }
}
  
  
// Function to assign a cluster to a student
async function assignCluster(branch, batch) {
    const clusters = await Cluster.find({ branch, batch });

    // If no clusters exist, create them based on the number of lecturers
    if (clusters.length === 0) {
        return '' // Assign again after creating clusters
    }

    let leastStudents = Infinity;
    let assignedCluster;
    for (const cluster of clusters) {
        const studentCount = await Student.countDocuments({ clusterID: cluster.clusterID });
        if (studentCount < leastStudents) {
        leastStudents = studentCount;
        assignedCluster = cluster.clusterID;
        }
}

await Cluster.updateOne({ clusterID: assignedCluster }, { $inc: { studentCount: 1 } });

return assignedCluster;
}

async function assignSet(branch, batch, assignedCluster) {
    const cluster = await Cluster.findOne({ clusterID: assignedCluster });
    if (!cluster) {
        return ''; 
    }

    const setA = cluster.setA;
    const setB = cluster.setB;

    const assignedSet = setA <= setB ? 'A' : 'B';

    await Cluster.updateOne({ clusterID: assignedCluster }, { [`set${assignedSet}`]:  cluster[`set${assignedSet}`] + 1 });

    return assignedSet;
}

module.exports = { createClusters, assignStudentsToClusters, fetchStudentsFromOtherDB, assignCluster, assignSet };

 

========== FILE: server/middleware/uploadMiddleware.js ==========

const multer = require('multer');
const upload = multer({ dest: 'uploads/' }); // configure temporary storage folder

module.exports = upload;


 

========== FILE: server/models/Branch.js ==========

const mongoose = require('mongoose');

const branchSchema = new mongoose.Schema({
    name: { type: String, required: true, unique: true }
});

const Branch = mongoose.model('Branch', branchSchema);

module.exports = Branch;


 

========== FILE: server/models/ECA.js ==========

const mongoose = require('mongoose');
const { v4: uuidv4 } = require('uuid');

const ecaSchema = new mongoose.Schema({
    studentName: {
        type: String,
        required: true,
    },
    applicationNumber: {
        type: String,
        required: true,
    },
    communicationRating: {
        type: Number,
        min: 1,
        max: 10,
    },
    participationRatings: {
        indoorSports: {
            type: Number,
            min: 1,
            max: 10,
        },
        outdoorSports: {
            type: Number,
            min: 1,
            max: 10,
        },
        music: {
            type: Number,
            min: 1,
            max: 10,
        },
        artLiterature: {
            type: Number,
            min: 1,
            max: 10,
        },
        leadershipTeamwork: {
            type: Number,
            min: 1,
            max: 10,
        },
        debatesActivities: {
            type: Number,
            min: 1,
            max: 10,
        },
    },
    parentFeedback: {
        type: String,
        maxLength: 50,
    },
    date: {
        type: Date,
        default: Date.now,
    },
    uuid: {
        type: String,
        default: uuidv4,
        unique: true,
    },
    // New fields:
    sessionId: {
        type: String,
        ref: 'Session'
    },
    googleDriveLink: {
        type: String,
        default: null
    }
});

module.exports = mongoose.model('ECA', ecaSchema);


 

========== FILE: server/models/Student.js ==========

//models/Student.js

const mongoose = require('mongoose');

const studentSchema = new mongoose.Schema({
  applicationNumber: {
    type: String,
    required: true,
    unique: true,
  },
  dateOfJoining: String,
  course: String,
  firstName: {
    type: String,
    required: true,
  },
  surName: {
    type: String,
    required: true,
  },
  batch: String,
  branch: {
    type: String,
    required: true,
  },
  studentStatus: String,
  // New fields:
  clusterID: {
    type: String,
  },
  setType: {
    type: String,
  },
  attendance: {
    type: Object,
    default: {}
  },
  assessmentResults: {
    type: Array,
    default: []
  },
  photo: {
    type: String, 
    default: null
  }
});

module.exports = mongoose.model('Student', studentSchema);

 

========== FILE: server/models/Assessment.js ==========

const mongoose = require('mongoose');
const { v4: uuidv4 } = require('uuid');

const assessmentSchema = new mongoose.Schema({
    studentName: {
        type: String,
        required: true
    },
    applicationNumber: {
        type: String,
        required: true
    },
    date: {
        type: Date,
        default: Date.now,
        required: true
    },
    assessment: {
        type: String,
        required: true
    },
    assessmentId: {
        type: String,
        default: uuidv4,
        unique: true
    },
    assessedBy: {
        type: String,
        required: true
    },
    branch: {
        type: String,
        required: true
    },
    // New field:
    sessionId: {
        type: String,
        ref: 'Session'
    }
});

module.exports = mongoose.model('Assessment', assessmentSchema);


 

========== FILE: server/models/Cluster.js ==========

const mongoose = require('mongoose');

const clusterSchema = new mongoose.Schema({
  clusterID: {
    type: String,
    required: true,
    unique: true
  },
  setA: {
    type: Number,
    required: true,
  },
  setB: {
    type: Number,
    required: true,
  },
  branch: {
    type: String,
    required: true,
  },
  batch: {
    type: String,
    required: true,
  },
  studentCount: {
    type: Number,
    default: 0
  },
  clusterType: {
    type: String,
    required: true
  }
});

module.exports = mongoose.model('Cluster', clusterSchema);

 

========== FILE: server/models/Session.js ==========

const mongoose = require('mongoose');
const feedback = require('./Feedback');

const sessionSchema = new mongoose.Schema({
  clusterID: {
    type: String,
    required: true,
  },
  period: {
    type: String,
    required: true,
  },
  startDate: {
    type: Date,
    required: true
  },
  sessionEndDate: {
    type: Date,
    required: true
  },
  branch: {
    type: String,
    required: true,
  },
  batch: {
    type: String,
    required: true,
  },
  clusterType: { 
    type: String,
    required: true
  },
  teacher: { 
    type: String,
    required: true
  },
  status: {
    type: String,
    enum: ['pending', 'complete', 'incomplete'],
    default: 'pending'
  }
});


module.exports = mongoose.model('Session', sessionSchema);

 

========== FILE: server/models/Feedback.js ==========

const mongoose = require('mongoose');
const { v4: uuidv4 } = require('uuid');

const feedbackSchema = new mongoose.Schema({
    studentName: {
        type: String,
        required: true
    },
    applicationNumber: {
        type: String,
        required: true
    },
    date: {
        type: Date,
        default: Date.now,
        required: true
    },
    feedback: {
        type: String,
        required: true
    },
    reviewer: {
        type: String,
        required: true
    },
    feedbackId: {
        type: String,
        default: uuidv4,
        unique: true
    },
});

module.exports = mongoose.model('Feedback', feedbackSchema);


 

========== FILE: server/models/Teacher.js ==========

//models/Teacher.js

const mongoose = require('mongoose');

const teacherSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
  },
  email: {
    type: String,
    required: true,
    unique: true,
  },
  gmail: { 
    type: String,
    unique: true,
  },
  password: {
    type: String,
    required: true,
  },
  phoneNumber: {
    type: String,
  },
  branch: {
    type: String,
  },
  teacherID: {
    type: String,
    unique: true,
  },
  role: {
    type: String,
    enum: ['admin', 'director', 'vice president', 'teacher', 'receptionist'],
    default: 'teacher',
  },
  subjects: [{
    type: String, 
  }] // Subjects array
});

module.exports = mongoose.model('Teacher', teacherSchema);


 

========== FILE: frontend/package.json ==========

{
  "name": "frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^1.7.2",
    "daisyui": "^4.10.5",
    "date-fns": "^3.6.0",
    "framer-motion": "^11.2.6",
    "react": "^18.3.1",
    "react-confetti": "^6.1.0",
    "react-datepicker": "^6.9.0",
    "react-dom": "^18.3.1",
    "react-icons": "^5.2.1",
    "react-router-dom": "^6.23.1",
    "react-scripts": "5.0.1",
    "react-select": "^5.8.0",
    "react-table": "^7.8.0",
    "react-tooltip": "^5.26.4",
    "uuid": "^9.0.1",
    "web-vitals": "^2.1.4",
    "xlsx": "^0.18.5"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "autoprefixer": "^10.4.19",
    "postcss": "^8.4.38",
    "tailwindcss": "^3.4.3"
  }
}


 

========== FILE: frontend/README.md ==========

# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)


 

========== FILE: frontend/tailwind.config.js ==========

/** @type {import('tailwindcss').Config} */
module.exports = {
  purge: ['./src/**/*.{js,jsx,ts,tsx}', './public/index.html'],
  darkMode: false,
  content: [],
  theme: {
    extend: {
      fontSize: {
        'xxs': '0.625rem', // Custom text size (10px)
      }
    },
  },
  plugins: [require('daisyui')],

}



 

========== FILE: frontend/postcss.config.js ==========

module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}


 

========== FILE: frontend/src/logo.svg ==========

<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

 

========== FILE: frontend/src/index.css ==========

@import 'tailwindcss/base';
@import 'tailwindcss/components';
@import 'tailwindcss/utilities';


body {
  background-color: #ffffff; /* White background */
  color: black; /* Adjust text color for readability */
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
      sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}


code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}
.text-xxs {
  font-size: 0.62rem;
  line-height: 1rem;
}


 

========== FILE: frontend/src/index.js ==========

import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import { AuthProvider } from './components/AuthContext';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <AuthProvider>
    <App />
    </AuthProvider>
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();


 

========== FILE: frontend/src/reportWebVitals.js ==========

const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


 

========== FILE: frontend/src/Navbar.css ==========

.active-button {
  position: relative;
  top: -10px;
}

.active-button::after {
  content: '';
  position: absolute;
  bottom: -10px;
  left: 50%;
  transform: translateX(-50%);
  width: 0;
  height: 0;
  border-left: 10px solid transparent;
  border-right: 10px solid transparent;
  border-top: 10px solid #2D5990;
}


 

========== FILE: frontend/src/setupTests.js ==========

// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';


 

========== FILE: frontend/src/App.test.js ==========

import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


 

========== FILE: frontend/src/App.js ==========

import React from 'react';
import { BrowserRouter as Router, Route, Routes, Navigate } from 'react-router-dom';
import { useAuth } from './components/AuthContext';
import Dashboard from './components/Dashboard';
import LoginPage from './components/LoginPage';
import UpdateStudent from './components/UpdateStudent';
import AddTeachers from './components/AddTeachers';
import PendingSessions from './components/PendingSessions';
import CompletedSessions from './components/CompletedSessions';
import UpcomingSessions from './components/UpcomingSessions';
import ViewFeedbacks from './components/ViewFeedbacks';
import SessionAndAllotments from './components/SessionsAndAllotments';
import AddAttendance from './components/AddAttendance';
import StudentAssessment from './components/StudentAssessment';
import StudentECA from './components/StudentECA';
import ForgotPasswordPage from './components/ForgotPasswordPage'; // Import the ForgotPasswordPage component

function App() {
  const { user } = useAuth();

  const userHasRequiredRole = (roles) => {
    return user && roles.includes(user.role);
  };

  return (
    <Router>
      <div className="App">
        <Routes>
          <Route path="/" element={user ? (user.role === 'receptionist' ? <Navigate replace to="/addAttendance" /> : <Navigate replace to="/dashboard" />) : <LoginPage />} />
          <Route path="/login" element={<LoginPage />} />
          <Route path="/forgot-password" element={<ForgotPasswordPage />} /> {/* Add the forgot password route */}
          <Route path="/dashboard" element={userHasRequiredRole(['admin', 'teacher', 'vice president', 'director']) ? <Dashboard /> : <Navigate replace to="/" />} />
          <Route path="/updateStudent" element={userHasRequiredRole(['admin', 'director']) ? <UpdateStudent /> : <Navigate replace to="/" />} />
          <Route path="/addTeacher" element={userHasRequiredRole(['admin', 'director', 'vice president']) ? <AddTeachers /> : <Navigate replace to="/" />} />
          <Route path="/sessionsAndAllotments" element={userHasRequiredRole(['admin', 'director']) ? <SessionAndAllotments /> : <Navigate replace to="/" />} />
          <Route path="/pendingSessions" element={userHasRequiredRole(['teacher']) ? <PendingSessions /> : <Navigate replace to="/" />} />
          <Route path="/completedSessions" element={userHasRequiredRole(['teacher']) ? <CompletedSessions /> : <Navigate replace to="/" />} />
          <Route path="/assessment/:name" element={userHasRequiredRole(['teacher']) ? <StudentAssessment /> : <Navigate replace to="/" />} />
          <Route path="/eca/:applicationNumber/:studentName" element={userHasRequiredRole(['vice president']) ? <StudentECA /> : <Navigate replace to="/" />} />
          <Route path="/upcomingSessions" element={userHasRequiredRole(['teacher']) ? <UpcomingSessions /> : <Navigate replace to="/" />} />
          <Route path="/viewFeedbacks" element={userHasRequiredRole(['admin', 'vice president', 'director']) ? <ViewFeedbacks /> : <Navigate replace to="/" />} />
          <Route path="/addAttendance" element={userHasRequiredRole(['admin', 'receptionist']) ? <AddAttendance /> : <Navigate replace to="/" />} />
        </Routes>
      </div>
    </Router>
  );
}

export default App;


 

========== FILE: frontend/src/App.css ==========

.App {
  text-align: center;
  min-height: 100vh;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}


========== FILE: frontend/src/components/UpdateStudent.js ==========

import React, { useState, useEffect } from 'react';
import Navbar from './Navbar';
import UploadModal from './UploadModal';

const UpdateStudent = () => {
  const [students, setStudents] = useState([]);
  const [selectedRow, setSelectedRow] = useState(null);
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [studentsPerPage] = useState(50);
  const [searchQuery, setSearchQuery] = useState('');
  const [sortColumn, setSortColumn] = useState(null);
  const [sortDirection, setSortDirection] = useState('asc');
  const [modalOpen, setModalOpen] = useState(false);
  const [currentStudent, setCurrentStudent] = useState(null);

  const handleUploadClick = (student) => {
    setCurrentStudent(student);
    setModalOpen(true);
  };

  const closeModal = () => {
    setModalOpen(false);
  };

  useEffect(() => {
    fetchStudents();
  }, []);

  const handleRowClick = (id) => {
    if (selectedRow === id) {
      setSelectedRow(null);
    } else {
      setSelectedRow(id);
    }
  };

  const fetchStudents = async () => {
    setIsLoading(true);
    try {
      const response = await fetch('http://localhost:5000/students');
      const data = await response.json();
      if (response.ok) {
        setStudents(data);
      } else {
        throw new Error(data.error || 'An error occurred while fetching data');
      }
    } catch (error) {
      setError('Error fetching students: ' + error.message);
    } finally {
      setIsLoading(false);
    }
  };

  // Search functionality
  const handleSearch = (event) => {
    setSearchQuery(event.target.value);
    setCurrentPage(1);
  };

  const filteredStudents = students.filter((student) => {
    const searchTerms = searchQuery.toLowerCase().split(',').map((term) => term.trim());
    const studentValues = Object.values(student).map((value) => value.toString().toLowerCase());

    return searchTerms.every((term) => studentValues.some((value) => value.includes(term)));
  });

  // Sorting functionality
  const handleSort = (column) => {
    if (sortColumn === column) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortColumn(column);
      setSortDirection('asc');
    }
  };

  const sortedStudents = filteredStudents.sort((a, b) => {
    if (sortColumn) {
      const valueA = a[sortColumn].toString().toLowerCase();
      const valueB = b[sortColumn].toString().toLowerCase();

      if (valueA < valueB) {
        return sortDirection === 'asc' ? -1 : 1;
      }
      if (valueA > valueB) {
        return sortDirection === 'asc' ? 1 : -1;
      }
    }
    return 0;
  });

  // Pagination logic
  const indexOfLastStudent = currentPage * studentsPerPage;
  const indexOfFirstStudent = indexOfLastStudent - studentsPerPage;
  const currentStudents = sortedStudents.slice(indexOfFirstStudent, indexOfLastStudent);

  const paginate = (pageNumber) => setCurrentPage(pageNumber);

  const totalPages = Math.ceil(sortedStudents.length / studentsPerPage);

  const getPageButtons = () => {
    const buttons = [];

    if (totalPages <= 5) {
      for (let i = 1; i <= totalPages; i++) {
        buttons.push(
          <button
            key={i}
            onClick={() => paginate(i)}
            className={`px-4 py-2 mr-2 ${
              currentPage === i ? 'bg-[#2D5990] text-white' : 'bg-gray-200 hover:bg-gray-400'
            } rounded-full transition-all duration-300`}
          >
            {i}
          </button>
        );
      }
    } else {
      buttons.push(
        <button
          key={1}
          onClick={() => paginate(1)}
          className={`px-4 py-2 mr-2 ${
            currentPage === 1 ? 'bg-[#2D5990] text-white' : 'bg-gray-200 hover:bg-gray-400'
          } rounded-full transition-all duration-300`}
        >
          1
        </button>
      );

      if (currentPage > 3) {
        buttons.push(<span key="ellipsis1" className="px-4 py-2 mr-2">...</span>);
      }

      if (currentPage > 2) {
        buttons.push(
          <button
            key={currentPage - 1}
            onClick={() => paginate(currentPage - 1)}
            className="px-4 py-2 mr-2 bg-gray-200 hover:bg-gray-400 rounded-full transition-all duration-300"
          >
            {currentPage - 1}
          </button>
        );
      }

      if (currentPage !== 1 && currentPage !== totalPages) {
        buttons.push(
          <button
            key={currentPage}
            onClick={() => paginate(currentPage)}
            className="px-4 py-2 mr-2 bg-[#2D5990] text-white rounded-full transition-all duration-300"
          >
            {currentPage}
          </button>
        );
      }

      if (currentPage < totalPages - 1) {
        buttons.push(
          <button
            key={currentPage + 1}
            onClick={() => paginate(currentPage + 1)}
            className="px-4 py-2 mr-2 bg-gray-200 hover:bg-gray-400 rounded-full transition-all duration-300"
          >
            {currentPage + 1}
          </button>
        );
      }

      if (currentPage < totalPages - 2) {
        buttons.push(<span key="ellipsis2" className="px-4 py-2 mr-2">...</span>);
      }

      buttons.push(
        <button
          key={totalPages}
          onClick={() => paginate(totalPages)}
          className={`px-4 py-2 mr-2 ${
            currentPage === totalPages ? 'bg-[#2D5990] text-white' : 'bg-gray-200 hover:bg-gray-400'
          } rounded-full transition-all duration-300`}
        >
          {totalPages}
        </button>
      );
    }

    return buttons;
  };

  if (isLoading) {
    return (
      <div className="fixed top-0 left-0 right-0 bottom-0 w-full h-screen z-50 overflow-hidden bg-gray-700 opacity-75 flex flex-col items-center justify-center">
        <div className="loader ease-linear rounded-full border-4 border-t-4 border-gray-200 h-12 w-12 mb-4"></div>
        <h2 className="text-center text-white text-xl font-semibold">Loading...</h2>
        <p className="w-1/3 text-center text-white">This may take a few seconds, please don't close this page.</p>
      </div>
    );
  }
  if (error) return <div>{error}</div>;

  return (
    <div>
      <Navbar />
      <div className="bg-gradient-to-br from-blue-100 to-blue-200 rounded-3xl m-1 md:mx-6 shadow-lg">
        <div className="px-4 py-6 md:px-32">
          <div className="relative flex flex-col md:flex-row items-center justify-between mb-1 md:mb-4 space-y-2 md:space-y-0">
            <div className="flex-none w-full md:w-auto">
              <input
                type="text"
                placeholder="Search..."
                value={searchQuery}
                onChange={handleSearch}
                className="w-full md:w-auto px-4 py-1 md:py-2 bg-white border border-gray-300 rounded-full text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-300"
              />
            </div>
  
            <div className="w-full md:absolute md:left-1/2 md:transform md:-translate-x-1/2 md:w-auto">
              <h2 className="text-md md:text-2xl font-bold text-center md:text-left text-[#2D5990]">UPDATE STUDENT</h2>
            </div>
  
            <div className="flex-none w-full md:w-auto">
              <div className="flex justify-center md:inline-flex md:text-base text-xs">{getPageButtons()}</div>
            </div>
          </div>
  
          <div className="overflow-x-auto">
            <table className="w-full table-auto bg-white border-collapse border border-gray-500">
              <thead className="bg-[#2D5990] text-white">
                <tr>
                  <th
                    className="px-2 py-2 text-center border-b border-gray-600 border-r cursor-pointer text-xs md:text-base"
                    onClick={() => handleSort('surName')}
                  >
                    Student Name {sortColumn === 'surName' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}
                  </th>
                  <th
                    className="px-2 py-2 text-center border-b border-gray-600 border-r cursor-pointer text-xs md:text-base"
                    onClick={() => handleSort('parentName')}
                  >
                    Parent Name {sortColumn === 'parentName' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}
                  </th>
                  <th
                    className="px-2 py-2 text-center border-b border-gray-600 border-r cursor-pointer text-xs md:text-base"
                    onClick={() => handleSort('applicationNumber')}
                  >
                    Application Number {sortColumn === 'applicationNumber' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}
                  </th>
                  <th
                    className="px-2 py-2 text-center border-b border-gray-600 border-r cursor-pointer text-xs md:text-base"
                    onClick={() => handleSort('batch')}
                  >
                    Batch {sortColumn === 'batch' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}
                  </th>
                  <th
                    className="px-2 py-2 text-center border-b border-gray-600 border-r cursor-pointer text-xs md:text-base"
                    onClick={() => handleSort('primaryContact')}
                  >
                    Primary Contact {sortColumn === 'primaryContact' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}
                  </th>
                  <th className="px-2 py-2 text-center border-b border-gray-600 cursor-pointer text-xs md:text-base">Upload Photo</th>
                </tr>
              </thead>
              <tbody>
                {currentStudents.map((student) => (
                  <tr
                    key={student._id}
                    className={`cursor-pointer ${
                      selectedRow === student._id ? 'bg-gray-700 text-white' : 'even:bg-gray-200 hover:bg-gray-400'
                    } transition-all duration-300`}
                    onClick={() => handleRowClick(student._id)}
                  >
                    <td className="px-2 py-1 md:py-2 border-b border-gray-600 border-r md:text-base text-xs">{student.surName} {student.firstName}</td>
                    <td className="px-2 py-1 md:py-2 border-b border-gray-600 border-r md:text-base text-xs">{student.parentName}</td>
                    <td className="px-2 py-1 md:py-2 border-b border-gray-600 border-r md:text-base text-xs">{student.applicationNumber}</td>
                    <td className="px-2 py-1 md:py-2 border-b border-gray-600 border-r md:text-base text-xs">{student.batch}</td>
                    <td className="px-2 py-1 md:py-2 border-b border-gray-600 border-r md:text-base text-xs">{student.primaryContact}</td>
                    <td className="px-2 py-1 md:py-2 border-b border-gray-600 text-center">
                      <button 
                        className="btn btn-sm text-white rounded-full transition-all duration-300 bg-[#00A0E3] hover:bg-[#2D5990] transform hover:scale-105"
                        onClick={() => handleUploadClick(student)}
                      >
                        Upload Photo
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
          <div className="mt-4">
            <div className="text-center">
              <div className="flex justify-center">{getPageButtons()}</div>
            </div>
          </div>
          {modalOpen && (
            <UploadModal
              student={currentStudent}
              closeModal={closeModal}
              isOpen={modalOpen}
            />
          )}
        </div>
      </div>
    </div>
  );
};

export default UpdateStudent;


 

========== FILE: frontend/src/components/Modal.js ==========

// Modal.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { FaTimes } from 'react-icons/fa';

const Modal = ({ isOpen, onClose, branches }) => {
  const [modalBranch, setModalBranch] = useState('');
  const [teacherCount, setTeacherCount] = useState(0);
  const [studentCount, setStudentCount] = useState(0);
  const [confirmReassign, setConfirmReassign] = useState(false);
  const [teachers, setTeachers] = useState([]);
  const [selectedTeachers, setSelectedTeachers] = useState([]);

  useEffect(() => {
    if (!isOpen) {
      // Reset the modal state when it is closed
      setModalBranch('');
      setTeacherCount(0);
      setStudentCount(0);
      setConfirmReassign(false);
      setTeachers([]);
      setSelectedTeachers([]);
    }
  }, [isOpen]);

  if (!isOpen) return null;

  const handleOutsideClick = (e) => {
    if (e.target === e.currentTarget) {
      onClose();
    }
  };

  const handleModalBranchChange = async (event) => {
    setModalBranch(event.target.value);
  
    try {
      const teacherResponse = await axios.get(
        `http://localhost:5000/teachers/branch/${event.target.value}`
      );
      const studentResponse = await axios.get(
        `http://localhost:5000/students/count-by-branch/${event.target.value}`
      );
  
      // Filter teachers with role 'teacher'
      const filteredTeachers = teacherResponse.data.filter((teacher) => teacher.role === 'teacher');
  
      setTeacherCount(filteredTeachers.length);
      setStudentCount(studentResponse.data.count);
    } catch (error) {
      console.error('Error fetching counts:', error);
    }
  };
  

  const handleReassignClick = async () => {
    try {
      const response = await axios.get(`http://localhost:5000/teachers/branch/${modalBranch}`);
      const filteredTeachers = response.data.filter((teacher) => teacher.role === 'teacher');
      setTeachers(filteredTeachers);
      setConfirmReassign(true);
    } catch (error) {
      console.error('Error fetching teachers:', error);
    }
  };

  const handleConfirmReassign = () => {
    setConfirmReassign(false);
  };

  const handleCancelReassign = () => {
    setConfirmReassign(false);
  };

  const handleTeacherSelect = (event) => {
    const selectedOptions = Array.from(event.target.selectedOptions, (option) => option.value);
    const selectedTeacherObjects = selectedOptions.map((teacherId) =>
      teachers.find((teacher) => teacher._id === teacherId)
    );
    setSelectedTeachers(selectedTeacherObjects);
  };

  const handleConfirmReassignWithSelectedTeachers = async () => {
    try {
      const response = await axios.post('http://localhost:5000/sessions/reassign', {
        branch: modalBranch,
        batch: '2024-2026',
        teachers: selectedTeachers,
      });
      console.log(response.data);
    } catch (error) {
      console.error('Error:', error);
    }
  };

  return (
    <div
      className="fixed inset-0 flex items-center justify-center z-50 bg-black bg-opacity-50"
      onClick={handleOutsideClick}
    >
      <div className="bg-white rounded-lg shadow-lg p-6 w-1/3 relative">
        <button
          className="absolute top-4 right-4 text-gray-600 hover:text-gray-900"
          onClick={onClose}
        >
          <FaTimes size={24} />
        </button>
        <div className="pt-8 pr-4 space-y-6">
          <div className="flex items-center space-x-4">
            <label className="text-lg font-medium text-[#2D5990] w-1/3">
              Select Branch:
            </label>
            <select
              value={modalBranch}
              onChange={handleModalBranchChange}
              className="flex-grow border-2 border-[#00A0E3] bg-white rounded-lg p-3 focus:outline-none focus:ring-2 focus:ring-[#00A0E3] transition-all duration-200"
            >
              <option value="">Select Branch</option>
              {branches.map((branch) => (
                <option key={branch._id} value={branch.branchCode}>
                  {branch.branchCode}
                </option>
              ))}
            </select>
          </div>

          {modalBranch && (
            <div className="bg-gradient-to-r from-yellow-50 to-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 rounded-lg shadow-md">
              <p className="font-medium">Branch Statistics:</p>
              <p>
                Teachers: <span className="font-bold">{teacherCount}</span>
              </p>
              <p>
                Students: <span className="font-bold">{studentCount}</span>
              </p>
            </div>
          )}

          {confirmReassign ? (
            <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded-lg shadow-md">
              <p className="font-medium">
                Are you sure you want to re-assign sessions? This makes major irreversible changes in the application!!
              </p>
              <div className="flex justify-end space-x-4 mt-4">
                <button
                  className="bg-green-500 text-white py-2 px-4 rounded-lg hover:bg-green-700"
                  onClick={handleConfirmReassign}
                >
                  Yes
                </button>
                <button
                  className="bg-red-500 text-white py-2 px-4 rounded-lg hover:bg-red-700"
                  onClick={handleCancelReassign}
                >
                  No
                </button>
              </div>
            </div>
          ) : (
            <>
              <button
                className={`w-full bg-[#2D5990] text-white font-medium py-3 px-6 rounded-lg hover:bg-[#00A0E3] focus:outline-none focus:ring-2 focus:ring-[#00A0E3] transition-all duration-300 ${
                  modalBranch ? 'cursor-pointer' : 'cursor-not-allowed opacity-50'
                }`}
                disabled={!modalBranch}
                onClick={handleReassignClick}
              >
                Reassign Session
              </button>

              {teachers.length > 0 && (
                <>
                  <div className="mt-6">
                    <label className="text-lg font-medium text-[#2D5990]">Select Teachers:</label>
                    <select
                      multiple
                      value={selectedTeachers.map((teacher) => teacher._id)}
                      onChange={handleTeacherSelect}
                      className="w-full h-32 border-2 border-[#00A0E3] bg-white rounded-lg p-3 focus:outline-none focus:ring-2 focus:ring-[#00A0E3]"
                    >
                      {teachers.map((teacher) => (
                        <option key={teacher._id} value={teacher._id}>
                          {teacher.name}
                        </option>
                      ))}
                    </select>
                  </div>
                  {selectedTeachers.length > 0 && (
                    <div className="mt-4">
                      <h3 className="text-lg font-medium text-[#2D5990]">Selected Teachers:</h3>
                      <ul className="list-disc list-inside">
                        {selectedTeachers.map((teacher) => (
                          <li key={teacher._id}>{teacher.name}</li>
                        ))}
                      </ul>
                    </div>
                  )}
                  <button
                    className="w-full bg-[#2D5990] text-white font-medium py-3 px-6 rounded-lg hover:bg-[#00A0E3] focus:outline-none focus:ring-2 focus:ring-[#00A0E3] transition-all duration-300 mt-4"
                    onClick={handleConfirmReassignWithSelectedTeachers}
                  >
                    Confirm Reassign with the Selected Teachers
                  </button>
                </>
              )}
            </>
          )}
        </div>
      </div>
    </div>
  );
};

export default Modal;


 

========== FILE: frontend/src/components/UpcomingSessions.js ==========

import React, { useState } from 'react';
import Navbar from './Navbar';

// Dummy data for students
const students = [
  { id: 1, name: 'Alice Johnson', imageUrl: '/profileicon.jpeg' },
  { id: 2, name: 'Bob Smith', imageUrl: '/profileicon.jpeg' },
  { id: 3, name: 'Charlie Brown', imageUrl: '/profileicon.jpeg' },
  { id: 4, name: 'Diana Prince', imageUrl: '/profileicon.jpeg' },
  { id: 5, name: 'Edward King', imageUrl: '/profileicon.jpeg' },
  { id: 6, name: 'Fiona Shrek', imageUrl: '/profileicon.jpeg' },
  { id: 7, name: 'Alice Johnson', imageUrl: '/profileicon.jpeg' },
  { id: 8, name: 'Bob Smith', imageUrl: '/profileicon.jpeg' },
  { id: 9, name: 'Charlie Brown', imageUrl: '/profileicon.jpeg' },
  { id: 10, name: 'Diana Prince', imageUrl: '/profileicon.jpeg' },
  { id: 11, name: 'Edward King', imageUrl: '/profileicon.jpeg' },
  { id: 12, name: 'Fiona Shrek', imageUrl: '/profileicon.jpeg' },
  // Add more students as needed
];

const UpcomingSessions = () => {
  const [hoveredStudent, setHoveredStudent] = useState(null);

  const handleMouseEnter = (student) => {
    setHoveredStudent(student);
  };

  const handleMouseLeave = () => {
    setHoveredStudent(null);
  };

  return (
    <div>
      <Navbar />
      <div className="container py-8 px-4 sm:px-6 md:px-8 lg:px-10 xl:px-32 bg-gradient-to-br from-blue-100 to-blue-200 mx-auto my-6 rounded-3xl shadow-lg">
        <h1 className="text-3xl md:text-4xl lg:text-5xl font-bold mb-8 text-center text-[#2D5990] flex items-center justify-center">
          Upcoming Assessment Sessions
        </h1>
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6">
          {students.map(student => (
            <div
              key={student.id}
              className="bg-white rounded-xl shadow-xl overflow-hidden transition-all duration-300 transform hover:scale-105 hover:shadow-2xl"
              onMouseEnter={() => handleMouseEnter(student)}
              onMouseLeave={handleMouseLeave}
            >
              <div>
                <img
                  src={student.imageUrl}
                  alt={student.name}
                  className="w-full h-48 object-cover"
                />
              </div>
              <div className="p-4">
                <h2 className="text-lg md:text-xl font-bold text-[#2D5990] mb-1">{student.name}</h2>
                  <p className="text-sm md:text-base text-gray-600 bg-gray-100 rounded-lg p-2">
                    Next week, this student will be listed in the Pending sessions.
                  </p>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default UpcomingSessions;

 

========== FILE: frontend/src/components/UploadModal.js ==========

import React, { useRef } from 'react';

const UploadModal = ({ student, closeModal }) => {
    const fileInputRef = useRef(null);

    const handleFileUpload = () => {
        fileInputRef.current.click(); // Simulates click on hidden file input
    };

    const handleFileChange = async (event) => {
        const file = event.target.files[0];
        if (!file) return;
    
        // FormData to append the file to send it via HTTP
        const formData = new FormData();
        formData.append('file', file);
        formData.append('applicationNumber', student.applicationNumber);
    
        // Correct API endpoint where the server handles the file upload
        const uploadUrl = 'http://localhost:5000/upload-to-drive'; 
    
        try {
            const response = await fetch(uploadUrl, {
                method: 'POST',
                body: formData,
            });
    
            if (response.ok) {
                const result = await response.json();
                console.log('File uploaded successfully:', result);
                alert('File uploaded successfully!');
            } else {
                // Handling server errors or unsuccessful uploads
                throw new Error('Failed to upload file');
            }
        } catch (error) {
            console.error('Error uploading file:', error);
            alert('Error uploading file: ' + error.message);
        }
    };
    
    

    return (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center">
            <div className="bg-white p-8 rounded-3xl relative">
                <button onClick={closeModal} className="absolute top-3 right-3 text-lg text-gray-700 hover:text-red-700">
                    <span><strong>x</strong></span>
                </button>
                <h2 className="text-lg">Upload Photo for <strong>{student.surName} {student.firstName}</strong></h2>
                <div>
                    <p className='m-2'>Application Number: <strong>{student.applicationNumber}</strong></p>
                    <p className='m-2'>Parent Name: <strong>{student.parentName}</strong></p>
                    <p className='m-2'>Phone Number: <strong>{student.primaryContact}</strong></p>
                    <p className='m-2'>Batch: <strong>{student.batch}</strong></p>
                </div>
                <div className="mt-4">
                    <button
                        className="bg-[#00A0E3] text-white px-4 py-2 mr-2 hover:bg-[#008EC3] rounded-2xl"
                        onClick={() => {}}>
                        Open Camera
                    </button>
                    <button
                        className="bg-[#00A0E3] text-white px-4 py-2 hover:bg-[#008EC3] rounded-2xl"
                        onClick={handleFileUpload}>
                        Upload File
                    </button>
                    <input
                        ref={fileInputRef}
                        type="file"
                        style={{ display: 'none' }}
                        onChange={handleFileChange}
                    />
                </div>
                <button
                    className="mt-4 px-4 py-2 bg-red-500 text-white hover:bg-red-700 rounded-2xl"
                    onClick={closeModal}>
                    Close
                </button>
            </div>
        </div>
    );
};

export default UploadModal;


 

========== FILE: frontend/src/components/LoginPage.js ==========

import React, { useState, useEffect } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import Navbar from './Navbar';
import { useAuth } from '../components/AuthContext';

const LoginPage = () => {
    const navigate = useNavigate();
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [forgotPasswordEmail, setForgotPasswordEmail] = useState('');
    const [showForgotPasswordModal, setShowForgotPasswordModal] = useState(false);
    const { login } = useAuth();

    useEffect(() => {
        const timer = setTimeout(() => {
            // Implement logout due to inactivity logic if needed
        }, 900000); // 15 mins of inactivity

        return () => clearTimeout(timer);
    }, []);

    const handleLogin = async (e) => {
        e.preventDefault();
        try {
            const response = await fetch('http://localhost:5000/teachers/login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ email, password })
            });
            const data = await response.json();
            if (response.ok) {
                login(data.teacher.name, data.teacher.role, data.teacher.branch);
                alert("Logged in Successfully");
                navigate('/dashboard', { replace: true });
            } else {
                alert(data.message);
            }
        } catch (error) {
            console.error('Error during login:', error);
            alert('Error during login');
        }
    };

    const handleForgotPassword = async (e) => {
        e.preventDefault();
        try {
            const response = await fetch('http://localhost:5000/teachers/forgot-password', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ email: forgotPasswordEmail })
            });
            const data = await response.json();
            if (response.ok) {
                alert('Password reset link sent to your email');
                setShowForgotPasswordModal(false);
            } else {
                alert(data.message);
            }
        } catch (error) {
            console.error('Error during password reset request:', error);
            alert('Error during password reset request');
        }
    };

    return (
        <div>
            <Navbar />
            <div className="flex items-center justify-center min-h-screen bg-gray-200">
                <div className="bg-white shadow-lg rounded-lg">
                    <div className="flex flex-col items-center">
                        <div className="bg-[#2D5990] rounded-lg mb-4 w-80 h-32">
                            <img src="/9logo.jpg" alt="Nine Education Logo" className="rounded-xl p-4 mb-4 w-80 h-32" />
                        </div>
                        <form onSubmit={handleLogin} className='p-4'>
                            <div className="mb-4 w-60">
                                <label htmlFor="email" className="block text-lg font-medium text-gray-700">Email</label>
                                <input type="email" id="email" value={email} onChange={e => setEmail(e.target.value)} className="bg-gray-300 h-12 mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:bg-white focus:border-indigo-500 focus:ring-2 focus:ring-indigo-500 sm:text-lg" placeholder="example@gmail.com" />
                            </div>
                            <div className="mb-6 w-60">
                                <label htmlFor="password" className="block text-lg font-medium text-gray-700">Password</label>
                                <input type="password" id="password" value={password} onChange={e => setPassword(e.target.value)} className="bg-gray-300 h-12 mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:bg-white focus:border-indigo-500 focus:ring-2 focus:ring-indigo-500 sm:text-lg" />
                            </div>
                            <button type="submit" className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-[#00A0E3] hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                                Log in
                            </button>
                            <a href="#" onClick={() => setShowForgotPasswordModal(true)} className="mt-2 text-sm text-[#2D5990] hover:text-[#00A0E3]">Forgot password?</a>
                        </form>
                    </div>
                </div>
            </div>

            {showForgotPasswordModal && (
                <div className="fixed inset-0 flex items-center justify-center bg-gray-800 bg-opacity-75">
                    <div className="bg-white p-6 rounded-lg shadow-lg">
                        <h2 className="text-2xl font-bold mb-4">Forgot Password</h2>
                        <form onSubmit={handleForgotPassword}>
                            <div className="mb-4">
                                <label htmlFor="forgotPasswordEmail" className="block text-lg font-medium text-gray-700">Email</label>
                                <input type="email" id="forgotPasswordEmail" value={forgotPasswordEmail} onChange={e => setForgotPasswordEmail(e.target.value)} className="bg-gray-300 h-12 mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:bg-white focus:border-indigo-500 focus:ring-2 focus:ring-indigo-500 sm:text-lg" placeholder="example@gmail.com" />
                            </div>
                            <button type="submit" className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-[#00A0E3] hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                                Send Reset Link
                            </button>
                            <button type="button" onClick={() => setShowForgotPasswordModal(false)} className="w-full flex justify-center py-2 px-4 mt-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-gray-600 hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500">
                                Cancel
                            </button>
                        </form>
                    </div>
                </div>
            )}
        </div>
    );
};

export default LoginPage;


 

========== FILE: frontend/src/components/AddAttendance.js ==========

import React, { useState } from 'react';
import * as XLSX from 'xlsx';
import Navbar from './Navbar';

const AddAttendance = () => {
  const [message, setMessage] = useState('');
  const [payload, setPayload] = useState(null);

  const handleFileUpload = (e) => {
    const file = e.target.files[0];
    const reader = new FileReader();

    reader.onload = (event) => {
      const data = new Uint8Array(event.target.result);
      const workbook = XLSX.read(data, { type: 'array' });

      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];
      const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });

      const headers = jsonData[0];
      const requiredHeaders = ['Application Number', 'Student Name', 'FN/Total', 'AN/Total'];

      // Validate headers
      for (let header of requiredHeaders) {
        if (!headers.includes(header)) {
          alert('Excel file has missing fields, please check.');
          return;
        }
      }

      // Prepare the payload
      const dataPayload = jsonData.slice(1).map(row => ({
        applicationNumber: row[0],
        studentName: row[1],
        fnTotal: row[2],
        anTotal: row[3]
      }));

      console.log(dataPayload);
      setPayload(dataPayload);
      setMessage('File successfully processed and payload prepared.');
    };

    reader.readAsArrayBuffer(file);
  };

  return (
    <div className="add-attendance">
      <Navbar />
      <div className='container mx-auto px-4 bg-gray-400 rounded-3xl min-h-screen'>
        <h2 className="text-xl md:text-2xl font-bold m-2 mb-4 text-center">Add Attendance</h2>
        <div className="text-center my-2 text-xl">
          <p>Welcome! Please upload an Excel file to add attendance records.</p>
          <p>Ensure the Excel file follows the format below:</p>
          <table className='mx-auto border-collapse border border-gray-800 text-xs'>
            <thead>
              <tr className='bg-gray-200'>
                <th className='border border-gray-800 px-2 py-1'>Application Number</th>
                <th className='border border-gray-800 px-2 py-1'>Student Name</th>
                <th className='border border-gray-800 px-2 py-1'>FN/Total</th>
                <th className='border border-gray-800 px-2 py-1'>AN/Total</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td className='border border-gray-800 px-2 py-1'>KPL2024900001</td>
                <td className='border border-gray-800 px-2 py-1'>Ramesh</td>
                <td className='border border-gray-800 px-2 py-1'>5/6</td>
                <td className='border border-gray-800 px-2 py-1'>5/6</td>
              </tr>
              <tr className='bg-gray-100'>
                <td className='border border-gray-800 px-2 py-1'>KPL2024900002</td>
                <td className='border border-gray-800 px-2 py-1'>Suresh</td>
                <td className='border border-gray-800 px-2 py-1'>4/6</td>
                <td className='border border-gray-800 px-2 py-1'>3/6</td>
              </tr>
              <tr>
                <td className='border border-gray-800 px-2 py-1'>KPL2024900003</td>
                <td className='border border-gray-800 px-2 py-1'>Rahul</td>
                <td className='border border-gray-800 px-2 py-1'>5/6</td>
                <td className='border border-gray-800 px-2 py-1'>5/6</td>
              </tr>
              <tr className='bg-gray-100'>
                <td className='border border-gray-800 px-2 py-1'>KPL2024900004</td>
                <td className='border border-gray-800 px-2 py-1'>Shreya</td>
                <td className='border border-gray-800 px-2 py-1'>2/6</td>
                <td className='border border-gray-800 px-2 py-1'>2/6</td>
              </tr>
              <tr>
                <td className='border border-gray-800 px-2 py-1'>KPL2024900005</td>
                <td className='border border-gray-800 px-2 py-1'>Aryan</td>
                <td className='border border-gray-800 px-2 py-1'>4/6</td>
                <td className='border border-gray-800 px-2 py-1'>4/6</td>
              </tr>
              <tr className='bg-gray-100'>
                <td className='border border-gray-800 px-2 py-1'>KPL2024900006</td>
                <td className='border border-gray-800 px-2 py-1'>Vikram</td>
                <td className='border border-gray-800 px-2 py-1'>6/6</td>
                <td className='border border-gray-800 px-2 py-1'>3/6</td>
              </tr>
              <tr>
                <td className='border border-gray-800 px-2 py-1'>KPL2024900007</td>
                <td className='border border-gray-800 px-2 py-1'>Shastri</td>
                <td className='border border-gray-800 px-2 py-1'>6/6</td>
                <td className='border border-gray-800 px-2 py-1'>6/6</td>
              </tr>
            </tbody>
          </table>
        </div>
        <div className='text-center my-4'>
          <p className="mb-2 font-bold">Upload here:</p>
          <input 
            type="file" 
            accept=".xlsx, .xls" 
            onChange={handleFileUpload} 
            className="px-4 py-2 bg-[#00A0E3] text-white rounded cursor-pointer"
          />
        </div>
        {message && <p className="text-center mt-4 text-green-500">{message}</p>}
        {payload && <pre className="bg-gray-200 p-4 mt-4 rounded">{JSON.stringify(payload, null, 2)}</pre>}
      </div>
    </div>
  );
};

export default AddAttendance;


 

========== FILE: frontend/src/components/StudentListModal.js ==========

// src/components/StudentListModal.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const StudentListModal = ({ isOpen, onClose, clusterID }) => {
  const [students, setStudents] = useState([]);

  useEffect(() => {
    if (clusterID) {
      const fetchStudents = async () => {
        try {
          const response = await axios.get(`http://localhost:5000/students/cluster/${clusterID}`);
          setStudents(response.data);
        } catch (error) {
          console.error('Error fetching students', error);
        }
      };

      fetchStudents();
    }
  }, [clusterID]);

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-gray-800 bg-opacity-50">
      <div className="bg-white p-4 rounded-lg max-w-lg w-full">
        <button onClick={onClose} className="float-right text-gray-500">X</button>
        <h2 className="text-2xl font-bold mb-4">Students in Cluster {clusterID}</h2>
        <ul>
          {students.map((student) => (
            <li key={student._id} className="border-b py-2">
              {student.firstName} {student.surName}
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
};

export default StudentListModal;


 

========== FILE: frontend/src/components/CompletedSessions.js ==========

import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import Navbar from './Navbar';

// Dummy data for students
const students = [
  { id: 1, name: 'Alice Johnson', imageUrl: '/profileicon.jpeg'},
  { id: 2, name: 'Bob Smith', imageUrl: '/profileicon.jpeg'},
  { id: 3, name: 'Charlie Brown', imageUrl: '/profileicon.jpeg'},
  { id: 4, name: 'Diana Prince', imageUrl: '/profileicon.jpeg'},
  { id: 5, name: 'Edward King', imageUrl: '/profileicon.jpeg'},
  { id: 6, name: 'Fiona Shrek', imageUrl: '/profileicon.jpeg'},
  { id: 7, name: 'George Washington', imageUrl: '/profileicon.jpeg'},
  { id: 8, name: 'Hannah Montana', imageUrl: '/profileicon.jpeg'},
  { id: 9, name: 'Ian Curtis', imageUrl: '/profileicon.jpeg'},
  { id: 10, name: 'Jessica Jones', imageUrl: '/profileicon.jpeg'},
  { id: 11, name: 'Kyle Reese', imageUrl: '/profileicon.jpeg'},
  { id: 12, name: 'Laura Palmer', imageUrl: '/profileicon.jpeg'},
  { id: 13, name: 'Michael Scott', imageUrl: '/profileicon.jpeg'},
  { id: 14, name: 'Nancy Drew', imageUrl: '/profileicon.jpeg'},
  { id: 15, name: 'Oliver Queen', imageUrl: '/profileicon.jpeg' }
  // Add more students as needed
];

const CompletedSessions = () => {
  const navigate = useNavigate();
  const [hoveredStudent, setHoveredStudent] = useState(null);

  const handleViewEdit = (name) => {
    navigate(`/assessment/${name}`);
  };

  const handleMouseEnter = (student) => {
    setHoveredStudent(student);
  };

  const handleMouseLeave = () => {
    setHoveredStudent(null);
  };

  return (
    <div>
      <Navbar />
      <div className="container py-8 px-4 sm:px-6 md:px-8 lg:px-10 xl:px-32 bg-gradient-to-br from-blue-100 to-blue-200 mx-auto my-6 rounded-3xl shadow-lg">
        <h1 className="text-3xl md:text-4xl lg:text-5xl font-bold mb-8 text-center text-[#2D5990] flex items-center justify-center">
          Completed Assessment Sessions
        </h1>
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6">
          {students.map(student => (
            <div
              key={student.id}
              className="bg-white rounded-xl shadow-xl overflow-hidden transition-all duration-300 transform hover:scale-105 hover:shadow-2xl"
              onMouseEnter={() => handleMouseEnter(student)}
              onMouseLeave={handleMouseLeave}
            >
              <div>
                <img
                  src={student.imageUrl}
                  alt={student.name}
                  className="w-full h-48 object-cover"
                />
              </div>
              <div className="p-4">
                <h2 className="text-lg md:text-xl font-bold text-[#2D5990] mb-1">{student.name}</h2> 
                <button
                  onClick={() => handleViewEdit(student.name)}
                  className="w-full bg-gradient-to-r from-[#2D5990] to-[#00A0E3] hover:from-[#00A0E3] hover:to-[#2D5990] text-white font-bold py-2 px-4 rounded-full focus:outline-none focus:shadow-outline transition-colors duration-300 transform hover:scale-105"
                >
                  View or Edit Assessment
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default CompletedSessions;

 

========== FILE: frontend/src/components/Navbar.js ==========

import React, { useState } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import '../Navbar.css';
import Confetti from 'react-confetti';

function Navbar() {
    const navigate = useNavigate();
    const location = useLocation();
    const [isMenuOpen, setIsMenuOpen] = useState(false);
    const [isAccordionOpen, setIsAccordionOpen] = useState(false);
    const [isProfileHovered, setIsProfileHovered] = useState(false);

    const handleLogout = () => {
        sessionStorage.clear();
        alert("Logged out successfully!");
        navigate('/login', { replace: true });
    };

    const isLoggedIn = sessionStorage.getItem('name') && sessionStorage.getItem('role');
    const name = sessionStorage.getItem('name');
    const role = sessionStorage.getItem('role');

    const navItems = [
        { name: 'Dashboard', path: '/dashboard', roles: ['admin', 'teacher', 'vice president', 'director'] },
        { name: 'Update Student', path: '/updateStudent', roles: ['admin', 'director'] },
        { name: 'Add User', path: '/addTeacher', roles: ['admin', 'director', 'vice president'] },
        { name: 'Sessions & Allotments', path: '/sessionsAndAllotments', roles: ['admin', 'director'] },
        { name: 'Pending Sessions', path: '/pendingSessions', roles: ['teacher'] },
        { name: 'Completed Sessions', path: '/completedSessions', roles: ['teacher'] },
        { name: 'Upcoming Sessions', path: '/upcomingSessions', roles: ['teacher'] },
        { name: 'View Feedbacks', path: '/viewFeedbacks', roles: ['admin', 'vice president', 'director'] },
    ];

    const filteredNavItems = navItems.filter(item => item.roles.includes(role));

    const toggleAccordion = () => {
        setIsAccordionOpen(!isAccordionOpen);
    };

    const handleProfileMouseEnter = () => {
        setIsProfileHovered(true);
    };

    const handleProfileMouseLeave = () => {
        setIsProfileHovered(false);
    };

    const [isLogoHovered, setIsLogoHovered] = useState(false);

    const handleLogoMouseEnter = () => {
        setIsLogoHovered(true);
    };

    const handleLogoMouseLeave = () => {
        setIsLogoHovered(false);
    };

    return (
        <div>
            <div className="bg-[#2D5990] text-white shadow-2xl rounded-b-xl flex items-center justify-between px-4 h-16 sm:h-20">
                <div className="flex-1 invisible sm:visible">
                    {isLoggedIn && <div className="w-8 h-8 sm:w-10 sm:h-10"></div>}
                </div>

                <div className="flex-1 flex justify-center relative">
                    <div
                        className="relative inline-block"
                        onMouseEnter={handleLogoMouseEnter}
                        onMouseLeave={handleLogoMouseLeave}
                    >
                        <img
                            src='/9logo.jpg'
                            alt="Nine Education IIT Academy"
                            className="h-8 md:h-16 transition-transform duration-300 transform hover:scale-105"
                        />
                        {isLogoHovered && (
                            <Confetti
                                width={250}
                                height={650}
                                numberOfPieces={300}
                                gravity={0.1}
                                recycle={false}
                                tweenDuration={1000}
                                className="absolute top-0 left-0"
                                colors={['#2D5990', '#00A0E3', '#FFFFFF']}
                            />
                        )}
                    </div>
                </div>

                <div className="flex-1 flex justify-end items-center">
                    {isLoggedIn ? (
                        <>
                            <div
                                className="relative"
                                onMouseEnter={handleProfileMouseEnter}
                                onMouseLeave={handleProfileMouseLeave}
                            >
                                <img
                                    src="/profileicon.jpeg"
                                    alt="Profile"
                                    className={`w-12 h-12 rounded-full mr-2 cursor-pointer transition-transform duration-300 transform ${isProfileHovered ? 'scale-110' : ''}`}
                                    onClick={toggleAccordion}
                                />
                                {isAccordionOpen && (
                                    <div className="absolute top-14 right-0 bg-white text-black rounded-lg shadow-xl p-4 w-48 z-50 text-xs md:text-sm">
                                        <p><strong>Name:</strong> {name}</p>
                                        <p><strong>Role:</strong> <span className='uppercase'>{role}</span></p>
                                        <button
                                            onClick={handleLogout}
                                            className="mt-4 rounded-full bg-[#2D5990] hover:bg-[#00A0E3] text-white font-medium py-2 px-4 transition-colors duration-300"
                                        >
                                            Logout
                                        </button>
                                    </div>
                                )}
                            </div>
                            <button
                                onClick={() => setIsMenuOpen(!isMenuOpen)}
                                className="ml-2 sm:hidden focus:outline-none"
                            >
                                <svg
                                    className={`w-6 h-6 fill-current transition-transform duration-300 transform ${isMenuOpen ? 'rotate-90' : ''}`}
                                    viewBox="0 0 24 24"
                                >
                                    {isMenuOpen ? (
                                        <path
                                            fillRule="evenodd"
                                            d="M18.278 16.864a1 1 0 0 1-1.414 1.414l-4.829-4.828-4.828 4.828a1 1 0 0 1-1.414-1.414l4.828-4.829-4.828-4.828a1 1 0 0 1 1.414-1.414l4.829 4.828 4.828-4.828a1 1 0 1 1 1.414 1.414l-4.828 4.829 4.828 4.828z"
                                        />
                                    ) : (
                                        <path
                                            fillRule="evenodd"
                                            d="M4 5h16a1 1 0 0 1 0 2H4a1 1 0 1 1 0-2zm0 6h16a1 1 0 0 1 0 2H4a1 1 0 1 1 0-2zm0 6h16a1 1 0 0 1 0 2H4a1 1 0 1 1 0-2z"
                                        />
                                    )}
                                </svg>
                            </button>
                        </>
                    ) : (
                        <div className="w-8 h-8 sm:w-10 sm:h-10 invisible"></div>
                    )}
                </div>
            </div>
            {isLoggedIn && (
                <div className={`${isMenuOpen ? 'block' : 'hidden'} sm:flex justify-center`}>
                    <div className="grid grid-cols-2 gap-4 p-4 sm:flex sm:space-x-4">
                        {filteredNavItems.map((item, index) => (
                            <button
                                key={index}
                                onClick={() => {
                                    navigate(item.path);
                                    setIsMenuOpen(false);
                                }}
                                className={`px-4 py-2 text-white font-bold rounded-full transition-colors duration-300 ${location.pathname === item.path ? 'bg-[#2D5990] hover:bg-[#2D5990] active-button' : 'bg-[#00A0E3] hover:bg-[#2D5990]'}`}
                            >
                                {item.name}
                            </button>
                        ))}
                    </div>
                </div>
            )}
        </div>
    );
}

export default Navbar;

 

========== FILE: frontend/src/components/PendingSessions.js ==========

import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import Navbar from './Navbar';
import axios from 'axios';

const PendingStudents = () => {
  const navigate = useNavigate();
  const [hoveredStudent, setHoveredStudent] = useState(null);
  const [pendingStudents, setPendingStudents] = useState([]); 
  const [teacherSessions, setTeacherSessions] = useState([]);

  useEffect(() => {
    const getTeacherSessions = async () => {
      try {
        const teacherName = sessionStorage.getItem('name');
        console.log(teacherName);
        // Fetch the session information for the teacher
        const getTeacherSessionsResponse = await axios.get(`http://localhost:5000/sessions/teacher/${teacherName}`);
        console.log(getTeacherSessionsResponse.data);
        setTeacherSessions(getTeacherSessionsResponse.data)
        
      } catch (error) {
        console.error('Error fetching sessions', error);
      }
    };

    getTeacherSessions();
  }, []);

  useEffect(() => {
    const fetchPendingStudents = async () => {
      try {
        const sessionId = "66796de39ce14002d7f63bed"
        // Fetch the session information for the teacher
        const pendingStudentsResponse = await axios.get(`http://localhost:5000/students/pendingStudents/${sessionId}`);
        const pendingStudentsData = pendingStudentsResponse.data;
        setPendingStudents(pendingStudentsData)
        
      } catch (error) {
        console.error('Error fetching students', error);
      }
    };

    fetchPendingStudents();
  }, []);

  const handleAssessNow = (name, sessionId) => {
    navigate(`/assessment/${name}/${sessionId}`);
  };

  const handleMouseEnter = (student) => {
    setHoveredStudent(student);
  };

  const handleMouseLeave = () => {
    setHoveredStudent(null);
  };

  return (
    <div>
      <Navbar />
      <div className="container py-8 px-4 sm:px-6 md:px-8 lg:px-10 xl:px-32 bg-gradient-to-br from-blue-100 to-blue-200 mx-auto my-6 rounded-3xl shadow-lg">
        <h1 className="text-3xl md:text-4xl lg:text-5xl font-bold mb-8 text-center text-[#2D5990] flex items-center justify-center">
          Pending Assessment Students
        </h1>
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6">
          {pendingStudents.map(student => (
            <div
              key={student.id}
              className="bg-white rounded-xl shadow-xl overflow-hidden transition-all duration-300 transform hover:scale-105 hover:shadow-2xl"
              onMouseEnter={() => handleMouseEnter(student)}
              onMouseLeave={handleMouseLeave}
            >
              <div>
                <img
                  src={student.photo || 'default-image-url'} // Replace 'default-image-url' with a valid URL or a default image URL
                  alt={student.firstName}
                  className="w-full h-48 object-cover"
                />
              </div>
              <div className="p-4">
                <h2 className="text-lg md:text-xl font-bold text-[#2D5990] mb-1">{student.firstName} {student.surName}</h2>
                <button
                  onClick={() => handleAssessNow(student.firstName, "66796de39ce14002d7f63bed")}
                  className="w-full bg-gradient-to-r from-[#2D5990] to-[#00A0E3] hover:from-[#00A0E3] hover:to-[#2D5990] text-white font-bold py-2 px-4 rounded-full focus:outline-none focus:shadow-outline transition-colors duration-300 transform hover:scale-105"
                >
                  Assess Now
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default PendingStudents;


 

========== FILE: frontend/src/components/ViewFeedbacks.js ==========

import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import Navbar from './Navbar';

function Modal({ children, onClose }) {
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center">
      <div className="bg-white p-4 rounded max-h-screen overflow-auto">
        {children}
        <button onClick={onClose} className="mt-4 p-2 bg-[#00A0E3] text-white rounded">Close</button>
      </div>
    </div>
  );
}

function ViewFeedbacks() {
  const [students, setStudents] = useState([]);
  const [searchText, setSearchText] = useState('');
  const [editFeedback, setEditFeedback] = useState(null);
  const [editText, setEditText] = useState('');
  const [selectedFeedbacks, setSelectedFeedbacks] = useState([]);
  const [viewingDateFeedback, setViewingDateFeedback] = useState(null);
  const [selectedStudentName, setSelectedStudentName] = useState('');
  const [addingFeedback, setAddingFeedback] = useState(false);
  const [newFeedback, setNewFeedback] = useState('');
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const navigate = useNavigate();

  const fetchStudents = useCallback(async () => {
    setIsLoading(true);
    const role = sessionStorage.getItem('role');
    const userBranch = sessionStorage.getItem('branch');

    try {
        const response = await fetch('http://localhost:5000/students');
        const data = await response.json();

        // Filter students based on branch for specific roles
        let filteredStudents = data;
        if (role === 'director' || role === 'teacher' || role === 'vice president') {
            filteredStudents = data.filter(student => student.branch === userBranch);
        }

        setStudents(filteredStudents);

        if (!response.ok) {
            throw new Error(data.error || 'An error occurred while fetching data');
        }
    } catch (error) {
        setError('Error fetching students: ' + error.message);
    } finally {
        setIsLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchStudents();
  }, [fetchStudents]);

  const handleSearch = (event) => {
    const value = event.target.value.toLowerCase();
    const filteredData = students.filter(item =>
      `${item.firstName} ${item.surName}`.toLowerCase().includes(value) ||
      item.parentName.toLowerCase().includes(value) ||
      item.applicationNumber.toString().includes(value) ||
      item.branch.toLowerCase().includes(value)
    );
    setSearchText(value);
    setStudents(filteredData);
  };

  const handleEditChange = (event) => {
    setEditText(event.target.value);
  };

  const handleNewFeedbackChange = (event) => {
    setNewFeedback(event.target.value);
  };

// Update feedback by feedbackId
const saveEdit = async () => {
  if (!editFeedback || !editFeedback.feedbackId) {
    setError('Feedback ID is missing.');
    return;
  }

  const updatedFeedback = {
    feedback: editText,
    reviewer: sessionStorage.getItem('name') // Assume the reviewer might be updated as well
  };

  try {
    const response = await fetch(`http://localhost:5000/feedbacks/${editFeedback.feedbackId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(updatedFeedback)
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error || 'Failed to update feedback');
    }

    // setEditFeedback(null); // Reset after successful update
    // setViewingDateFeedback(null);
    // fetchFeedbacks(); // Refresh data
    window.location.reload();
  } catch (error) {
    setError('Error updating feedback: ' + error.message);
  }
};

  
  
  


const fetchFeedbacks = async (applicationNumber) => {
  try {
    const response = await fetch(`http://localhost:5000/feedbacks/${applicationNumber}`);
    const data = await response.json();

    if (response.ok) {
      if (data.length === 0) { // Assuming 'data' is an array
        alert("No Feedbacks given for this Student");
      }
      return data;
    } else {
      throw new Error(data.error || 'An error occurred while fetching feedback data');
    }
  } catch (error) {
    setError('Error fetching feedbacks: ' + error.message);
    return [];
  }
};

  

  const toggleFeedbackView = async (applicationNumber) => {
    const student = students.find(item => item.applicationNumber === applicationNumber);
    if (student) {
      const feedbacks = await fetchFeedbacks(applicationNumber);
      setSelectedFeedbacks(feedbacks);
      setSelectedStudentName(`${student.firstName} ${student.surName}`);
      setViewingDateFeedback(null);
      setEditFeedback(student); // Set the student being edited
    } else {
      setError('Student not found for the provided application number.');
    }
  };
  
  

  const viewFeedbackByDate = (feedback) => {
    const student = students.find(item => item.applicationNumber === feedback.applicationNumber);
    if (student) {
      setViewingDateFeedback(feedback); // This contains all feedback details, including feedbackId
      setEditText(feedback.feedback);
      setEditFeedback(feedback); // Now, editFeedback contains the entire feedback object, including feedbackId
    } else {
      setError('Student not found for the provided application number.');
    }
  };
  
  
  

  const addFeedback = (applicationNumber) => {
    const student = students.find(item => item.applicationNumber === applicationNumber);
    if (student) {
      setSelectedStudentName(`${student.firstName} ${student.surName}`);
      setAddingFeedback(true);
    } else {
      console.error('Student not found for the provided application number:', applicationNumber);
    }
  };
  
// Submit new feedback
const submitNewFeedback = async () => {
  if (!newFeedback) {
    alert("Feedback cannot be empty");
    return;
  }

  const student = students.find(item => `${item.firstName} ${item.surName}` === selectedStudentName);
  const applicationNumber = student?.applicationNumber;
  const name = sessionStorage.getItem('name'); // Ensure this is retrieved correctly

  if (!applicationNumber) {
    console.error('Application number not found for student:', selectedStudentName);
    return;
  }

  const payload = {
    studentName: selectedStudentName,
    feedback: newFeedback,
    date: new Date().toISOString(), // current date and time
    applicationNumber: applicationNumber,
    reviewer: name
  };

  try {
    const response = await fetch('http://localhost:5000/feedbacks', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(payload)
    });

    if (!response.ok) {
      throw new Error('Failed to submit feedback');
    }
    await fetchAndSendEmail(student.branch);

    fetchFeedbacks(); // Refresh the students list to include new feedback
    setAddingFeedback(false);
    setNewFeedback('');
  } catch (error) {
    console.error('Error:', error);
  }
};

// Fetch director's Gmail and send an email
const fetchAndSendEmail = async (branch) => {
    try {
        const gmailResponse = await fetch(`http://localhost:5000/teachers/director-gmail/${branch}`);
        const { gmail } = await gmailResponse.json();

        if (gmailResponse.ok) {
            // Send an email notification to the director's Gmail
            // await fetch('http://localhost:5000/send-email', {
            //     method: 'POST',
            //     headers: {
            //         'Content-Type': 'application/json'
            //     },
            //     body: JSON.stringify({
            //         to: gmail,
            //         subject: 'New Feedback Submitted',
            //         body: `A new feedback has been submitted by for student ${selectedStudentName}.`
            //     })
            // });
            console.log('Email sending triggered: ',{gmail});
        } else {
            throw new Error('Failed to fetch director’s Gmail');
        }
    } catch (error) {
        console.error('Error sending email:', error);
    }
};

  
  
  

  const addAssessment = (applicationNumber) => {
    const student = students.find(item => item.applicationNumber === applicationNumber);
    if (student) {
      const studentName = `${student.firstName} ${student.surName}`;
      navigate(`/eca/${applicationNumber}/${studentName}`);
    } else {
      console.error('Student not found for the provided application number:', applicationNumber);
    }
  };
  

  if (isLoading) {
    return (
      <div className="fixed top-0 left-0 right-0 bottom-0 w-full h-screen z-50 overflow-hidden bg-gray-700 opacity-75 flex flex-col items-center justify-center">
        <div className="loader ease-linear rounded-full border-4 border-t-4 border-gray-200 h-12 w-12 mb-4"></div>
        <h2 className="text-center text-white text-xl font-semibold">Loading...</h2>
        <p className="w-1/3 text-center text-white">This may take a few seconds, please don't close this page.</p>
      </div>
    );
  }
  if (error) return <div>{error}</div>;

  const role = sessionStorage.getItem('role');

  return (
    <div className='bg-white min-h-screen'>
      <Navbar />
      <div className="bg-gray-400 rounded-3xl mx-2 md:mx-6 px-4 md:px-32 py-6">
        <div className="relative flex flex-col items-center justify-between mb-4 space-y-4">
          <h2 className="text-xl md:text-2xl font-bold text-center">View Feedbacks</h2>
          <input
            type="text"
            placeholder="Search..."
            value={searchText}
            onChange={handleSearch}
            className="w-full md:w-auto px-4 py-2 bg-white border border-gray-300 rounded-md text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>

        <div className="space-y-4 text-xs md:text-sm">
          <div className={`grid ${role === 'vice president' ? 'grid-cols-7' : 'grid-cols-5'} gap-4 items-center bg-gray-100 p-3 rounded shadow text-xxs md:text-lg`}>
            <div className="hidden md:flex justify-center">Profile</div>
            <div className="flex justify-center">Student Name</div>
            <div className="flex justify-center">Parent Name</div>
            <div className="flex justify-center">Application No.</div>
            <div className="flex justify-center">View Feedback</div>
            {(role === 'vice president') && (
              <>
                <div className="flex justify-center">Add Feedback</div>
                <div className="flex justify-center">Add & View Assessments</div>
              </>
            )}
          </div>
          {students.map(item => (
            <div key={item.applicationNumber} className={`grid ${role === 'vice president' ? 'grid-cols-7' : 'grid-cols-5'} gap-6 items-center bg-gray-100 p-3 rounded shadow text-xxs md:text-lg`}>
              <div className="hidden md:flex justify-center">
                <img src={"/profileicon.jpeg"} alt="Profile" className="w-12 h-12 rounded-full flex items-center justify-center" />
              </div>
              <div className="flex justify-center">{`${item.firstName} ${item.surName}`}</div>
              <div className="flex justify-center">{item.parentName}</div>
              <div className="flex justify-center">{item.applicationNumber}</div>
              <div className="flex justify-center">
                <button onClick={() => toggleFeedbackView(item.applicationNumber)} className="text-blue-500 hover:text-blue-700">
                  <img src={selectedFeedbacks.length > 0 ? "/open.jpg" : "/close.jpg"} alt="View" className="h-4 w-4 md:w-8 md:h-6" />
                </button>
              </div>
              {(role === 'vice president') && (
                <>
                  <div className="flex justify-center">
                    <button
                      onClick={() => addFeedback(item.applicationNumber)}
                      className="text-blue-500 hover:text-blue-700"
                    >
                      <img src={'/plus.jpg'} alt="Add" className="h-3 w-3 md:h-6 md:w-6" />
                    </button>
                  </div>
                  <div className="flex justify-center">
                    <button
                      onClick={() => addAssessment(item.applicationNumber)}
                      className="text-blue-500 hover:text-blue-700"
                    >
                      <img src={'/edit.jpeg'} alt="Edit" className="h-4 w-6 md:h-6 md:w-8" />
                    </button>
                  </div>
                </>
              )}
            </div>
          ))}
        </div>

        {selectedFeedbacks.length > 0 && !viewingDateFeedback && (
          <Modal onClose={() => setSelectedFeedbacks([])}>
            <div>
              <h3 className="text-lg font-bold mb-4">{selectedStudentName}</h3>
              <div className="max-h-60 overflow-y-auto">
                {selectedFeedbacks.map(fb => (
                  <div key={fb.date} className="flex justify-between items-center mb-2 p-2 border-b items-center bg-gray-100 rounded shadow text-xs md:text-lg">
                    <span className='mr-2'>Dated:</span>
                    <button onClick={() => viewFeedbackByDate(fb)} className="text-blue-500 hover:text-blue-700 flex justify-center">
                      {new Date(fb.date).toLocaleDateString()} {/* Format the date */}
                    </button>
                  </div>
                ))}
              </div>
            </div>
          </Modal>
        )}


        {viewingDateFeedback && (
          <Modal onClose={() => {
            setViewingDateFeedback(null);
            setEditFeedback(null);
          }}>
            <textarea value={editText} onChange={handleEditChange} className="w-full p-2 border rounded bg-gray-200" />
            <button onClick={saveEdit} className="mt-4 p-2 bg-[#2D5990] text-white rounded mr-4">Save Changes</button>
          </Modal>
        )}

        {addingFeedback && (
          <Modal onClose={() => setAddingFeedback(false)}>
            <div>
              <h3 className="text-lg font-bold mb-4">{selectedStudentName}</h3>
              <textarea
                value={newFeedback}
                onChange={handleNewFeedbackChange}
                className="w-full p-2 border rounded bg-gray-200 mb-4"
                placeholder="Enter feedback here..."
              />
              <button onClick={submitNewFeedback} className="mt-4 p-2 bg-[#2D5990] text-white rounded mr-4">Submit</button>
            </div>
          </Modal>
        )}
      </div>
    </div>
  );
}

export default ViewFeedbacks;


 

========== FILE: frontend/src/components/AuthContext.js ==========

import React, { createContext, useContext, useState, useEffect } from 'react';

const AuthContext = createContext(null);

export const AuthProvider = ({ children }) => {
    const [user, setUser] = useState(() => {
        // Attempt to get user data from sessionStorage when the component mounts
        const savedUser = sessionStorage.getItem('name');
        const savedRole = sessionStorage.getItem('role');
        const savedBranch = sessionStorage.getItem('branch');
        if (savedUser && savedRole && savedBranch) {
            return { name: savedUser, role: savedRole, branch: savedBranch };
        }
        return null;
    });

    const login = (name, role, branch) => {
        setUser({ name, role });
        sessionStorage.setItem('name', name);
        sessionStorage.setItem('role', role);
        sessionStorage.setItem('branch', branch);
    };

    const logout = () => {
        setUser(null);
        sessionStorage.clear();
        window.location.reload();
    };

    // Optionally, to handle changes in sessionStorage across tabs:
    useEffect(() => {
        const handleStorageChange = () => {
            const savedUser = sessionStorage.getItem('name');
            const savedRole = sessionStorage.getItem('role');
            const savedBranch = sessionStorage.getItem('branch');
            if (savedUser && savedRole) {
                setUser({ name: savedUser, role: savedRole, branch: savedBranch });
            } else {
                setUser(null);
            }
        };

        window.addEventListener('storage', handleStorageChange);

        return () => {
            window.removeEventListener('storage', handleStorageChange);
        };
    }, []);

    return (
        <AuthContext.Provider value={{ user, login, logout }}>
            {children}
        </AuthContext.Provider>
    );
};

export const useAuth = () => useContext(AuthContext);


 

========== FILE: frontend/src/components/StudentAssessment.js ==========

import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import axios from 'axios';

const modules = [
  {
    title: 'Classroom Behavior',
    questions: [
      'How disciplined is the student during class?',
      'How active is the student in class participation?',
      'How punctual is the student in completing homework?',
      'How attentive is the student during class?',
      'How well does the student respond during class?',
      'How well does the student maintain notes for your subject?',
    ],
  },
  {
    title: 'Study Hour Behavior',
    extraItem: 'Please consider the following when evaluating the student\'s study hour behavior:',
    questions: [
      'How frequently does the student approach you with questions?',
      'How efficient is the student in completing work during sessions?',
      'How focused is the student during study hours?',
      'How often does the student disturb others in the name of discussions during study hours?',
    ],
  },
  {
    title: 'Examination Behavior',
    extraItem: 'Please consider the following when evaluating the student\'s examination behavior:',
    questions: [
      'How disciplined/attentive is the student during exams?',
      'How enthusiastic is the student about clearing doubts after exams?',
      'How focused and determined is the student in finishing exams till the end?',
    ],
  },
];

// Dummy function to check if assessment already exists for a student
const checkIfAssessmentExists = (name) => {
  // Replace this with actual API call logic
  return name === 'Alice Johnson'; // Example: return true for Alice Johnson
};

const StudentAssessment = () => {
  const { name, sessionId } = useParams();
  const [responses, setResponses] = useState(modules.map(module => module.questions.map(() => null)));
  const [assessmentExists, setAssessmentExists] = useState(false);

  useEffect(() => {
    const exists = checkIfAssessmentExists(NamedNodeMap);
    setAssessmentExists(exists);
  }, [name]);

  const handleOptionChange = (moduleIndex, questionIndex, value) => {
    const newResponses = [...responses];
    newResponses[moduleIndex][questionIndex] = value;
    setResponses(newResponses);
  };

  const isAllAnswered = () => {
    return responses.every(module => module.every(response => response !== null));
  };

  const saveResponses = async () => {
    // Save responses to the server
    console.log(responses);
    try {
      const teacher = sessionStorage.getItem('teacher');
      
      const response = await axios.post(`http://localhost:5000/assessment/${teacher}/${sessionId}/${applicationNumber}`, responses);
      // Handle the response from the server (e.g., display success message)
      console.log(response.data);
    } catch (error) {
      console.error('Error saving assessment:', error);
      // Handle the error (e.g., display error message)
    }
  };

  const handleSubmit = () => {
    // if (assessmentExists) {
    //   alert('Assessment has already been submitted.');
    //   return;
    // }

    if (isAllAnswered()) {
      const payload = modules.map((module, moduleIndex) => ({
        module: module.title,
        responses: module.questions.map((question, questionIndex) => ({
          question,
          answer: responses[moduleIndex][questionIndex],
        })),
      }));

      saveResponses();

      alert('Assessment Submitted');
      console.log(payload);
    } else {
      alert('Please answer all the questions in all modules.');
    }
  };

  const getGradientColor = (value) => {
    const hue = (value - 1) * 12; // Scale value from 1-10 to 0-240 for hue (red to green)
    return `hsl(${hue}, 100%, 50%)`;
  };

  return (
    <div className="bg-gray-100 min-h-screen py-8">
      <div className="max-w-3xl mx-auto bg-white shadow-lg rounded-lg p-8">
        <h1 className="text-3xl font-bold mb-8 text-center">
          Providing assessment for <span className="text-[#00A0E3]">{name}</span>
        </h1>
        {assessmentExists && (
          <div className="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 mb-8" role="alert">
            <p className="font-bold">Assessment Completed</p>
            <p>
              Assessment for {name} is Completed and Saved. This is the View & Edit page. Please make sure to submit
              after making changes!
            </p>
          </div>
        )}
        {modules.map((module, moduleIndex) => (
          <div key={moduleIndex} className="mb-12">
            <h2 className="text-2xl font-bold mb-4">{module.title}</h2>
            {module.extraItem && <p className="text-gray-600 mb-4">{module.extraItem}</p>}
            {module.questions.map((question, questionIndex) => (
              <div key={questionIndex} className="mb-8">
                <p className="text-lg font-semibold mb-4">{question}</p>
                <div className="flex justify-between bg-gray-100 rounded-lg p-4">
                  {[...Array(10).keys()].map(i => (
                    <label
                      key={i}
                      className={`px-4 py-2 rounded-lg cursor-pointer transition-colors duration-200 ${
                        responses[moduleIndex][questionIndex] === i + 1
                          ? 'text-white shadow-lg transform scale-110'
                          : 'bg-white text-gray-700 hover:bg-gray-200'
                      }`}
                      style={{
                        backgroundColor: responses[moduleIndex][questionIndex] === i + 1 ? getGradientColor(i + 1) : '',
                      }}
                    >
                      <input
                        type="radio"
                        className="sr-only"
                        name={`module-${moduleIndex}-question-${questionIndex}`}
                        value={i + 1}
                        checked={responses[moduleIndex][questionIndex] === i + 1}
                        onChange={() => handleOptionChange(moduleIndex, questionIndex, i + 1)}
                      />
                      {i + 1}
                    </label>
                  ))}
                </div>
              </div>
            ))}
          </div>
        ))}
        <button
          onClick={handleSubmit}
          className="w-full bg-[#2D5990] text-white rounded hover:bg-[#00A0E3] font-bold py-2 px-4 transition-colors duration-200"
        >
          Submit
        </button>
      </div>
    </div>
  );
};

export default StudentAssessment;

 

========== FILE: frontend/src/components/ForgotPasswordPage.js ==========

import React, { useState } from 'react';

const ForgotPasswordPage = () => {
    const [email, setEmail] = useState('');

    const handleForgotPassword = async (e) => {
        e.preventDefault();
        try {
            const response = await fetch('http://localhost:5000/teachers/forgot-password', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ email })
            });
            const data = await response.json();
            if (response.ok) {
                alert('Password reset link sent to your email');
            } else {
                alert(data.message);
            }
        } catch (error) {
            console.error('Error during password reset request:', error);
            alert('Error during password reset request');
        }
    };

    return (
        <div className="flex items-center justify-center min-h-screen bg-gray-200">
            <div className="bg-white shadow-lg rounded-lg p-6">
                <h2 className="text-2xl font-bold mb-4">Forgot Password</h2>
                <form onSubmit={handleForgotPassword}>
                    <div className="mb-4">
                        <label htmlFor="email" className="block text-lg font-medium text-gray-700">Email</label>
                        <input type="email" id="email" value={email} onChange={e => setEmail(e.target.value)} className="bg-gray-300 h-12 mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:bg-white focus:border-indigo-500 focus:ring-2 focus:ring-indigo-500 sm:text-lg" />
                    </div>
                    <button type="submit" className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-[#00A0E3] hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        Send Reset Link
                    </button>
                </form>
            </div>
        </div>
    );
};

export default ForgotPasswordPage;


 

========== FILE: frontend/src/components/AddTeachers.js ==========

import React, { useState, useEffect } from 'react';
import Navbar from './Navbar';
import { FaTimes } from 'react-icons/fa';

const Modal = ({ isOpen, onClose, children }) => {
  if (!isOpen) return null;

  const handleOutsideClick = (e) => {
    if (e.target === e.currentTarget) {
      onClose();
    }
  };

  return (
    <div
      className="fixed inset-0 flex items-center justify-center z-50 bg-black bg-opacity-50"
      onClick={handleOutsideClick}
    >
      <div className="bg-white rounded-lg shadow-lg p-6 w-1/3 relative">
        <button
          className="absolute top-4 right-4 text-gray-600 hover:text-gray-900"
          onClick={onClose}
        >
          <FaTimes size={24} />
        </button>
        {children}
      </div>
    </div>
  );
};

const AddTeachers = () => {
  const [form, setForm] = useState({
    name: '',
    email: '',
    gmail: '',
    password: '',
    phoneNumber: '',
    branch: '',
    teacherID: '',
    role: '',
    subject: ''
  });

  const [teachers, setTeachers] = useState([]);
  const [selectedRow, setSelectedRow] = useState(null);
  const [branches, setBranches] = useState([]);
  const [selectedTeacher, setSelectedTeacher] = useState(null);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);

  const role = sessionStorage.getItem('role');
  const userBranch = sessionStorage.getItem('branch');

  const mpcSubjects = ['Mathematics', 'Physics', 'Chemistry'];

  useEffect(() => {
    const fetchBranches = async () => {
      const response = await fetch('http://localhost:5000/branches');
      const data = await response.json();
      setBranches(data);
    };

    fetchBranches();
  }, []);

  useEffect(() => {
    const fetchTeachers = async () => {
      const response = await fetch('http://localhost:5000/teachers');
      const data = await response.json();

      let branchFilteredTeachers = role === 'admin' ? data : data.filter(teacher => teacher.branch === userBranch);

      let roleFilteredTeachers = [];
      switch (role) {
        case 'admin':
          roleFilteredTeachers = branchFilteredTeachers;
          break;
        case 'director':
          roleFilteredTeachers = branchFilteredTeachers.filter(teacher => teacher.role !== 'admin');
          break;
        case 'vice president':
          roleFilteredTeachers = branchFilteredTeachers.filter(teacher =>
            teacher.role === 'teacher' || teacher.role === 'receptionist' || teacher.role === 'vice president'
          );
          break;
        default:
          roleFilteredTeachers = branchFilteredTeachers;
          break;
      }

      setTeachers(roleFilteredTeachers);
    };

    fetchTeachers();
  }, [role, userBranch]);

  const handleChange = (e) => {
    if (e.target.name === 'phoneNumber') {
      const value = e.target.value.replace(/\D/g, '');
      if (value.length <= 10) {
        setForm({
          ...form,
          [e.target.name]: value
        });
      }
    } else {
      setForm({
        ...form,
        [e.target.name]: e.target.value
      });
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const formData = { ...form };

    if (role !== 'admin') {
      formData.branch = userBranch;
    }

    if (form.role === 'teacher' && !form.subject) {
      alert('Subject is required for teachers');
      return;
    }

    try {
      const response = await fetch('http://localhost:5000/teachers', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
      });
      const newTeacher = await response.json();
      if (response.ok) {
        window.location.reload();
        setForm({ name: '', email: '', gmail: '', password: '', phoneNumber: '', branch: '', teacherID: '', role: '', subject: '' });
        alert('User added successfully!');
      } else {
        throw new Error(newTeacher.error || 'Failed to add teacher');
      }
    } catch (error) {
      alert(error.message);
    }
  };

  const handleRowClick = (teacher) => {
    setSelectedTeacher(teacher);
    setForm({
      name: teacher.name,
      email: teacher.email,
      gmail: teacher.gmail,
      password: '',
      phoneNumber: teacher.phoneNumber,
      branch: teacher.branch,
      teacherID: teacher.teacherID,
      role: teacher.role,
      subject: teacher.subject
    });
    setIsEditModalOpen(true);
  };

  const handleEditSubmit = async (e) => {
    e.preventDefault();
    const formData = { ...form };
  
    if (role !== 'admin') {
      formData.branch = userBranch;
    }
  
    if (form.role === 'teacher' && !form.subject) {
      alert('Subject is required for teachers');
      return;
    }
  
    try {
      const response = await fetch(`http://localhost:5000/teachers/${selectedTeacher._id}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Failed to update teacher');
      }
  
      window.location.reload();
      setIsEditModalOpen(false);
      setForm({ name: '', email: '', gmail: '', phoneNumber: '', branch: '', teacherID: '', role: '', subject: '' });
      alert('User updated successfully!');
    } catch (error) {
      console.error(error); // Log the error for debugging
      alert(error.message);
    }
  };
  

  const getAvailableRoles = () => {
    switch (role) {
      case 'admin':
        return ['admin', 'director', 'vice president', 'teacher', 'receptionist'];
      case 'director':
        return ['vice president', 'teacher', 'receptionist'];
      case 'vice president':
        return ['teacher', 'receptionist'];
      default:
        return [];
    }
  };

  return (
    <div>
      <Navbar />
      <div className="flex flex-col items-center justify-center mt-4 md:mt-8 p-2">
        <div className="w-full md:w-2/4 bg-gradient-to-br from-blue-100 to-blue-200 p-4 md:p-6 rounded-3xl shadow-lg mx-2">
          <h2 className="text-xl md:text-2xl font-bold mb-2 md:mb-4 text-center text-[#2D5990]">ADD USER</h2>
          <form onSubmit={handleSubmit}>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-2 md:gap-4">
              <input
                type="text"
                name="name"
                placeholder="Name"
                value={form.name}
                onChange={handleChange}
                className="input input-bordered w-full bg-white my-1 md:my-2 rounded-xl text-xs md:text-sm focus:ring-2 focus:ring-blue-500"
              />
              <input
                type="email"
                name="email"
                placeholder="Email"
                value={form.email}
                onChange={handleChange}
                className="input input-bordered w-full bg-white my-1 md:my-2 rounded-xl text-xs md:text-sm focus:ring-2 focus:ring-blue-500"
              />
              <input
                type="password"
                name="password"
                placeholder="Password"
                value={form.password}
                onChange={handleChange}
                className="input input-bordered w-full bg-white my-1 md:my-2 rounded-xl text-xs md:text-sm focus:ring-2 focus:ring-blue-500"
              />
              <input
                type="text"
                name="phoneNumber"
                placeholder="Phone Number"
                value={form.phoneNumber}
                onChange={handleChange}
                className="input input-bordered w-full bg-white my-1 md:my-2 rounded-xl text-xs md:text-sm focus:ring-2 focus:ring-blue-500"
              />
              <input
                type="email"
                name="gmail"
                placeholder="Gmail"
                value={form.gmail}
                onChange={handleChange}
                className="input input-bordered w-full bg-white my-1 md:my-2 rounded-xl text-xs md:text-sm focus:ring-2 focus:ring-blue-500"
              />
              <select
                name="role"
                value={form.role}
                onChange={handleChange}
                className="input input-bordered w-full bg-white text-black my-1 md:my-2 rounded-xl text-xs md:text-sm focus:ring-2 focus:ring-blue-500"
              >
                <option value="">Select Role</option>
                {getAvailableRoles().map((roleOption) => (
                  <option key={roleOption} value={roleOption}>
                    {roleOption.charAt(0).toUpperCase() + roleOption.slice(1)}
                  </option>
                ))}
              </select>
              {role === 'admin' ? (
                <select
                  name="branch"
                  value={form.branch}
                  onChange={handleChange}
                  className="input input-bordered w-full bg-white text-black my-1 md:my-2 rounded-xl text-xs md:text-sm focus:ring-2 focus:ring-blue-500"
                >
                  <option value="">Select Branch</option>
                  {branches.map((branch) => (
                    <option key={branch._id} value={branch.name}>
                      {branch.branchCode}
                    </option>
                  ))}
                </select>
              ) : (
                <input type="hidden" name="branch" value={userBranch} />
              )}
              <input
                type="text"
                name="teacherID"
                placeholder="User ID"
                value={form.teacherID}
                onChange={handleChange}
                className="input input-bordered w-full bg-white my-1 md:my-2 rounded-xl text-xs md:text-sm focus:ring-2 focus:ring-blue-500"
              />
              {form.role === 'teacher' && (
                <select
                  name="subject"
                  value={form.subject}
                  onChange={handleChange}
                  className="input input-bordered w-full bg-white text-black my-1 md:my-2 rounded-xl text-xs md:text-sm focus:ring-2 focus:ring-blue-500"
                >
                  <option value="">Select Subject</option>
                  {mpcSubjects.map((subject) => (
                    <option key={subject} value={subject}>
                      {subject}
                    </option>
                  ))}
                </select>
              )}
            </div>
            <button
              type="submit"
              className="btn btn-primary mt-4 w-full md:w-auto bg-[#2D5990] hover:bg-[#00A0E3] text-white font-bold py-2 px-4 rounded-full transition-all duration-300 transform hover:scale-105"
            >
              Add User
            </button>
          </form>
        </div>

        <div className="w-full md:w-3/4 mt-4 md:mt-8 bg-white rounded-3xl shadow-lg p-4 md:p-6">
          <h2 className="text-xl md:text-2xl font-bold mb-2 text-center text-[#2D5990]">Users List</h2>
          <div className="overflow-x-auto">
            <table className="w-full table-auto bg-white border-collapse border border-gray-500 mx-2 mb-4 rounded-lg shadow">
              <thead className="bg-[#2D5990] text-white">
                <tr>
                  <th className="px-2 md:px-4 py-2 text-center border-b border-gray-600 border-r text-sm md:text-base">Teacher ID</th>
                  <th className="px-2 md:px-4 py-2 text-center border-b border-gray-600 border-r text-sm md:text-base">Name</th>
                  <th className="px-2 md:px-4 py-2 text-center border-b border-gray-600 border-r text-sm md:text-base">Role</th>
                  <th className="px-2 md:px-4 py-2 text-center border-b border-gray-600 border-r text-sm md:text-base">Email</th>
                  <th className="px-2 md:px-4 py-2 text-center border-b border-gray-600 border-r text-sm md:text-base">Phone Number</th>
                  <th className="px-2 md:px-4 py-2 text-center border-b border-gray-600 border-r text-sm md:text-base">Branch</th>
                  <th className="px-2 md:px-4 py-2 text-center border-b border-gray-600 border-r text-sm md:text-base">Subject</th>
                  <th className="px-2 md:px-4 py-2 text-center border-b border-gray-600 text-sm md:text-base">Actions</th>
                </tr>
              </thead>
              <tbody>
                {teachers.map((teacher) => (
                  <tr
                    key={teacher._id}
                    className={`cursor-pointer ${
                      selectedRow === teacher._id ? 'bg-[#00A0E3] text-white' : 'even:bg-gray-200 hover:bg-gray-400'
                    } transition-all duration-300`}
                  >
                    <td className="px-2 md:px-4 py-1 md:py-2 border-b border-gray-600 border-r text-sm md:text-base">{teacher.teacherID}</td>
                    <td className="px-2 md:px-4 py-1 md:py-2 border-b border-gray-600 border-r text-sm md:text-base">{teacher.name}</td>
                    <td className="px-2 md:px-4 py-1 md:py-2 border-b border-gray-600 border-r text-sm md:text-base">{teacher.role}</td>
                    <td className="px-2 md:px-4 py-1 md:py-2 border-b border-gray-600 border-r text-sm md:text-base">{teacher.email}</td>
                    <td className="px-2 md:px-4 py-1 md:py-2 border-b border-gray-600 border-r text-sm md:text-base">{teacher.phoneNumber}</td>
                    <td className="px-2 md:px-4 py-1 md:py-2 border-b border-gray-600 border-r text-sm md:text-base">{teacher.branch}</td>
                    <td className="px-2 md:px-4 py-1 md:py-2 border-b border-gray-600 border-r text-sm md:text-base">{teacher.subject || 'N/A'}</td>
                    <td className="px-2 md:px-4 py-1 md:py-2 border-b border-gray-600 text-sm md:text-base">
                      <button
                        className="bg-[#2D5990] text-white px-2 py-1 rounded-md"
                        onClick={() => handleRowClick(teacher)}
                      >
                        Edit
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>

      <Modal isOpen={isEditModalOpen} onClose={() => setIsEditModalOpen(false)}>
        <h2 className="text-xl md:text-2xl font-bold mb-4 text-center text-[#2D5990]">Edit User</h2>
        <form onSubmit={handleEditSubmit}>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-2 md:gap-4">
            <input
              type="text"
              name="name"
              placeholder="Name"
              value={form.name}
              onChange={handleChange}
              className="input input-bordered w-full bg-white my-1 md:my-2 rounded-xl text-xs md:text-sm focus:ring-2 focus:ring-blue-500"
            />
            <input
              type="email"
              name="email"
              placeholder="Email"
              value={form.email}
              onChange={handleChange}
              className="input input-bordered w-full bg-white my-1 md:my-2 rounded-xl text-xs md:text-sm focus:ring-2 focus:ring-blue-500"
            />
            <input
              type="text"
              name="phoneNumber"
              placeholder="Phone Number"
              value={form.phoneNumber}
              onChange={handleChange}
              className="input input-bordered w-full bg-white my-1 md:my-2 rounded-xl text-xs md:text-sm focus:ring-2 focus:ring-blue-500"
            />
            <input
              type="email"
              name="gmail"
              placeholder="Gmail"
              value={form.gmail}
              onChange={handleChange}
              className="input input-bordered w-full bg-white my-1 md:my-2 rounded-xl text-xs md:text-sm focus:ring-2 focus:ring-blue-500"
            />
            <select
              name="role"
              value={form.role}
              onChange={handleChange}
              className="input input-bordered w-full bg-white text-black my-1 md:my-2 rounded-xl text-xs md:text-sm focus:ring-2 focus:ring-blue-500"
            >
              <option value="">Select Role</option>
              {getAvailableRoles().map((roleOption) => (
                <option key={roleOption} value={roleOption}>
                  {roleOption.charAt(0).toUpperCase() + roleOption.slice(1)}
                </option>
              ))}
            </select>
            {role === 'admin' ? (
              <select
                name="branch"
                value={form.branch}
                onChange={handleChange}
                className="input input-bordered w-full bg-white text-black my-1 md:my-2 rounded-xl text-xs md:text-sm focus:ring-2 focus:ring-blue-500"
              >
                <option value="">Select Branch</option>
                {branches.map((branch) => (
                  <option key={branch._id} value={branch.name}>
                    {branch.branchCode}
                  </option>
                ))}
              </select>
            ) : (
              <input type="hidden" name="branch" value={userBranch} />
            )}
            <input
              type="text"
              name="teacherID"
              placeholder="User ID"
              value={form.teacherID}
              onChange={handleChange}
              className="input input-bordered w-full bg-white my-1 md:my-2 rounded-xl text-xs md:text-sm focus:ring-2 focus:ring-blue-500"
            />
            {form.role === 'teacher' && (
              <select
                name="subject"
                value={form.subject}
                onChange={handleChange}
                className="input input-bordered w-full bg-white text-black my-1 md:my-2 rounded-xl text-xs md:text-sm focus:ring-2 focus:ring-blue-500"
              >
                <option value="">Select Subject</option>
                {mpcSubjects.map((subject) => (
                  <option key={subject} value={subject}>
                    {subject}
                  </option>
                ))}
              </select>
            )}
          </div>
          <button
            type="submit"
            className="btn btn-primary mt-4 w-full md:w-auto bg-[#2D5990] hover:bg-[#00A0E3] text-white font-bold py-2 px-4 rounded-full transition-all duration-300 transform hover:scale-105"
          >
            Update User
          </button>
        </form>
      </Modal>
    </div>
  );
};

export default AddTeachers;


 

========== FILE: frontend/src/components/StudentECA.js ==========

import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';

const StudentECA = () => {
  const { studentName, applicationNumber } = useParams(); // Including applicationNumber from params
  const [communicationRating, setCommunicationRating] = useState(null);
  const [participationRatings, setParticipationRatings] = useState({
    indoorSports: null,
    outdoorSports: null,
    music: null,
    artLiterature: null,
    leadershipTeamwork: null,
    debatesActivities: null,
  });
  const [parentFeedback, setParentFeedback] = useState('');
  const [formValid, setFormValid] = useState(false);
  const [ecas, setEcas] = useState([]);
  const [editMode, setEditMode] = useState(false);
  const [currentEditingId, setCurrentEditingId] = useState(null);
  const navigate = useNavigate();

  useEffect(() => {
    // Fetch ECA entries when the component mounts
    fetch(`http://localhost:5000/eca/${studentName}`)
      .then(response => response.json())
      .then(data => setEcas(data))
      .catch(error => console.error('Error:', error));
  }, [studentName]);

  const handleRatingChange = (event, category) => {
    const value = parseInt(event.target.value, 10);
    if (category) {
      setParticipationRatings(prevRatings => ({ ...prevRatings, [category]: value }));
    } else {
      setCommunicationRating(value);
    }
    validateForm();
  };

  const handleFeedbackChange = (event) => {
    setParentFeedback(event.target.value);
    validateForm();
  };

  const validateForm = () => {
    const allFilled = communicationRating !== null &&
      Object.values(participationRatings).every(rating => rating !== null) &&
      parentFeedback.trim() !== '';
    setFormValid(allFilled);
  };

  const handleSubmit = (event) => {
    event.preventDefault();
    const payload = {
      studentName,
      applicationNumber,
      communicationRating,
      participationRatings,
      parentFeedback,
      date: new Date().toISOString(),
    };

    const url = editMode ? `http://localhost:5000/eca/${currentEditingId}` : 'http://localhost:5000/eca';
    const method = editMode ? 'PATCH' : 'POST';

    fetch(url, {
      method: method,
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload),
    })
      .then(response => response.json())
      .then(data => {
        console.log(data);
        setEcas(editMode ? ecas.map(eca => eca.uuid === currentEditingId ? data : eca) : [...ecas, data]);
        navigate('/viewFeedbacks');
      })
      .catch(error => console.error('Error:', error));
    resetForm();
  };


  const handleEdit = (eca) => {
    setEditMode(true);
    setCurrentEditingId(eca.uuid);
    setCommunicationRating(eca.communicationRating);
    setParticipationRatings(eca.participationRatings);
    setParentFeedback(eca.parentFeedback);
    validateForm();
  };

  const resetForm = () => {
    setCommunicationRating(null);
    setParticipationRatings({
      indoorSports: null,
      outdoorSports: null,
      music: null,
      artLiterature: null,
      leadershipTeamwork: null,
      debatesActivities: null,
    });
    setParentFeedback('');
    setFormValid(false);
    setEditMode(false);
    setCurrentEditingId(null);
  };


  const getGradientColor = (value) => {
    const hue = (value - 1) * 12; // Scale value from 1-10 to 0-240 for hue (red to green)
    return `hsl(${hue}, 100%, 50%)`;
  };

  const [expandedId, setExpandedId] = useState(null); // To track which ECA entry is expanded

  const toggleExpand = (id) => {
    if (expandedId === id) {
      setExpandedId(null); // Collapse if it's already expanded
    } else {
      setExpandedId(id); // Expand the clicked entry
    }
  };

  return (
    <div className="bg-gray-100 min-h-screen py-8">
      <div className="max-w-3xl mx-auto bg-white shadow-lg rounded-lg p-8">

        {/* ECA Entries List */}
        <div className="mt-2">
          <h2 className="text-xl font-bold mb-4">Past ECA Entries:</h2>
          {ecas.map((eca, index) => (
            <div key={index} className="mb-4">
              <div
                className="p-4 bg-white rounded-lg shadow cursor-pointer"
                onClick={() => toggleExpand(index)} // Toggle expand/collapse on click
              >
                <p>Date: {new Date(eca.date).toLocaleDateString()}</p>
                {expandedId === index && (
                  <div>
                    <p>Communication Rating: {eca.communicationRating}</p>
                    <p>Parent Feedback: {eca.parentFeedback}</p>
                    <div>
                      <h4 className="font-bold">Participation Ratings:</h4>
                      {Object.entries(eca.participationRatings).map(([key, value]) => (
                        <p key={key}>{`${key}: ${value}`}</p>
                      ))}
                    </div>
                    <div className="flex justify-around mt-4">
                      <button onClick={() => setExpandedId(null)} className="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-700">
                        Close
                      </button>
                      <button onClick={() => handleEdit(eca)} className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-700">
                        Edit
                      </button>
                    </div>
                  </div>
                )}
              </div>
            </div>
          ))}

          </div>

        <h1 className="text-3xl font-bold mb-8 text-center">
          Providing ECA feedback for <span className="text-blue-600">{studentName}</span>
        </h1>
        <form onSubmit={handleSubmit} className="space-y-8">
          <div>
            <p className="text-lg font-semibold mb-4">
              How well does the student communicate off-topic in and outside the class during activities, debates, quizzes, sports days, etc.?
            </p>
            <div className="flex justify-between bg-gray-100 rounded-lg p-4">
              {[...Array(10)].map((_, index) => (
                <label
                  key={index}
                  className={`px-4 py-2 rounded-lg cursor-pointer transition-colors duration-200 ${
                    communicationRating === index + 1
                      ? 'text-white shadow-lg transform scale-110'
                      : 'bg-white text-gray-700 hover:bg-gray-200'
                  }`}
                  style={{
                    backgroundColor: communicationRating === index + 1 ? getGradientColor(index + 1) : '',
                  }}
                >
                  <input
                    type="radio"
                    className="sr-only"
                    name="communicationRating"
                    value={index + 1}
                    checked={communicationRating === index + 1}
                    onChange={handleRatingChange}
                  />
                  {index + 1}
                </label>
              ))}
            </div>
          </div>

          <div>
            <p className="text-lg font-semibold mb-4">Rate the student's participation in the following areas:</p>
            {Object.keys(participationRatings).map((category, index) => (
              <div key={index} className="mb-8">
                <p className="text-lg font-semibold mb-4 capitalize">{category.replace(/([A-Z])/g, ' $1').toLowerCase()}:</p>
                <div className="flex justify-between bg-gray-100 rounded-lg p-4">
                  {[...Array(10)].map((_, index) => (
                    <label
                      key={index}
                      className={`px-4 py-2 rounded-lg cursor-pointer transition-colors duration-200 ${
                        participationRatings[category] === index + 1
                          ? 'text-white shadow-lg transform scale-110'
                          : 'bg-white text-gray-700 hover:bg-gray-200'
                      }`}
                      style={{
                        backgroundColor: participationRatings[category] === index + 1 ? getGradientColor(index + 1) : '',
                      }}
                    >
                      <input
                        type="radio"
                        className="sr-only"
                        name={category}
                        value={index + 1}
                        checked={participationRatings[category] === index + 1}
                        onChange={(e) => handleRatingChange(e, category)}
                      />
                      {index + 1}
                    </label>
                  ))}
                </div>
              </div>
            ))}
          </div>

          <div>
            <label htmlFor="parentFeedback" className="block text-lg font-semibold mb-2">Parent Feedback:</label>
            <textarea
              id="parentFeedback"
              value={parentFeedback}
              onChange={handleFeedbackChange}
              maxLength="50"
              className="w-full p-2 border rounded bg-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Enter verdict after speaking with parents..."
            />
          </div>

          <button
            type="submit"
            disabled={!formValid}
            className="w-full bg-[#2D5990] text-white rounded hover:bg-[#00A0E3] font-bold py-2 px-4 transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Submit
          </button>
        </form>
      </div>
    </div>
  );
};

export default StudentECA;


 

========== FILE: frontend/src/components/Dashboard.js ==========

import React, { useState, useEffect } from 'react';
import Navbar from './Navbar';
import profileImage from '../assets/profile.jpg';

const Dashboard = () => {
  const [students, setStudents] = useState([]);
  const [selectedRow, setSelectedRow] = useState(null);
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [studentsPerPage] = useState(50);
  const [searchQuery, setSearchQuery] = useState('');
  const [sortColumn, setSortColumn] = useState(null);
  const [sortDirection, setSortDirection] = useState('asc');
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [modalImageSrc, setModalImageSrc] = useState('');

  useEffect(() => {
    fetchStudents();
  }, []);

  const handleRowClick = (id) => {
    if (selectedRow === id) {
      setSelectedRow(null);
    } else {
      setSelectedRow(id);
    }
  };

  const fetchStudents = async () => {
    setIsLoading(true);
    const role = sessionStorage.getItem('role');
    const userBranch = sessionStorage.getItem('branch');

    try {
        const response = await fetch('http://localhost:5000/students');
        const data = await response.json();
        
        // Filter students based on branch for specific roles
        if (role === 'director' || role === 'teacher' || role === 'vice president') {
            const filteredStudents = data.filter(student => student.branch === userBranch);
            setStudents(filteredStudents);
        } else {
            setStudents(data);
        }
        
        if (!response.ok) {
            throw new Error(data.error || 'An error occurred while fetching data');
        }
    } catch (error) {
        setError('Error fetching students: ' + error.message);
    } finally {
        setIsLoading(false);
    }
  };

  // Search functionality
  const handleSearch = (event) => {
    setSearchQuery(event.target.value);
    setCurrentPage(1);
  };

  const filteredStudents = students.filter((student) => {
    const searchTerms = searchQuery.toLowerCase().split(',').map((term) => term.trim());
    const studentValues = Object.values(student).map((value) => value.toString().toLowerCase());

    return searchTerms.every((term) => studentValues.some((value) => value.includes(term)));
  });

  // Sorting functionality
  const handleSort = (column) => {
    if (sortColumn === column) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortColumn(column);
      setSortDirection('asc');
    }
  };

  const sortedStudents = filteredStudents.sort((a, b) => {
    if (sortColumn) {
      const valueA = a[sortColumn].toString().toLowerCase();
      const valueB = b[sortColumn].toString().toLowerCase();

      if (valueA < valueB) {
        return sortDirection === 'asc' ? -1 : 1;
      }
      if (valueA > valueB) {
        return sortDirection === 'asc' ? 1 : -1;
      }
    }
    return 0;
  });

  // Pagination logic
  const indexOfLastStudent = currentPage * studentsPerPage;
  const indexOfFirstStudent = indexOfLastStudent - studentsPerPage;
  const currentStudents = sortedStudents.slice(indexOfFirstStudent, indexOfLastStudent);

  const paginate = (pageNumber) => setCurrentPage(pageNumber);

  const totalPages = Math.ceil(sortedStudents.length / studentsPerPage);

  const getPageButtons = () => {
    const buttons = [];

    if (totalPages <= 5) {
      for (let i = 1; i <= totalPages; i++) {
        buttons.push(
          <button
            key={i}
            onClick={() => paginate(i)}
            className={`px-4 py-2 mr-2 ${
              currentPage === i ? 'bg-[#2D5990] text-white' : 'bg-gray-200 hover:bg-gray-400'
            } rounded-full transition-all duration-300`}
          >
            {i}
          </button>
        );
      }
    } else {
      buttons.push(
        <button
          key={1}
          onClick={() => paginate(1)}
          className={`px-4 py-2 mr-2 ${
            currentPage === 1 ? 'bg-[#2D5990] text-white' : 'bg-gray-200 hover:bg-gray-400'
          } rounded-full transition-all duration-300`}
        >
          1
        </button>
      );

      if (currentPage > 3) {
        buttons.push(<span key="ellipsis1" className="px-4 py-2 mr-2">...</span>);
      }

      if (currentPage > 2) {
        buttons.push(
          <button
            key={currentPage - 1}
            onClick={() => paginate(currentPage - 1)}
            className="px-4 py-2 mr-2 bg-gray-200 hover:bg-gray-400 rounded-full transition-all duration-300"
          >
            {currentPage - 1}
          </button>
        );
      }

      if (currentPage !== 1 && currentPage !== totalPages) {
        buttons.push(
          <button
            key={currentPage}
            onClick={() => paginate(currentPage)}
            className="px-4 py-2 mr-2 bg-[#2D5990] text-white rounded-full transition-all duration-300"
          >
            {currentPage}
          </button>
        );
      }

      if (currentPage < totalPages - 1) {
        buttons.push(
          <button
            key={currentPage + 1}
            onClick={() => paginate(currentPage + 1)}
            className="px-4 py-2 mr-2 bg-gray-200 hover:bg-gray-400 rounded-full transition-all duration-300"
          >
            {currentPage + 1}
          </button>
        );
      }

      if (currentPage < totalPages - 2) {
        buttons.push(<span key="ellipsis2" className="px-4 py-2 mr-2">...</span>);
      }

      buttons.push(
        <button
          key={totalPages}
          onClick={() => paginate(totalPages)}
          className={`px-4 py-2 mr-2 ${
            currentPage === totalPages ? 'bg-[#2D5990] text-white' : 'bg-gray-200 hover:bg-gray-400'
          } rounded-full transition-all duration-300`}
        >
          {totalPages}
        </button>
      );
    }

    return buttons;
  };

  if (isLoading) {
    return (
      <div className="fixed top-0 left-0 right-0 bottom-0 w-full h-screen z-50 overflow-hidden bg-gray-700 opacity-75 flex flex-col items-center justify-center">
        <div className="loader ease-linear rounded-full border-4 border-t-4 border-gray-200 h-12 w-12 mb-4"></div>
        <h2 className="text-center text-white text-xl font-semibold">Loading...</h2>
        <p className="w-1/3 text-center text-white">This may take a few seconds, please don't close this page.</p>
      </div>
    );
  }
  if (error) return <div>{error}</div>;

  const role = sessionStorage.getItem('role');

  const handleImageClick = (src) => {
    setModalImageSrc(src);
    setIsModalOpen(true);
  };

  const closeModal = () => {
    setIsModalOpen(false);
  };

  return (
    <div>
      <Navbar />
      <div className="bg-gradient-to-br from-blue-100 to-blue-200 rounded-3xl m-1 md:mx-6 shadow-lg">
        <div className="px-4 py-6 md:px-32">
          <div className="relative flex flex-col md:flex-row items-center justify-between mb-1 md:mb-4 space-y-2 md:space-y-0">
            <div className="flex-none w-full md:w-auto">
              <input
                type="text"
                placeholder="Search..."
                value={searchQuery}
                onChange={handleSearch}
                className="w-full md:w-auto px-4 py-1 md:py-2 bg-white border border-gray-300 rounded-full text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-300"
              />
            </div>
  
            <div className="w-full md:absolute md:left-1/2 md:transform md:-translate-x-1/2 md:w-auto">
              <h2 className="text-md md:text-2xl font-bold text-center md:text-left text-[#2D5990]">STUDENT DASHBOARD</h2>
            </div>
  
            <div className="flex-none w-full md:w-auto">
              <div className="flex justify-center md:inline-flex md:text-base text-xs">{getPageButtons()}</div>
            </div>
          </div>
  
          <div className="overflow-x-auto">
            <table className="w-full table-auto bg-white border-collapse border border-gray-500">
              <thead className="bg-[#2D5990] text-white">
                <tr>
                  <th
                    className="px-2 py-3 text-center border-b border-gray-600 border-r cursor-pointer text-xs md:text-base " 
                  >
                    Photo
                  </th>
                  <th
                    className="px-2 py-3 text-center border-b border-gray-600 border-r cursor-pointer text-xs md:text-base "
                    onClick={() => handleSort('surName')}
                  >
                    Student Name {sortColumn === 'surName' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}
                  </th>
                  <th
                    className="px-2 py-2 text-center border-b border-gray-600 border-r cursor-pointer text-xs md:text-base"
                    onClick={() => handleSort('parentName')}
                  >
                    Parent Name {sortColumn === 'parentName' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}
                  </th>
                  <th
                    className="px-2 py-2 text-center border-b border-gray-600 border-r cursor-pointer text-xs md:text-base"
                    onClick={() => handleSort('applicationNumber')}
                  >
                    Application Number {sortColumn === 'applicationNumber' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}
                  </th>
                  <th
                    className="px-2 py-2 text-center border-b border-gray-600 border-r cursor-pointer text-xs md:text-base"
                    onClick={() => handleSort('batch')}
                  >
                    Batch {sortColumn === 'batch' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}
                  </th>
                  <th
                    className="px-2 py-2 text-center border-b border-gray-600 border-r cursor-pointer text-xs md:text-base"
                    onClick={() => handleSort('primaryContact')}
                  >
                    Primary Contact {sortColumn === 'primaryContact' && <span>{sortDirection === 'asc' ? '▲' : '▼'}</span>}
                  </th>
                  {role !== 'teacher' && (
                    <th className="px-2 py-2 text-center border-b border-gray-600 border-r cursor-pointer text-xs md:text-base">
                      Generate Report
                    </th>
                  )}
                </tr>
              </thead>
              <tbody>
                {currentStudents.map((student) => (
                  <tr
                    key={student._id}
                    className={`cursor-pointer ${
                      selectedRow === student._id ? 'bg-[#00A0E3] text-white' : 'even:bg-gray-200 hover:bg-gray-400'
                    } transition-all duration-300`}
                    onClick={() => handleRowClick(student._id)}
                  >
                    <td className="px-2 py-1 md:py-2 border-b border-gray-600 border-r md:text-base text-xs">
                      <div className="flex items-center justify-center">
                        <img
                          src={profileImage}
                          alt="Profile"
                          className="w-8 h-8 md:w-12 md:h-12 rounded-full transition-transform duration-300 transform hover:scale-110 cursor-pointer"
                          onClick={() => handleImageClick(profileImage)}
                        />
                      </div>
                    </td>
                    <td className="px-2 py-1 md:py-2 border-b border-gray-600 border-r md:text-base text-xs">{student.surName} {student.firstName}</td>
                    <td className="px-2 py-1 md:py-2 border-b border-gray-600 border-r md:text-base text-xs">{student.parentName}</td>
                    <td className="px-2 py-1 md:py-2 border-b border-gray-600 border-r md:text-base text-xs">{student.applicationNumber}</td>
                    <td className="px-2 py-1 md:py-2 border-b border-gray-600 border-r md:text-base text-xs">{student.batch}</td>
                    <td className="px-2 py-1 md:py-2 border-b border-gray-600 border-r md:text-base text-xs">{student.primaryContact}</td>
                    {role !== 'teacher' && (
                      <td className="px-2 py-1 md:py-2 border-b border-gray-600 text-center">
                        <button className="btn btn-sm text-white rounded-full transition-all duration-300 bg-[#00A0E3] hover:bg-[#2D5990] transform hover:scale-105">
                          Generate Report
                        </button>
                      </td>
                    )}
                  </tr>
                ))}
              </tbody>

            </table>
          </div>
          <div className="mt-4">
            <div className="text-center">
              <div className="flex justify-center">{getPageButtons()}</div>
            </div>
          </div>
        </div>
      </div>
      {isModalOpen && (
        <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-75">
          <div className="bg-white p-4 rounded-lg shadow-lg w-96 ">
            <img src={modalImageSrc} alt="Enlarged Profile" className="max-w-full h-auto rounded-lg" />
            <button
              onClick={closeModal}
              className="mt-4 px-4 py-2 bg-[#2D5990] text-white rounded-full transition-all duration-300 hover:bg-[#00A0E3]"
            >
              Close
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default Dashboard;


 

========== FILE: frontend/src/components/SessionsAndAllotments.js ==========

// src/components/SessionAndAllotments.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import Navbar from './Navbar';
import Modal from './Modal';
import StudentListModal from './StudentListModal';
import { format, parse, isAfter, compareAsc, isSameDay, isBefore } from 'date-fns';

const SessionAndAllotments = () => {
  const [startDate, setStartDate] = useState(new Date());
  const [selectedBranch, setSelectedBranch] = useState('All');
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [branches, setBranches] = useState([]);
  const [sessions, setSessions] = useState([]);
  const [allTeachers, setAllTeachers] = useState([]);
  const [isStudentListModalOpen, setIsStudentListModalOpen] = useState(false);
  const [selectedClusterID, setSelectedClusterID] = useState(null);

  useEffect(() => {
    const fetchBranches = async () => {
      try {
        const response = await axios.get('http://localhost:5000/branches');
        setBranches(response.data);
      } catch (error) {
        console.error('Error fetching branches data', error);
      }
    };

    fetchBranches();
  }, []);

  useEffect(() => {
    const fetchSessions = async () => {
      try {
        const response = await axios.get('http://localhost:5000/sessions');
        setSessions(response.data);

        const teachersSet = new Set();
        response.data.forEach((session) => {
          teachersSet.add(session.teacher);
        });

        setAllTeachers([...teachersSet]);
      } catch (error) {
        console.error('Error fetching sessions', error);
      }
    };

    fetchSessions();
  }, []);

  const handleBranchChange = (event) => {
    setSelectedBranch(event.target.value);
  };

  const filterAndSortSessions = (branchSessions) => {
    const sessionsByTeacher = {};

    branchSessions.forEach((session) => {
      if (!sessionsByTeacher[session.teacher]) {
        sessionsByTeacher[session.teacher] = [];
      }
      sessionsByTeacher[session.teacher].push(session);
    });

    const filteredSortedSessions = {};

    Object.keys(sessionsByTeacher).forEach((teacher) => {
      const teacherSessions = sessionsByTeacher[teacher];

      const beforeSessions = teacherSessions.filter((session) => {
        const [startPeriod] = session.period.split(' - ');
        const sessionStartDate = parse(startPeriod, 'MMM d, yyyy', new Date());
        return isBefore(sessionStartDate, startDate);
      }).sort((a, b) => {
        const [startPeriodA] = a.period.split(' - ');
        const [startPeriodB] = b.period.split(' - ');
        const sessionStartDateA = parse(startPeriodA, 'MMM d, yyyy', new Date());
        const sessionStartDateB = parse(startPeriodB, 'MMM d, yyyy', new Date());
        return compareAsc(sessionStartDateA, sessionStartDateB);
      }).slice(-4);

      const afterSessions = teacherSessions.filter((session) => {
        const [startPeriod] = session.period.split(' - ');
        const sessionStartDate = parse(startPeriod, 'MMM d, yyyy', new Date());
        return isSameDay(sessionStartDate, startDate) || isAfter(sessionStartDate, startDate);
      }).sort((a, b) => {
        const [startPeriodA] = a.period.split(' - ');
        const [startPeriodB] = b.period.split(' - ');
        const sessionStartDateA = parse(startPeriodA, 'MMM d, yyyy', new Date());
        const sessionStartDateB = parse(startPeriodB, 'MMM d, yyyy', new Date());
        return compareAsc(sessionStartDateA, sessionStartDateB);
      }).slice(0, 3);

      filteredSortedSessions[teacher] = [...beforeSessions, ...afterSessions];
    });

    return filteredSortedSessions;
  };

  const renderSessionsTable = (branch) => {
    const branchSessions = branch === 'All' ? sessions : sessions.filter((session) => session.branch === branch);
    const sortedSessionsByTeacher = filterAndSortSessions(branchSessions);

    const branchTeachers = new Set(branchSessions.map((session) => session.teacher));
    const branchPeriods = Array.from(new Set(Object.values(sortedSessionsByTeacher).flat().map(session => session.period))).slice(0, 7);

    return (
      <div key={branch} className="mb-12">
        <h2 className="text-2xl font-bold my-4 text-center text-[#2D5990]">
          {branch === 'All' ? 'All Branches' : branch}
        </h2>
        <table className="min-w-full bg-white border">
          <thead>
            <tr>
              <th className="py-2 px-4 border">Period</th>
              {[...branchTeachers].map((teacher, index) => (
                <th key={index} className="py-2 px-4 border">
                  {teacher}
                </th>
              ))}
            </tr>
          </thead>
          <tbody>
            {branchPeriods.map((period, index) => (
              <tr key={index} className={periodIncludesStartDate(period) ? 'bg-green-200' : ''}>
                <td className="py-2 px-4 border">{period}</td>
                {[...branchTeachers].map((teacher, teacherIndex) => {
                  const session = sortedSessionsByTeacher[teacher]?.find((session) => session.period === period);
                  return (
                    <td 
                      key={teacherIndex} 
                      className={`py-2 px-4 border`}
                      onClick={() => {
                        setSelectedClusterID(session.clusterID);
                        setIsStudentListModalOpen(true);
                      }}
                    >
                      {session ? (
                        <>
                          <p>Cluster ID: {session.clusterID}</p>
                          <p>Branch: {session.branch}</p>
                          <p>Status: {session.status}</p>
                        </>
                      ) : (
                        'N/A'
                      )}
                    </td>
                  );
                })}
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    );
  };

  const periodIncludesStartDate = (period) => {
    const [startPeriod, endPeriod] = period.split(' - ');
    const sessionStartDate = parse(startPeriod, 'MMM d, yyyy', new Date());
    const sessionEndDate = parse(endPeriod, 'MMM d, yyyy', new Date());
    return isSameDay(sessionStartDate, startDate) || (isBefore(sessionStartDate, startDate) && isAfter(sessionEndDate, startDate));
  };

  return (
    <div className="container mx-auto px-4 pb-8">
      <Navbar />
      <h1 className="text-4xl font-bold my-8 text-center text-[#2D5990]">
        Sessions and Allotments
      </h1>
      <div className="my-6 flex justify-center items-center">
        <label className="mr-4 text-xl font-medium text-[#2D5990]">
          Select Start Date:
        </label>
        <DatePicker
          selected={startDate}
          onChange={(date) => setStartDate(date)}
          className="border-2 border-[#00A0E3] bg-white rounded-lg p-3 focus:outline-none focus:ring-2 focus:ring-[#00A0E3]"
        />
        <label className="ml-8 mr-4 text-xl font-medium text-[#2D5990]">
          Select Branch:
        </label>
        <select
          value={selectedBranch}
          onChange={handleBranchChange}
          className="border-2 border-[#00A0E3] bg-white rounded-lg p-3 focus:outline-none focus:ring-2 focus:ring-[#00A0E3]"
        >
          <option value="All">All</option>
          {branches.map((branch) => (
            <option key={branch._id} value={branch.branchCode}>
              {branch.branchCode}
            </option>
          ))}
        </select>
        <button
          className="bg-[#2D5990] text-white font-medium py-2 px-4 rounded-lg ml-4 hover:bg-[#00A0E3] focus:outline-none focus:ring-2 focus:ring-[#00A0E3]"
          onClick={() => setIsModalOpen(true)}
        >
          Manage Sessions
        </button>
      </div>

      {selectedBranch === 'All'
        ? branches.map((branch) => renderSessionsTable(branch.branchCode))
        : renderSessionsTable(selectedBranch)}

      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} branches={branches} />
      <StudentListModal
        isOpen={isStudentListModalOpen}
        onClose={() => setIsStudentListModalOpen(false)}
        clusterID={selectedClusterID}
      />
    </div>
  );
};

export default SessionAndAllotments;
